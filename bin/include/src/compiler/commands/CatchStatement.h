// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_src_compiler_commands_CatchStatement
#define INCLUDED_src_compiler_commands_CatchStatement

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(src,compiler,Scope)
HX_DECLARE_CLASS3(src,compiler,commands,CatchStatement)
HX_DECLARE_CLASS3(src,compiler,commands,Command)

namespace src{
namespace compiler{
namespace commands{


class HXCPP_CLASS_ATTRIBUTES CatchStatement_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CatchStatement_obj OBJ_;
		CatchStatement_obj();

	public:
		enum { _hx_ClassId = 0x0060acdf };

		void __construct(::String name,::Array< ::String > types,::Array< ::Dynamic> code);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.compiler.commands.CatchStatement")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.compiler.commands.CatchStatement"); }
		static hx::ObjectPtr< CatchStatement_obj > __new(::String name,::Array< ::String > types,::Array< ::Dynamic> code);
		static hx::ObjectPtr< CatchStatement_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::String > types,::Array< ::Dynamic> code);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CatchStatement_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CatchStatement","\x94","\xb0","\x48","\x02"); }

		::String name;
		::Array< ::String > types;
		::Array< ::Dynamic> code;
		int progress;
		bool valueSet;
		 ::src::compiler::commands::CatchStatement copy( ::src::compiler::Scope scope);
		::Dynamic copy_dyn();

		void run( ::src::compiler::Scope scope,::String type, ::Dynamic source);
		::Dynamic run_dyn();

		bool checkType(::String type);
		::Dynamic checkType_dyn();

};

} // end namespace src
} // end namespace compiler
} // end namespace commands

#endif /* INCLUDED_src_compiler_commands_CatchStatement */ 
