// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_src_compiler_signals_YieldSignal
#define INCLUDED_src_compiler_signals_YieldSignal

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
HX_DECLARE_CLASS3(src,compiler,object,Object)
HX_DECLARE_CLASS5(src,compiler,object,builtin,coroutine,CoroutineObject)
HX_DECLARE_CLASS3(src,compiler,signals,ExitSignal)
HX_DECLARE_CLASS3(src,compiler,signals,YieldSignal)

namespace src{
namespace compiler{
namespace signals{


class HXCPP_CLASS_ATTRIBUTES YieldSignal_obj : public  ::src::compiler::signals::ExitSignal_obj
{
	public:
		typedef  ::src::compiler::signals::ExitSignal_obj super;
		typedef YieldSignal_obj OBJ_;
		YieldSignal_obj();

	public:
		enum { _hx_ClassId = 0x0305b50d };

		void __construct(bool isRead, ::src::compiler::object::builtin::coroutine::CoroutineObject coro,::Array< ::String > vars,::Array< ::Dynamic> values,::String wildcard, ::Dynamic timeLock);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.compiler.signals.YieldSignal")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.compiler.signals.YieldSignal"); }
		static hx::ObjectPtr< YieldSignal_obj > __new(bool isRead, ::src::compiler::object::builtin::coroutine::CoroutineObject coro,::Array< ::String > vars,::Array< ::Dynamic> values,::String wildcard, ::Dynamic timeLock);
		static hx::ObjectPtr< YieldSignal_obj > __alloc(hx::Ctx *_hx_ctx,bool isRead, ::src::compiler::object::builtin::coroutine::CoroutineObject coro,::Array< ::String > vars,::Array< ::Dynamic> values,::String wildcard, ::Dynamic timeLock);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~YieldSignal_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("YieldSignal","\x75","\x0c","\xe2","\x2d"); }

		static  ::src::compiler::signals::YieldSignal readYield( ::src::compiler::object::builtin::coroutine::CoroutineObject readFrom,::Array< ::String > vars,::String wildcard, ::Dynamic timeLock);
		static ::Dynamic readYield_dyn();

		static  ::src::compiler::signals::YieldSignal writeYield( ::src::compiler::object::builtin::coroutine::CoroutineObject writeTo,::Array< ::Dynamic> values,::String wildcard, ::Dynamic timeLock);
		static ::Dynamic writeYield_dyn();

		 ::src::compiler::object::builtin::coroutine::CoroutineObject coro;
		::Array< ::String > vars;
		::Array< ::Dynamic> values;
		::String wildcard;
		bool isTimeLocked;
		Float timeLock;
		bool isRead;
		::String getName();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace src
} // end namespace compiler
} // end namespace signals

#endif /* INCLUDED_src_compiler_signals_YieldSignal */ 
