// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject
#define INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(src,compiler,Scope)
HX_DECLARE_CLASS3(src,compiler,commands,Command)
HX_DECLARE_CLASS4(src,compiler,commands,coroutine,CoroutineCodeCommand)
HX_DECLARE_CLASS3(src,compiler,object,Object)
HX_DECLARE_CLASS3(src,compiler,object,ObjectType)
HX_DECLARE_CLASS5(src,compiler,object,builtin,coroutine,CoroutineLoop)
HX_DECLARE_CLASS5(src,compiler,object,builtin,coroutine,CoroutineObject)
HX_DECLARE_CLASS5(src,compiler,object,builtin,coroutine,CoroutinePacket)

namespace src{
namespace compiler{
namespace object{
namespace builtin{
namespace coroutine{


class HXCPP_CLASS_ATTRIBUTES CoroutineObject_obj : public  ::src::compiler::object::Object_obj
{
	public:
		typedef  ::src::compiler::object::Object_obj super;
		typedef CoroutineObject_obj OBJ_;
		CoroutineObject_obj();

	public:
		enum { _hx_ClassId = 0x75b1fbb0 };

		void __construct( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members, ::src::compiler::object::builtin::coroutine::CoroutineLoop loop, ::src::compiler::commands::coroutine::CoroutineCodeCommand code, ::src::compiler::Scope codeScope,::Array< ::Dynamic> args);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.compiler.object.builtin.coroutine.CoroutineObject")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.compiler.object.builtin.coroutine.CoroutineObject"); }
		static hx::ObjectPtr< CoroutineObject_obj > __new( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members, ::src::compiler::object::builtin::coroutine::CoroutineLoop loop, ::src::compiler::commands::coroutine::CoroutineCodeCommand code, ::src::compiler::Scope codeScope,::Array< ::Dynamic> args);
		static hx::ObjectPtr< CoroutineObject_obj > __alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members, ::src::compiler::object::builtin::coroutine::CoroutineLoop loop, ::src::compiler::commands::coroutine::CoroutineCodeCommand code, ::src::compiler::Scope codeScope,::Array< ::Dynamic> args);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CoroutineObject_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CoroutineObject","\x97","\x9e","\x9c","\xca"); }

		static void __boot();
		static  ::src::compiler::object::ObjectType emptyPacketType;
		::Array< ::Dynamic> inputStack;
		::Array< ::Dynamic> outputStack;
		 ::src::compiler::object::builtin::coroutine::CoroutineObject readingFrom;
		bool reading;
		::Array< ::String > vars;
		 ::src::compiler::object::builtin::coroutine::CoroutineObject writingTo;
		bool writing;
		::Array< ::Dynamic> values;
		 ::src::compiler::object::builtin::coroutine::CoroutinePacket waitForRead;
		::String wildcardName;
		Float timeLock;
		bool locked;
		bool finished;
		bool queued;
		 ::src::compiler::object::builtin::coroutine::CoroutineLoop loop;
		 ::src::compiler::commands::coroutine::CoroutineCodeCommand code;
		void addVars(::Array< ::String > vars);
		::Dynamic addVars_dyn();

		void setScope( ::src::compiler::Scope scope);

		 ::src::compiler::object::builtin::coroutine::CoroutineLoop getLoop();
		::Dynamic getLoop_dyn();

		void setLoop( ::src::compiler::object::builtin::coroutine::CoroutineLoop loop);
		::Dynamic setLoop_dyn();

		bool isFinished();
		::Dynamic isFinished_dyn();

		void startTimeLock(Float delay);
		::Dynamic startTimeLock_dyn();

		bool isQueued();
		::Dynamic isQueued_dyn();

		void queue();
		::Dynamic queue_dyn();

		void startRead(::Array< ::String > vars, ::src::compiler::object::builtin::coroutine::CoroutineObject from,::String wildcard);
		::Dynamic startRead_dyn();

		 ::src::compiler::object::builtin::coroutine::CoroutinePacket writeObject( ::src::compiler::object::Object obj);
		::Dynamic writeObject_dyn();

		 ::src::compiler::object::builtin::coroutine::CoroutinePacket writeObjectToCoro( ::src::compiler::object::Object obj, ::src::compiler::object::builtin::coroutine::CoroutineObject coro);
		::Dynamic writeObjectToCoro_dyn();

		 ::src::compiler::object::builtin::coroutine::CoroutinePacket readObject();
		::Dynamic readObject_dyn();

		 ::src::compiler::object::builtin::coroutine::CoroutinePacket readObjectFromCoro( ::src::compiler::object::builtin::coroutine::CoroutineObject coro);
		::Dynamic readObjectFromCoro_dyn();

		bool check();
		::Dynamic check_dyn();

};

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
} // end namespace coroutine

#endif /* INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject */ 
