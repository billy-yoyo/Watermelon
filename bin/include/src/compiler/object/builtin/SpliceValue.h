// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_src_compiler_object_builtin_SpliceValue
#define INCLUDED_src_compiler_object_builtin_SpliceValue

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_6f5c2e03f1a6f86d_14_new)
HX_DECLARE_CLASS4(src,compiler,object,builtin,SpliceValue)

namespace src{
namespace compiler{
namespace object{
namespace builtin{


class HXCPP_CLASS_ATTRIBUTES SpliceValue_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SpliceValue_obj OBJ_;
		SpliceValue_obj();

	public:
		enum { _hx_ClassId = 0x3196ec2c };

		void __construct(int start,int end,int step);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="src.compiler.object.builtin.SpliceValue")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"src.compiler.object.builtin.SpliceValue"); }

		hx::ObjectPtr< SpliceValue_obj > __new(int start,int end,int step) {
			hx::ObjectPtr< SpliceValue_obj > __this = new SpliceValue_obj();
			__this->__construct(start,end,step);
			return __this;
		}

		static hx::ObjectPtr< SpliceValue_obj > __alloc(hx::Ctx *_hx_ctx,int start,int end,int step) {
			SpliceValue_obj *__this = (SpliceValue_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpliceValue_obj), false, "src.compiler.object.builtin.SpliceValue"));
			*(void **)__this = SpliceValue_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_6f5c2e03f1a6f86d_14_new)
HXLINE(  15)		( ( ::src::compiler::object::builtin::SpliceValue)(__this) )->start = start;
HXLINE(  16)		( ( ::src::compiler::object::builtin::SpliceValue)(__this) )->end = end;
HXLINE(  17)		( ( ::src::compiler::object::builtin::SpliceValue)(__this) )->step = step;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SpliceValue_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("SpliceValue","\x35","\xa0","\xf8","\x97"); }

		int start;
		int end;
		int step;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin

#endif /* INCLUDED_src_compiler_object_builtin_SpliceValue */ 
