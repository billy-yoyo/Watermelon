// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_src_ast_TokenProcessor
#define INCLUDED_src_ast_TokenProcessor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(src,ast,Token)
HX_DECLARE_CLASS2(src,ast,TokenPriority)
HX_DECLARE_CLASS2(src,ast,TokenProcessor)
HX_DECLARE_CLASS3(src,ast,_TokenProcessor,TokenClass)

namespace src{
namespace ast{


class HXCPP_CLASS_ATTRIBUTES TokenProcessor_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TokenProcessor_obj OBJ_;
		TokenProcessor_obj();

	public:
		enum { _hx_ClassId = 0x40160917 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.ast.TokenProcessor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.ast.TokenProcessor"); }
		static hx::ObjectPtr< TokenProcessor_obj > __new();
		static hx::ObjectPtr< TokenProcessor_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TokenProcessor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TokenProcessor","\x39","\x07","\xf7","\x86"); }

		::Array< ::Dynamic> classes;
		 ::src::ast::TokenProcessor addClass(hx::Class cls, ::Dynamic match, ::Dynamic partialMatch);
		::Dynamic addClass_dyn();

		::Array< ::Dynamic> getMatches(::String s);
		::Dynamic getMatches_dyn();

		bool higherPriority( ::src::ast::TokenPriority priority1, ::src::ast::TokenPriority priority2);
		::Dynamic higherPriority_dyn();

		 ::src::ast::Token processToken(::String s);
		::Dynamic processToken_dyn();

		::Array< ::Dynamic> process(::String s);
		::Dynamic process_dyn();

};

} // end namespace src
} // end namespace ast

#endif /* INCLUDED_src_ast_TokenProcessor */ 
