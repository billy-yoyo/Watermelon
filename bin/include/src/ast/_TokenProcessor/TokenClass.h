// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_src_ast__TokenProcessor_TokenClass
#define INCLUDED_src_ast__TokenProcessor_TokenClass

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(src,ast,_TokenProcessor,TokenClass)

namespace src{
namespace ast{
namespace _TokenProcessor{


class HXCPP_CLASS_ATTRIBUTES TokenClass_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TokenClass_obj OBJ_;
		TokenClass_obj();

	public:
		enum { _hx_ClassId = 0x61bc89b5 };

		void __construct(hx::Class cls, ::Dynamic match, ::Dynamic partialMatch);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.ast._TokenProcessor.TokenClass")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"src.ast._TokenProcessor.TokenClass"); }
		static hx::ObjectPtr< TokenClass_obj > __new(hx::Class cls, ::Dynamic match, ::Dynamic partialMatch);
		static hx::ObjectPtr< TokenClass_obj > __alloc(hx::Ctx *_hx_ctx,hx::Class cls, ::Dynamic match, ::Dynamic partialMatch);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TokenClass_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TokenClass","\x9f","\x02","\xf1","\xb5"); }

		hx::Class cls;
		 ::Dynamic match;
		Dynamic match_dyn() { return match;}
		 ::Dynamic partialMatch;
		Dynamic partialMatch_dyn() { return partialMatch;}
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace src
} // end namespace ast
} // end namespace _TokenProcessor

#endif /* INCLUDED_src_ast__TokenProcessor_TokenClass */ 
