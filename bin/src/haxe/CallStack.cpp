// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif

namespace haxe{

void CallStack_obj::__construct() { }

Dynamic CallStack_obj::__CreateEmpty() { return new CallStack_obj; }

void *CallStack_obj::_hx_vtable = 0;

Dynamic CallStack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CallStack_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6207a884;
}

::Array< ::Dynamic> CallStack_obj::exceptionStack(){
	::Array< ::String > s = ::__hxcpp_get_exception_stack();
	return ::haxe::CallStack_obj::makeStack(s);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,exceptionStack,return )

::Array< ::Dynamic> CallStack_obj::makeStack(::Array< ::String > s){
	::Array< ::String > stack = s;
	::Array< ::Dynamic> m = ::Array_obj< ::Dynamic>::__new();
	{
		int _g = (int)0;
		while((_g < stack->length)){
			::String func = stack->__get(_g);
			_g = (_g + (int)1);
			::Array< ::String > words = func.split(HX_("::",c0,32,00,00));
			if ((words->length == (int)0)) {
				m->push(::haxe::StackItem_obj::CFunction_dyn());
			}
			else {
				if ((words->length == (int)2)) {
					m->push(::haxe::StackItem_obj::Method(words->__get((int)0),words->__get((int)1)));
				}
				else {
					if ((words->length == (int)4)) {
						 ::haxe::StackItem _hx_tmp = ::haxe::StackItem_obj::Method(words->__get((int)0),words->__get((int)1));
						m->push(::haxe::StackItem_obj::FilePos(_hx_tmp,words->__get((int)2),::Std_obj::parseInt(words->__get((int)3))));
					}
				}
			}
		}
	}
	return m;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,makeStack,return )


CallStack_obj::CallStack_obj()
{
}

bool CallStack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"makeStack") ) { outValue = makeStack_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CallStack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CallStack_obj_sStaticStorageInfo = 0;
#endif

static void CallStack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CallStack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#endif

hx::Class CallStack_obj::__mClass;

static ::String CallStack_obj_sStaticFields[] = {
	HX_HCSTRING("exceptionStack","\x79","\x48","\x56","\x0b"),
	HX_HCSTRING("makeStack","\x7a","\xde","\xa3","\x57"),
	::String(null())
};

void CallStack_obj::__register()
{
	hx::Object *dummy = new CallStack_obj;
	CallStack_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.CallStack","\x62","\x4b","\x54","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CallStack_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CallStack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CallStack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CallStack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
