// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_Mode
#include <src/Mode.h>
#endif
namespace src{

::src::Mode Mode_obj::AST;

::src::Mode Mode_obj::Compile;

::src::Mode Mode_obj::Exit;

::src::Mode Mode_obj::Interpret;

::src::Mode Mode_obj::Recon;

::src::Mode Mode_obj::Run;

bool Mode_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AST",22,9b,31,00)) { outValue = Mode_obj::AST; return true; }
	if (inName==HX_("Compile",53,4d,c0,50)) { outValue = Mode_obj::Compile; return true; }
	if (inName==HX_("Exit",3e,23,f7,2d)) { outValue = Mode_obj::Exit; return true; }
	if (inName==HX_("Interpret",ed,1b,56,e2)) { outValue = Mode_obj::Interpret; return true; }
	if (inName==HX_("Recon",4f,9e,e9,79)) { outValue = Mode_obj::Recon; return true; }
	if (inName==HX_("Run",2b,9f,3e,00)) { outValue = Mode_obj::Run; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Mode_obj)

int Mode_obj::__FindIndex(::String inName)
{
	if (inName==HX_("AST",22,9b,31,00)) return 4;
	if (inName==HX_("Compile",53,4d,c0,50)) return 0;
	if (inName==HX_("Exit",3e,23,f7,2d)) return 3;
	if (inName==HX_("Interpret",ed,1b,56,e2)) return 1;
	if (inName==HX_("Recon",4f,9e,e9,79)) return 5;
	if (inName==HX_("Run",2b,9f,3e,00)) return 2;
	return super::__FindIndex(inName);
}

int Mode_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("AST",22,9b,31,00)) return 0;
	if (inName==HX_("Compile",53,4d,c0,50)) return 0;
	if (inName==HX_("Exit",3e,23,f7,2d)) return 0;
	if (inName==HX_("Interpret",ed,1b,56,e2)) return 0;
	if (inName==HX_("Recon",4f,9e,e9,79)) return 0;
	if (inName==HX_("Run",2b,9f,3e,00)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Mode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AST",22,9b,31,00)) return AST;
	if (inName==HX_("Compile",53,4d,c0,50)) return Compile;
	if (inName==HX_("Exit",3e,23,f7,2d)) return Exit;
	if (inName==HX_("Interpret",ed,1b,56,e2)) return Interpret;
	if (inName==HX_("Recon",4f,9e,e9,79)) return Recon;
	if (inName==HX_("Run",2b,9f,3e,00)) return Run;
	return super::__Field(inName,inCallProp);
}

static ::String Mode_obj_sStaticFields[] = {
	HX_("Compile",53,4d,c0,50),
	HX_("Interpret",ed,1b,56,e2),
	HX_("Run",2b,9f,3e,00),
	HX_("Exit",3e,23,f7,2d),
	HX_("AST",22,9b,31,00),
	HX_("Recon",4f,9e,e9,79),
	::String(null())
};

static void Mode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mode_obj::AST,"AST");
	HX_MARK_MEMBER_NAME(Mode_obj::Compile,"Compile");
	HX_MARK_MEMBER_NAME(Mode_obj::Exit,"Exit");
	HX_MARK_MEMBER_NAME(Mode_obj::Interpret,"Interpret");
	HX_MARK_MEMBER_NAME(Mode_obj::Recon,"Recon");
	HX_MARK_MEMBER_NAME(Mode_obj::Run,"Run");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mode_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mode_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Mode_obj::AST,"AST");
	HX_VISIT_MEMBER_NAME(Mode_obj::Compile,"Compile");
	HX_VISIT_MEMBER_NAME(Mode_obj::Exit,"Exit");
	HX_VISIT_MEMBER_NAME(Mode_obj::Interpret,"Interpret");
	HX_VISIT_MEMBER_NAME(Mode_obj::Recon,"Recon");
	HX_VISIT_MEMBER_NAME(Mode_obj::Run,"Run");
};
#endif

hx::Class Mode_obj::__mClass;

Dynamic __Create_Mode_obj() { return new Mode_obj; }

void Mode_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("src.Mode","\x4d","\x8d","\x35","\x7b"), hx::TCanCast< Mode_obj >,Mode_obj_sStaticFields,0,
	&__Create_Mode_obj, &__Create,
	&super::__SGetClass(), &CreateMode_obj, Mode_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Mode_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Mode_obj::__GetStatic;
}

void Mode_obj::__boot()
{
AST = hx::CreateEnum< Mode_obj >(HX_HCSTRING("AST","\x22","\x9b","\x31","\x00"),4,0);
Compile = hx::CreateEnum< Mode_obj >(HX_HCSTRING("Compile","\x53","\x4d","\xc0","\x50"),0,0);
Exit = hx::CreateEnum< Mode_obj >(HX_HCSTRING("Exit","\x3e","\x23","\xf7","\x2d"),3,0);
Interpret = hx::CreateEnum< Mode_obj >(HX_HCSTRING("Interpret","\xed","\x1b","\x56","\xe2"),1,0);
Recon = hx::CreateEnum< Mode_obj >(HX_HCSTRING("Recon","\x4f","\x9e","\xe9","\x79"),5,0);
Run = hx::CreateEnum< Mode_obj >(HX_HCSTRING("Run","\x2b","\x9f","\x3e","\x00"),2,0);
}


} // end namespace src
