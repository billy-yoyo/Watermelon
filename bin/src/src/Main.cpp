// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_src_Main
#include <src/Main.h>
#endif
#ifndef INCLUDED_src_Mode
#include <src/Mode.h>
#endif
#ifndef INCLUDED_src_ast_GlobalProcessor
#include <src/ast/GlobalProcessor.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_RootToken
#include <src/ast/base/RootToken.h>
#endif
#ifndef INCLUDED_src_compiler_Core
#include <src/compiler/Core.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_RootCommand
#include <src/compiler/commands/RootCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitCodeSignal
#include <src/compiler/signals/ExitCodeSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_36___default_print,"src.Main","__default_print",0x2fb54384,"src.Main.__default_print","src/Main.hx",36,0xa1307a9a)
HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_42_main,"src.Main","main",0xed2a5664,"src.Main.main","src/Main.hx",42,0xa1307a9a)
HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_225_shell,"src.Main","shell",0x10e63025,"src.Main.shell","src/Main.hx",225,0xa1307a9a)
HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_33_boot,"src.Main","boot",0xe5efa25d,"src.Main.boot","src/Main.hx",33,0xa1307a9a)
HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_34_boot,"src.Main","boot",0xe5efa25d,"src.Main.boot","src/Main.hx",34,0xa1307a9a)
HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_35_boot,"src.Main","boot",0xe5efa25d,"src.Main.boot","src/Main.hx",35,0xa1307a9a)
namespace src{

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x18d5e0fd;
}

::String Main_obj::NAME;

::String Main_obj::COMMANDNAME;

::String Main_obj::VERSION;

HX_BEGIN_DEFAULT_FUNC(__default_print,Main_obj)
void _hx_run(::String s){
            	HX_STACKFRAME(&_hx_pos_00c4668d97320537_36___default_print)
HXLINE(  37)		 ::haxe::io::Output _hx_tmp = ::Sys_obj::_hx_stdout();
HXDLIN(  37)		_hx_tmp->writeString((s + HX_("\n",0a,00,00,00)));
HXLINE(  38)		::Sys_obj::_hx_stdout()->flush();
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

::Dynamic Main_obj::print;

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_00c4668d97320537_42_main)
HXLINE(  79)		::Array< ::String > args = ::Sys_obj::args();
HXLINE(  81)		if ((args->length == (int)0)) {
HXLINE(  82)			::src::Main_obj::shell();
            		}
            		else {
HXLINE(  84)			if ((args->__get((int)0).substr((int)0,(int)2) == HX_("--",60,27,00,00))) {
HXLINE(  85)				::String cmd = args->__get((int)0).substr((int)2,args->__get((int)0).length);
HXLINE(  86)				if ((cmd == HX_("version",18,e7,f1,7c))) {
HXLINE(  87)					 ::Dynamic _hx_tmp = hx::ClassOf< ::src::Main >();
HXDLIN(  87)					::src::Main_obj::print((((HX_("",00,00,00,00) + ::src::Main_obj::NAME) + HX_(" v",56,1c,00,00)) + ::src::Main_obj::VERSION));
            				}
            				else {
HXLINE(  88)					if ((cmd == HX_("help",c1,32,0b,45))) {
HXLINE(  89)						 ::Dynamic _hx_tmp1 = hx::ClassOf< ::src::Main >();
HXDLIN(  89)						::src::Main_obj::print(((HX_("",00,00,00,00) + ::src::Main_obj::COMMANDNAME) + HX_(" [file] {-compile [output]|-interp|-ast}   - run file",d9,88,63,88)));
HXLINE(  90)						 ::Dynamic _hx_tmp2 = hx::ClassOf< ::src::Main >();
HXDLIN(  90)						::src::Main_obj::print(((HX_("",00,00,00,00) + ::src::Main_obj::COMMANDNAME) + HX_(" --version                   - show version",50,76,10,b1)));
HXLINE(  91)						 ::Dynamic _hx_tmp3 = hx::ClassOf< ::src::Main >();
HXDLIN(  91)						::src::Main_obj::print(((HX_("",00,00,00,00) + ::src::Main_obj::COMMANDNAME) + HX_(" --help                      - show help",b0,4d,4e,9a)));
            					}
            				}
            			}
            			else {
HXLINE(  94)				 ::src::Mode mode = ::src::Mode_obj::Run_dyn();
HXLINE(  95)				::String file = null();
HXDLIN(  95)				::String flag;
HXDLIN(  95)				::String arg;
HXLINE(  96)				::String output = null();
HXDLIN(  96)				int i = (int)0;
HXLINE(  97)				while((i < args->length)){
HXLINE(  98)					i = (i + (int)1);
HXDLIN(  98)					arg = args->__get((i - (int)1));
HXLINE(  99)					if ((arg.charAt((int)0) == HX_("-",2d,00,00,00))) {
HXLINE( 100)						flag = arg.substr((int)1,null());
HXLINE( 101)						if (hx::IsNotEq( mode,::src::Mode_obj::Run_dyn() )) {
HXLINE( 102)							mode = ::src::Mode_obj::Exit_dyn();
HXLINE( 103)							::src::Main_obj::print(HX_("Too many run flags, can only have one",e1,e0,ab,a2));
HXLINE( 104)							goto _hx_goto_1;
            						}
HXLINE( 106)						if ((flag == HX_("compile",73,25,6f,83))) {
HXLINE( 107)							mode = ::src::Mode_obj::Compile_dyn();
HXLINE( 108)							i = (i + (int)1);
HXDLIN( 108)							output = args->__get((i - (int)1));
            						}
            						else {
HXLINE( 110)							if ((flag == HX_("interp",d4,79,86,9e))) {
HXLINE( 110)								mode = ::src::Mode_obj::Interpret_dyn();
            							}
            							else {
HXLINE( 111)								if ((flag == HX_("ast",42,ff,49,00))) {
HXLINE( 111)									mode = ::src::Mode_obj::AST_dyn();
            								}
            								else {
HXLINE( 112)									if ((flag == HX_("recon",6f,2e,bc,e6))) {
HXLINE( 113)										mode = ::src::Mode_obj::Recon_dyn();
HXLINE( 114)										i = (i + (int)1);
HXDLIN( 114)										output = args->__get((i - (int)1));
            									}
            									else {
HXLINE( 117)										 ::Dynamic _hx_tmp4 = hx::ClassOf< ::src::Main >();
HXDLIN( 117)										::src::Main_obj::print((HX_("invalid flag ",0b,a5,d4,9e) + flag));
HXLINE( 118)										mode = ::src::Mode_obj::Exit_dyn();
HXLINE( 119)										goto _hx_goto_1;
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE( 122)						if (hx::IsNull( file )) {
HXLINE( 122)							file = arg;
            						}
            						else {
HXLINE( 123)							file = ((file + HX_(" ",20,00,00,00)) + arg);
            						}
            					}
            				}
            				_hx_goto_1:;
HXLINE( 126)				if (hx::IsNull( file )) {
HXLINE( 127)					::src::Main_obj::print(HX_("No file name given",4d,bf,6e,a6));
            				}
            				else {
HXLINE( 128)					if (!(::sys::FileSystem_obj::exists(file))) {
HXLINE( 129)						 ::Dynamic _hx_tmp5 = hx::ClassOf< ::src::Main >();
HXDLIN( 129)						::src::Main_obj::print(((HX_("Invalid path, no file found at \"",9a,31,35,bc) + file) + HX_("\"",22,00,00,00)));
            					}
            					else {
HXLINE( 130)						if (hx::IsEq( mode,::src::Mode_obj::Run_dyn() )) {
HXLINE( 131)							 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(file);
HXLINE( 132)							 ::src::compiler::commands::RootCommand code = ::src::compiler::Core_obj::convertBytes(bytes,null());
HXLINE( 133)							code->run();
            						}
            						else {
HXLINE( 134)							if (hx::IsEq( mode,::src::Mode_obj::Compile_dyn() )) {
HXLINE( 135)								::String lines = ::sys::io::File_obj::getContent(file);
HXLINE( 136)								 ::src::ast::base::RootToken root = ::src::ast::GlobalProcessor_obj::process(lines);
HXLINE( 137)								 ::src::compiler::commands::RootCommand cmd1 = ::src::compiler::Core_obj::convertRoot(root,null());
HXLINE( 138)								 ::src::compiler::bytecode::Bytecode code1 = cmd1->getBytecode();
HXLINE( 139)								 ::sys::io::FileOutput writer = ::sys::io::File_obj::write(output,null());
HXLINE( 140)								 ::haxe::io::Bytes bytes1 = code1->getByteData();
HXLINE( 141)								writer->writeBytes(bytes1,(int)0,bytes1->length);
HXLINE( 142)								writer->flush();
HXDLIN( 142)								writer->close();
HXLINE( 143)								 ::Dynamic _hx_tmp6 = hx::ClassOf< ::src::Main >();
HXDLIN( 143)								::src::Main_obj::print((HX_("compiled to ",36,76,26,83) + output));
            							}
            							else {
HXLINE( 144)								if (hx::IsEq( mode,::src::Mode_obj::Interpret_dyn() )) {
HXLINE( 145)									::String lines1 = ::sys::io::File_obj::getContent(file);
HXLINE( 146)									 ::src::ast::base::RootToken root1 = ::src::ast::GlobalProcessor_obj::process(lines1);
HXLINE( 147)									 ::src::compiler::commands::RootCommand cmd2 = ::src::compiler::Core_obj::convertRoot(root1,null());
HXLINE( 148)									cmd2->run();
            								}
            								else {
HXLINE( 149)									if (hx::IsEq( mode,::src::Mode_obj::AST_dyn() )) {
HXLINE( 150)										::String lines2 = ::sys::io::File_obj::getContent(file);
HXLINE( 151)										 ::src::ast::base::RootToken root2 = ::src::ast::GlobalProcessor_obj::process(lines2);
HXLINE( 152)										::Array< ::String > tree = ::src::ast::Token_obj::createTree(root2);
HXLINE( 153)										{
HXLINE( 153)											int _g = (int)0;
HXDLIN( 153)											while((_g < tree->length)){
HXLINE( 153)												::String line = tree->__get(_g);
HXDLIN( 153)												_g = (_g + (int)1);
HXDLIN( 153)												::src::Main_obj::print(line);
            											}
            										}
            									}
            									else {
HXLINE( 154)										if (hx::IsEq( mode,::src::Mode_obj::Recon_dyn() )) {
HXLINE( 155)											 ::haxe::io::Bytes bytes2 = ::sys::io::File_obj::getBytes(file);
HXLINE( 156)											 ::src::compiler::commands::RootCommand code2 = ::src::compiler::Core_obj::convertBytes(bytes2,null());
HXLINE( 157)											 ::src::ast::base::RootToken root3 = ::src::ast::base::RootToken_obj::fromRaw(code2->reconstruct());
HXLINE( 158)											::String s = root3->reconstruct(null());
HXLINE( 159)											 ::sys::io::FileOutput writer1 = ::sys::io::File_obj::write(output,null());
HXLINE( 160)											writer1->writeString(s);
HXLINE( 161)											writer1->flush();
HXDLIN( 161)											writer1->close();
HXLINE( 162)											 ::Dynamic _hx_tmp7 = hx::ClassOf< ::src::Main >();
HXDLIN( 162)											::src::Main_obj::print((HX_("Reconstructed bytecode to ",d7,77,24,9a) + output));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::shell(){
            	HX_GC_STACKFRAME(&_hx_pos_00c4668d97320537_225_shell)
HXLINE( 226)		::String line;
HXLINE( 227)		 ::src::compiler::Scope scope =  ::src::compiler::Scope_obj::__alloc( HX_CTX ,HX_("root",22,ee,ae,4b),null());
HXLINE( 228)		 ::src::ast::base::RootToken root;
HXDLIN( 228)		 ::src::compiler::commands::RootCommand code;
HXLINE( 229)		while(true){
HXLINE( 231)			try {
            				HX_STACK_CATCHABLE( ::src::compiler::signals::ExitCodeSignal, 0);
            				HX_STACK_CATCHABLE( ::src::compiler::signals::SyntaxErrorSignal, 1);
HXLINE( 232)				::Sys_obj::_hx_stdout()->writeString(HX_(">>> ",62,7c,2a,29));
HXLINE( 233)				::Sys_obj::_hx_stdout()->flush();
HXLINE( 234)				line = ::Sys_obj::_hx_stdin()->readLine();
HXLINE( 235)				root = ::src::ast::GlobalProcessor_obj::process(line);
HXLINE( 236)				code = ::src::compiler::Core_obj::convertRoot(root,scope);
HXLINE( 237)				code->run();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::src::compiler::signals::ExitCodeSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::ExitCodeSignal e = _hx_e;
HXLINE( 239)					goto _hx_goto_4;
            				}
            				else if (_hx_e.IsClass<  ::src::compiler::signals::SyntaxErrorSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::SyntaxErrorSignal e1 = _hx_e;
HXLINE( 241)					 ::Dynamic _hx_tmp = hx::ClassOf< ::src::Main >();
HXDLIN( 241)					::src::Main_obj::print((HX_("SyntaxError: ",2b,d8,ad,a6) + e1->msg));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_4:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,shell,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"NAME") ) { outValue = ( NAME ); return true; }
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = ( print ); return true; }
		if (HX_FIELD_EQ(inName,"shell") ) { outValue = shell_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { outValue = ( VERSION ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"COMMANDNAME") ) { outValue = ( COMMANDNAME ); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"NAME") ) { NAME=ioValue.Cast< ::String >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { print=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"COMMANDNAME") ) { COMMANDNAME=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Main_obj::NAME,HX_HCSTRING("NAME","\x4b","\x3a","\xc0","\x33")},
	{hx::fsString,(void *) &Main_obj::COMMANDNAME,HX_HCSTRING("COMMANDNAME","\xf6","\xf0","\xc2","\xd1")},
	{hx::fsString,(void *) &Main_obj::VERSION,HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Main_obj::print,HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Main_obj::NAME,"NAME");
	HX_MARK_MEMBER_NAME(Main_obj::COMMANDNAME,"COMMANDNAME");
	HX_MARK_MEMBER_NAME(Main_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(Main_obj::print,"print");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Main_obj::NAME,"NAME");
	HX_VISIT_MEMBER_NAME(Main_obj::COMMANDNAME,"COMMANDNAME");
	HX_VISIT_MEMBER_NAME(Main_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(Main_obj::print,"print");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("NAME","\x4b","\x3a","\xc0","\x33"),
	HX_HCSTRING("COMMANDNAME","\xf6","\xf0","\xc2","\xd1"),
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("shell","\xb0","\xe8","\x1f","\x7c"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.Main","\x23","\xf2","\x2a","\x7b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_00c4668d97320537_33_boot)
HXDLIN(  33)		NAME = HX_("YoYo",6c,85,28,3b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_00c4668d97320537_34_boot)
HXDLIN(  34)		COMMANDNAME = HX_("yoyo",2c,75,4f,50);
            	}
{
            	HX_STACKFRAME(&_hx_pos_00c4668d97320537_35_boot)
HXDLIN(  35)		VERSION = HX_("0.1.0",75,ff,c8,c1);
            	}
	print = new __default_print;

}

} // end namespace src
