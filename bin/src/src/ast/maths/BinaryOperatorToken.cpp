// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_maths_BinaryOperatorToken
#include <src/ast/maths/BinaryOperatorToken.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9356228f65e65ea6_8_new,"src.ast.maths.BinaryOperatorToken","new",0xc4a854cd,"src.ast.maths.BinaryOperatorToken.new","src/ast/maths/BinaryOperatorToken.hx",8,0x1904bf86)
HX_LOCAL_STACK_FRAME(_hx_pos_9356228f65e65ea6_23_getName,"src.ast.maths.BinaryOperatorToken","getName",0x4115e0ee,"src.ast.maths.BinaryOperatorToken.getName","src/ast/maths/BinaryOperatorToken.hx",23,0x1904bf86)
HX_LOCAL_STACK_FRAME(_hx_pos_9356228f65e65ea6_13_match,"src.ast.maths.BinaryOperatorToken","match",0xe8f382f2,"src.ast.maths.BinaryOperatorToken.match","src/ast/maths/BinaryOperatorToken.hx",13,0x1904bf86)
HX_LOCAL_STACK_FRAME(_hx_pos_9356228f65e65ea6_18_partialMatch,"src.ast.maths.BinaryOperatorToken","partialMatch",0x217213f7,"src.ast.maths.BinaryOperatorToken.partialMatch","src/ast/maths/BinaryOperatorToken.hx",18,0x1904bf86)
namespace src{
namespace ast{
namespace maths{

void BinaryOperatorToken_obj::__construct(::String content){
            	HX_STACKFRAME(&_hx_pos_9356228f65e65ea6_8_new)
HXDLIN(   8)		super::__construct(content);
            	}

Dynamic BinaryOperatorToken_obj::__CreateEmpty() { return new BinaryOperatorToken_obj; }

void *BinaryOperatorToken_obj::_hx_vtable = 0;

Dynamic BinaryOperatorToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BinaryOperatorToken_obj > _hx_result = new BinaryOperatorToken_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BinaryOperatorToken_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62e82067) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x62e82067;
	} else {
		return inClassId==(int)0x7cd9a4bb;
	}
}

::String BinaryOperatorToken_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_9356228f65e65ea6_23_getName)
HXDLIN(  23)		return HX_("BinaryOperatorToken",d4,03,95,d1);
            	}


bool BinaryOperatorToken_obj::match(::String s){
            	HX_STACKFRAME(&_hx_pos_9356228f65e65ea6_13_match)
HXDLIN(  13)		bool _hx_tmp;
HXDLIN(  13)		bool _hx_tmp1;
HXDLIN(  13)		bool _hx_tmp2;
HXDLIN(  13)		bool _hx_tmp3;
HXDLIN(  13)		if ((s != HX_("|",7c,00,00,00))) {
HXDLIN(  13)			_hx_tmp3 = (s == HX_("&",26,00,00,00));
            		}
            		else {
HXDLIN(  13)			_hx_tmp3 = true;
            		}
HXDLIN(  13)		if (!(_hx_tmp3)) {
HXDLIN(  13)			_hx_tmp2 = (s == HX_("^",5e,00,00,00));
            		}
            		else {
HXDLIN(  13)			_hx_tmp2 = true;
            		}
HXDLIN(  13)		if (!(_hx_tmp2)) {
HXDLIN(  13)			_hx_tmp1 = (s == HX_("~",7e,00,00,00));
            		}
            		else {
HXDLIN(  13)			_hx_tmp1 = true;
            		}
HXDLIN(  13)		if (!(_hx_tmp1)) {
HXDLIN(  13)			_hx_tmp = (s == HX_(">>",40,36,00,00));
            		}
            		else {
HXDLIN(  13)			_hx_tmp = true;
            		}
HXDLIN(  13)		if (!(_hx_tmp)) {
HXDLIN(  13)			return (s == HX_("<<",80,34,00,00));
            		}
            		else {
HXDLIN(  13)			return true;
            		}
HXDLIN(  13)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BinaryOperatorToken_obj,match,return )

bool BinaryOperatorToken_obj::partialMatch(::String s){
            	HX_STACKFRAME(&_hx_pos_9356228f65e65ea6_18_partialMatch)
HXDLIN(  18)		bool _hx_tmp;
HXDLIN(  18)		if ((s != HX_("<",3c,00,00,00))) {
HXDLIN(  18)			_hx_tmp = (s == HX_(">",3e,00,00,00));
            		}
            		else {
HXDLIN(  18)			_hx_tmp = true;
            		}
HXDLIN(  18)		if (!(_hx_tmp)) {
HXDLIN(  18)			return ::src::ast::maths::BinaryOperatorToken_obj::match(s);
            		}
            		else {
HXDLIN(  18)			return true;
            		}
HXDLIN(  18)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BinaryOperatorToken_obj,partialMatch,return )


hx::ObjectPtr< BinaryOperatorToken_obj > BinaryOperatorToken_obj::__new(::String content) {
	hx::ObjectPtr< BinaryOperatorToken_obj > __this = new BinaryOperatorToken_obj();
	__this->__construct(content);
	return __this;
}

hx::ObjectPtr< BinaryOperatorToken_obj > BinaryOperatorToken_obj::__alloc(hx::Ctx *_hx_ctx,::String content) {
	BinaryOperatorToken_obj *__this = (BinaryOperatorToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BinaryOperatorToken_obj), true, "src.ast.maths.BinaryOperatorToken"));
	*(void **)__this = BinaryOperatorToken_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

BinaryOperatorToken_obj::BinaryOperatorToken_obj()
{
}

hx::Val BinaryOperatorToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BinaryOperatorToken_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { outValue = partialMatch_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BinaryOperatorToken_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BinaryOperatorToken_obj_sStaticStorageInfo = 0;
#endif

static ::String BinaryOperatorToken_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	::String(null()) };

static void BinaryOperatorToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BinaryOperatorToken_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BinaryOperatorToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BinaryOperatorToken_obj::__mClass,"__mClass");
};

#endif

hx::Class BinaryOperatorToken_obj::__mClass;

static ::String BinaryOperatorToken_obj_sStaticFields[] = {
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	::String(null())
};

void BinaryOperatorToken_obj::__register()
{
	hx::Object *dummy = new BinaryOperatorToken_obj;
	BinaryOperatorToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.maths.BinaryOperatorToken","\x5b","\xea","\xb8","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BinaryOperatorToken_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BinaryOperatorToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BinaryOperatorToken_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BinaryOperatorToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BinaryOperatorToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BinaryOperatorToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BinaryOperatorToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BinaryOperatorToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
} // end namespace maths
