// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_CommaToken
#include <src/ast/base/CommaToken.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1920cc058ec77dd7_8_new,"src.ast.base.CommaToken","new",0x226af4fd,"src.ast.base.CommaToken.new","src/ast/base/CommaToken.hx",8,0x3490a974)
HX_LOCAL_STACK_FRAME(_hx_pos_1920cc058ec77dd7_23_getName,"src.ast.base.CommaToken","getName",0x67e4591e,"src.ast.base.CommaToken.getName","src/ast/base/CommaToken.hx",23,0x3490a974)
HX_LOCAL_STACK_FRAME(_hx_pos_1920cc058ec77dd7_13_match,"src.ast.base.CommaToken","match",0x34c28f22,"src.ast.base.CommaToken.match","src/ast/base/CommaToken.hx",13,0x3490a974)
HX_LOCAL_STACK_FRAME(_hx_pos_1920cc058ec77dd7_18_partialMatch,"src.ast.base.CommaToken","partialMatch",0x9451edc7,"src.ast.base.CommaToken.partialMatch","src/ast/base/CommaToken.hx",18,0x3490a974)
namespace src{
namespace ast{
namespace base{

void CommaToken_obj::__construct(::String content){
            	HX_STACKFRAME(&_hx_pos_1920cc058ec77dd7_8_new)
HXDLIN(   8)		super::__construct(content);
            	}

Dynamic CommaToken_obj::__CreateEmpty() { return new CommaToken_obj; }

void *CommaToken_obj::_hx_vtable = 0;

Dynamic CommaToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CommaToken_obj > _hx_result = new CommaToken_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CommaToken_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ecededf) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ecededf;
	} else {
		return inClassId==(int)0x7cd9a4bb;
	}
}

::String CommaToken_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_1920cc058ec77dd7_23_getName)
HXDLIN(  23)		return HX_("CommaToken",04,01,3f,49);
            	}


bool CommaToken_obj::match(::String s){
            	HX_STACKFRAME(&_hx_pos_1920cc058ec77dd7_13_match)
HXDLIN(  13)		return (s == HX_(",",2c,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CommaToken_obj,match,return )

bool CommaToken_obj::partialMatch(::String s){
            	HX_STACKFRAME(&_hx_pos_1920cc058ec77dd7_18_partialMatch)
HXDLIN(  18)		return ::src::ast::base::CommaToken_obj::match(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CommaToken_obj,partialMatch,return )


hx::ObjectPtr< CommaToken_obj > CommaToken_obj::__new(::String content) {
	hx::ObjectPtr< CommaToken_obj > __this = new CommaToken_obj();
	__this->__construct(content);
	return __this;
}

hx::ObjectPtr< CommaToken_obj > CommaToken_obj::__alloc(hx::Ctx *_hx_ctx,::String content) {
	CommaToken_obj *__this = (CommaToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CommaToken_obj), true, "src.ast.base.CommaToken"));
	*(void **)__this = CommaToken_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

CommaToken_obj::CommaToken_obj()
{
}

hx::Val CommaToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CommaToken_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { outValue = partialMatch_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CommaToken_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CommaToken_obj_sStaticStorageInfo = 0;
#endif

static ::String CommaToken_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	::String(null()) };

static void CommaToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CommaToken_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CommaToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CommaToken_obj::__mClass,"__mClass");
};

#endif

hx::Class CommaToken_obj::__mClass;

static ::String CommaToken_obj_sStaticFields[] = {
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	::String(null())
};

void CommaToken_obj::__register()
{
	hx::Object *dummy = new CommaToken_obj;
	CommaToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.base.CommaToken","\x8b","\xb2","\x3b","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CommaToken_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CommaToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CommaToken_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CommaToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CommaToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CommaToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CommaToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CommaToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
} // end namespace base
