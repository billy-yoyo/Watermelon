// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_StringToken
#include <src/ast/base/StringToken.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_508166863f4ce950_15_new,"src.ast.base.StringToken","new",0xf3db9653,"src.ast.base.StringToken.new","src/ast/base/StringToken.hx",15,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_30_getName,"src.ast.base.StringToken","getName",0xb92f5d74,"src.ast.base.StringToken.getName","src/ast/base/StringToken.hx",30,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_35_getLength,"src.ast.base.StringToken","getLength",0x6b675c4f,"src.ast.base.StringToken.getLength","src/ast/base/StringToken.hx",35,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_40_reconstruct,"src.ast.base.StringToken","reconstruct",0xe395d6f7,"src.ast.base.StringToken.reconstruct","src/ast/base/StringToken.hx",40,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_20_match,"src.ast.base.StringToken","match",0xbc9eb1f8,"src.ast.base.StringToken.match","src/ast/base/StringToken.hx",20,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_25_partialMatch,"src.ast.base.StringToken","partialMatch",0x834971b1,"src.ast.base.StringToken.partialMatch","src/ast/base/StringToken.hx",25,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_11_boot,"src.ast.base.StringToken","boot",0x6460f2df,"src.ast.base.StringToken.boot","src/ast/base/StringToken.hx",11,0x023ff8fc)
HX_LOCAL_STACK_FRAME(_hx_pos_508166863f4ce950_12_boot,"src.ast.base.StringToken","boot",0x6460f2df,"src.ast.base.StringToken.boot","src/ast/base/StringToken.hx",12,0x023ff8fc)
namespace src{
namespace ast{
namespace base{

void StringToken_obj::__construct(::String content){
            	HX_STACKFRAME(&_hx_pos_508166863f4ce950_15_new)
HXDLIN(  15)		super::__construct(content.substring((int)1,(content.length - (int)1)));
            	}

Dynamic StringToken_obj::__CreateEmpty() { return new StringToken_obj; }

void *StringToken_obj::_hx_vtable = 0;

Dynamic StringToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StringToken_obj > _hx_result = new StringToken_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StringToken_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3c4779d5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3c4779d5;
	} else {
		return inClassId==(int)0x7cd9a4bb;
	}
}

::String StringToken_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_508166863f4ce950_30_getName)
HXDLIN(  30)		return HX_("StringToken",48,cc,60,03);
            	}


int StringToken_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_508166863f4ce950_35_getLength)
HXDLIN(  35)		return ( (int)(( ::Dynamic(this->content->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) + (int)2)) );
            	}


::String StringToken_obj::reconstruct(::String embed){
            	HX_STACKFRAME(&_hx_pos_508166863f4ce950_40_reconstruct)
HXDLIN(  40)		return ((HX_("\"",22,00,00,00) + ::Std_obj::string(this->content)) + HX_("\"",22,00,00,00));
            	}


 ::EReg StringToken_obj::regex;

 ::EReg StringToken_obj::partialRegex;

bool StringToken_obj::match(::String s){
            	HX_STACKFRAME(&_hx_pos_508166863f4ce950_20_match)
HXDLIN(  20)		return ::src::ast::base::StringToken_obj::regex->match(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringToken_obj,match,return )

bool StringToken_obj::partialMatch(::String s){
            	HX_STACKFRAME(&_hx_pos_508166863f4ce950_25_partialMatch)
HXDLIN(  25)		return ::src::ast::base::StringToken_obj::partialRegex->match(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringToken_obj,partialMatch,return )


hx::ObjectPtr< StringToken_obj > StringToken_obj::__new(::String content) {
	hx::ObjectPtr< StringToken_obj > __this = new StringToken_obj();
	__this->__construct(content);
	return __this;
}

hx::ObjectPtr< StringToken_obj > StringToken_obj::__alloc(hx::Ctx *_hx_ctx,::String content) {
	StringToken_obj *__this = (StringToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StringToken_obj), true, "src.ast.base.StringToken"));
	*(void **)__this = StringToken_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

StringToken_obj::StringToken_obj()
{
}

hx::Val StringToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StringToken_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"regex") ) { outValue = ( regex ); return true; }
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialRegex") ) { outValue = ( partialRegex ); return true; }
		if (HX_FIELD_EQ(inName,"partialMatch") ) { outValue = partialMatch_dyn(); return true; }
	}
	return false;
}

bool StringToken_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"regex") ) { regex=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialRegex") ) { partialRegex=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *StringToken_obj_sMemberStorageInfo = 0;
static hx::StaticInfo StringToken_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::EReg*/ ,(void *) &StringToken_obj::regex,HX_HCSTRING("regex","\xc7","\x2e","\xbf","\xe6")},
	{hx::fsObject /*::EReg*/ ,(void *) &StringToken_obj::partialRegex,HX_HCSTRING("partialRegex","\x86","\xf3","\x5d","\xae")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String StringToken_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void StringToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringToken_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(StringToken_obj::regex,"regex");
	HX_MARK_MEMBER_NAME(StringToken_obj::partialRegex,"partialRegex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringToken_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(StringToken_obj::regex,"regex");
	HX_VISIT_MEMBER_NAME(StringToken_obj::partialRegex,"partialRegex");
};

#endif

hx::Class StringToken_obj::__mClass;

static ::String StringToken_obj_sStaticFields[] = {
	HX_HCSTRING("regex","\xc7","\x2e","\xbf","\xe6"),
	HX_HCSTRING("partialRegex","\x86","\xf3","\x5d","\xae"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	::String(null())
};

void StringToken_obj::__register()
{
	hx::Object *dummy = new StringToken_obj;
	StringToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.base.StringToken","\xe1","\x70","\x7f","\x3b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringToken_obj::__GetStatic;
	__mClass->mSetStaticField = &StringToken_obj::__SetStatic;
	__mClass->mMarkFunc = StringToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StringToken_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StringToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StringToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StringToken_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_508166863f4ce950_11_boot)
HXDLIN(  11)		regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\"[^\"]*\"$",4a,65,3d,3c),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_508166863f4ce950_12_boot)
HXDLIN(  12)		partialRegex =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\"[^\"]*\"?$",1f,53,7b,79),HX_("",00,00,00,00));
            	}
}

} // end namespace src
} // end namespace ast
} // end namespace base
