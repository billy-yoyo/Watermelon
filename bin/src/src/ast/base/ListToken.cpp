// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_GlobalProcessor
#include <src/ast/GlobalProcessor.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_TokenProcessor
#include <src/ast/TokenProcessor.h>
#endif
#ifndef INCLUDED_src_ast_base_BlockToken
#include <src/ast/base/BlockToken.h>
#endif
#ifndef INCLUDED_src_ast_base_ListToken
#include <src/ast/base/ListToken.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_491b5907284d8836_21_new,"src.ast.base.ListToken","new",0x673ee8e6,"src.ast.base.ListToken.new","src/ast/base/ListToken.hx",21,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_52_getName,"src.ast.base.ListToken","getName",0x998af587,"src.ast.base.ListToken.getName","src/ast/base/ListToken.hx",52,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_57_getLength,"src.ast.base.ListToken","getLength",0xcbe75f22,"src.ast.base.ListToken.getLength","src/ast/base/ListToken.hx",57,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_61_reconstruct,"src.ast.base.ListToken","reconstruct",0x663a748a,"src.ast.base.ListToken.reconstruct","src/ast/base/ListToken.hx",61,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_12_fromRaw,"src.ast.base.ListToken","fromRaw",0xd60a7a24,"src.ast.base.ListToken.fromRaw","src/ast/base/ListToken.hx",12,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_28_count,"src.ast.base.ListToken","count",0x94aa0ad5,"src.ast.base.ListToken.count","src/ast/base/ListToken.hx",28,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_40_match,"src.ast.base.ListToken","match",0x4d6a0f4b,"src.ast.base.ListToken.match","src/ast/base/ListToken.hx",40,0xdae6ec09)
HX_LOCAL_STACK_FRAME(_hx_pos_491b5907284d8836_44_partialMatch,"src.ast.base.ListToken","partialMatch",0x50aeb4be,"src.ast.base.ListToken.partialMatch","src/ast/base/ListToken.hx",44,0xdae6ec09)
namespace src{
namespace ast{
namespace base{

void ListToken_obj::__construct(::String content){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_21_new)
HXLINE(  22)		super::__construct(content);
HXLINE(  23)		this->originalLength = content.length;
HXLINE(  24)		 ::src::ast::TokenProcessor _hx_tmp = ::src::ast::GlobalProcessor_obj::baseProcessor;
HXDLIN(  24)		this->content = _hx_tmp->process(content.substring((int)1,(content.length - (int)1)));
            	}

Dynamic ListToken_obj::__CreateEmpty() { return new ListToken_obj; }

void *ListToken_obj::_hx_vtable = 0;

Dynamic ListToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ListToken_obj > _hx_result = new ListToken_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ListToken_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x555b61e8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x555b61e8;
	} else {
		return inClassId==(int)0x7cd9a4bb;
	}
}

::String ListToken_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_52_getName)
HXDLIN(  52)		return HX_("ListToken",9b,21,3f,cc);
            	}


int ListToken_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_57_getLength)
HXDLIN(  57)		return this->originalLength;
            	}


::String ListToken_obj::reconstruct(::String embed){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_61_reconstruct)
HXLINE(  62)		::String reconstructed = HX_("",00,00,00,00);
HXLINE(  63)		::Array< ::Dynamic> tokens = ( (::Array< ::Dynamic>)(this->content) );
HXDLIN(  63)		::String s;
HXLINE(  64)		{
HXLINE(  64)			int _g = (int)0;
HXDLIN(  64)			while((_g < tokens->length)){
HXLINE(  64)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  64)				_g = (_g + (int)1);
HXLINE(  65)				s = token->reconstruct(null());
HXLINE(  66)				if ((token->getName() == HX_("CommaToken",04,01,3f,49))) {
HXLINE(  66)					s = (s + HX_(" ",20,00,00,00));
            				}
HXLINE(  67)				reconstructed = (reconstructed + s);
            			}
            		}
HXLINE(  69)		return ((HX_("[",5b,00,00,00) + reconstructed) + HX_("]",5d,00,00,00));
            	}


 ::src::ast::base::ListToken ListToken_obj::fromRaw(::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_491b5907284d8836_12_fromRaw)
HXLINE(  13)		 ::src::ast::base::ListToken token =  ::src::ast::base::ListToken_obj::__alloc( HX_CTX ,HX_("",00,00,00,00));
HXLINE(  14)		token->content = ::src::ast::Token_obj::merge(tokens);
HXLINE(  15)		token->originalLength = (int)0;
HXLINE(  16)		return token;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ListToken_obj,fromRaw,return )

int ListToken_obj::count(::String s,::String c){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_28_count)
HXLINE(  29)		int count = (int)0;
HXLINE(  30)		int index = s.indexOf(c,null());
HXLINE(  31)		while((index >= (int)0)){
HXLINE(  32)			count = (count + (int)1);
HXLINE(  33)			index = s.indexOf(c,(index + (int)1));
            		}
HXLINE(  35)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ListToken_obj,count,return )

bool ListToken_obj::match(::String s){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_40_match)
HXDLIN(  40)		bool _hx_tmp;
HXDLIN(  40)		if ((s.charAt((int)0) == HX_("[",5b,00,00,00))) {
HXDLIN(  40)			_hx_tmp = (s.charAt((s.length - (int)1)) == HX_("]",5d,00,00,00));
            		}
            		else {
HXDLIN(  40)			_hx_tmp = false;
            		}
HXDLIN(  40)		if (_hx_tmp) {
HXDLIN(  40)			int _hx_tmp1 = ::src::ast::base::BlockToken_obj::count(s,HX_("[",5b,00,00,00));
HXDLIN(  40)			return (_hx_tmp1 == ::src::ast::base::BlockToken_obj::count(s,HX_("]",5d,00,00,00)));
            		}
            		else {
HXDLIN(  40)			return false;
            		}
HXDLIN(  40)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ListToken_obj,match,return )

bool ListToken_obj::partialMatch(::String s){
            	HX_STACKFRAME(&_hx_pos_491b5907284d8836_44_partialMatch)
HXLINE(  45)		int openCount = ::src::ast::base::BlockToken_obj::count(s,HX_("[",5b,00,00,00));
HXLINE(  46)		int closeCount = ::src::ast::base::BlockToken_obj::count(s,HX_("]",5d,00,00,00));
HXLINE(  47)		if ((s.charAt((int)0) == HX_("[",5b,00,00,00))) {
HXLINE(  47)			bool _hx_tmp;
HXDLIN(  47)			if ((openCount == closeCount)) {
HXLINE(  47)				_hx_tmp = (s.charAt((s.length - (int)1)) == HX_("]",5d,00,00,00));
            			}
            			else {
HXLINE(  47)				_hx_tmp = false;
            			}
HXDLIN(  47)			if (!(_hx_tmp)) {
HXLINE(  47)				if ((openCount > closeCount)) {
HXLINE(  47)					if ((s.length != (int)1)) {
HXLINE(  47)						return (s.charAt((s.length - (int)2)) != HX_("]",5d,00,00,00));
            					}
            					else {
HXLINE(  47)						return true;
            					}
            				}
            				else {
HXLINE(  47)					return false;
            				}
            			}
            			else {
HXLINE(  47)				return true;
            			}
            		}
            		else {
HXLINE(  47)			return false;
            		}
HXDLIN(  47)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ListToken_obj,partialMatch,return )


hx::ObjectPtr< ListToken_obj > ListToken_obj::__new(::String content) {
	hx::ObjectPtr< ListToken_obj > __this = new ListToken_obj();
	__this->__construct(content);
	return __this;
}

hx::ObjectPtr< ListToken_obj > ListToken_obj::__alloc(hx::Ctx *_hx_ctx,::String content) {
	ListToken_obj *__this = (ListToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ListToken_obj), true, "src.ast.base.ListToken"));
	*(void **)__this = ListToken_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

ListToken_obj::ListToken_obj()
{
}

hx::Val ListToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"originalLength") ) { return hx::Val( originalLength ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ListToken_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { outValue = count_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromRaw") ) { outValue = fromRaw_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { outValue = partialMatch_dyn(); return true; }
	}
	return false;
}

hx::Val ListToken_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"originalLength") ) { originalLength=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ListToken_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("originalLength","\x17","\xd0","\xed","\xd6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ListToken_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ListToken_obj,originalLength),HX_HCSTRING("originalLength","\x17","\xd0","\xed","\xd6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ListToken_obj_sStaticStorageInfo = 0;
#endif

static ::String ListToken_obj_sMemberFields[] = {
	HX_HCSTRING("originalLength","\x17","\xd0","\xed","\xd6"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void ListToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ListToken_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ListToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ListToken_obj::__mClass,"__mClass");
};

#endif

hx::Class ListToken_obj::__mClass;

static ::String ListToken_obj_sStaticFields[] = {
	HX_HCSTRING("fromRaw","\x9e","\xa6","\x01","\x58"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	::String(null())
};

void ListToken_obj::__register()
{
	hx::Object *dummy = new ListToken_obj;
	ListToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.base.ListToken","\xf4","\x3d","\xdb","\xcf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ListToken_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ListToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ListToken_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ListToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ListToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ListToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ListToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ListToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
} // end namespace base
