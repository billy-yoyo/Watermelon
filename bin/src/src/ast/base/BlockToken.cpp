// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_GlobalProcessor
#include <src/ast/GlobalProcessor.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_TokenProcessor
#include <src/ast/TokenProcessor.h>
#endif
#ifndef INCLUDED_src_ast_base_BlockToken
#include <src/ast/base/BlockToken.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a520fd318f5498d3_22_new,"src.ast.base.BlockToken","new",0x8c338285,"src.ast.base.BlockToken.new","src/ast/base/BlockToken.hx",22,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_53_getName,"src.ast.base.BlockToken","getName",0x23f64aa6,"src.ast.base.BlockToken.getName","src/ast/base/BlockToken.hx",53,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_58_getLength,"src.ast.base.BlockToken","getLength",0x47a97a01,"src.ast.base.BlockToken.getLength","src/ast/base/BlockToken.hx",58,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_62_isMap,"src.ast.base.BlockToken","isMap",0xca1d7a37,"src.ast.base.BlockToken.isMap","src/ast/base/BlockToken.hx",62,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_73_reconstruct,"src.ast.base.BlockToken","reconstruct",0xeae04529,"src.ast.base.BlockToken.reconstruct","src/ast/base/BlockToken.hx",73,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_13_fromRaw,"src.ast.base.BlockToken","fromRaw",0x6075cf43,"src.ast.base.BlockToken.fromRaw","src/ast/base/BlockToken.hx",13,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_29_count,"src.ast.base.BlockToken","count",0x532f8a34,"src.ast.base.BlockToken.count","src/ast/base/BlockToken.hx",29,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_41_match,"src.ast.base.BlockToken","match",0x0bef8eaa,"src.ast.base.BlockToken.match","src/ast/base/BlockToken.hx",41,0xe5d424ec)
HX_LOCAL_STACK_FRAME(_hx_pos_a520fd318f5498d3_45_partialMatch,"src.ast.base.BlockToken","partialMatch",0xdd1f6f3f,"src.ast.base.BlockToken.partialMatch","src/ast/base/BlockToken.hx",45,0xe5d424ec)
namespace src{
namespace ast{
namespace base{

void BlockToken_obj::__construct(::String content){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_22_new)
HXLINE(  23)		super::__construct(content);
HXLINE(  24)		this->originalLength = content.length;
HXLINE(  25)		 ::src::ast::TokenProcessor _hx_tmp = ::src::ast::GlobalProcessor_obj::baseProcessor;
HXDLIN(  25)		this->content = _hx_tmp->process(content.substring((int)1,(content.length - (int)1)));
            	}

Dynamic BlockToken_obj::__CreateEmpty() { return new BlockToken_obj; }

void *BlockToken_obj::_hx_vtable = 0;

Dynamic BlockToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BlockToken_obj > _hx_result = new BlockToken_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BlockToken_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x26e2403b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x26e2403b;
	} else {
		return inClassId==(int)0x7cd9a4bb;
	}
}

::String BlockToken_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_53_getName)
HXDLIN(  53)		return HX_("BlockToken",8c,2a,40,e2);
            	}


int BlockToken_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_58_getLength)
HXDLIN(  58)		return this->originalLength;
            	}


bool BlockToken_obj::isMap(){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_62_isMap)
HXLINE(  63)		::Array< ::Dynamic> tokens = ( (::Array< ::Dynamic>)(this->content) );
HXLINE(  64)		bool hasComma = false;
HXLINE(  65)		{
HXLINE(  65)			int _g = (int)0;
HXDLIN(  65)			while((_g < tokens->length)){
HXLINE(  65)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  65)				_g = (_g + (int)1);
HXLINE(  66)				if ((token->getName() == HX_("CommaToken",04,01,3f,49))) {
HXLINE(  66)					hasComma = true;
            				}
HXLINE(  67)				if ((token->getName() == HX_("hasEndline",15,8d,b2,c9))) {
HXLINE(  67)					return false;
            				}
            			}
            		}
HXLINE(  69)		return hasComma;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockToken_obj,isMap,return )

::String BlockToken_obj::reconstruct(::String embed){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_73_reconstruct)
HXLINE(  74)		if (hx::IsNull( embed )) {
HXLINE(  74)			embed = HX_("",00,00,00,00);
            		}
HXLINE(  75)		::String lastEmbed = embed;
HXLINE(  76)		embed = (embed + HX_("    ",00,38,3f,15));
HXLINE(  78)		::String reconstructed = HX_("",00,00,00,00);
HXLINE(  79)		::Array< ::Dynamic> tokens = ( (::Array< ::Dynamic>)(this->content) );
HXLINE(  80)		bool map = false;
HXDLIN(  80)		::String s;
HXLINE(  81)		bool first = true;
HXDLIN(  81)		 ::src::ast::Token token;
HXLINE(  82)		{
HXLINE(  82)			int _g1 = (int)0;
HXDLIN(  82)			int _g = tokens->length;
HXDLIN(  82)			while((_g1 < _g)){
HXLINE(  82)				_g1 = (_g1 + (int)1);
HXDLIN(  82)				int i = (_g1 - (int)1);
HXLINE(  83)				token = tokens->__get(i).StaticCast<  ::src::ast::Token >();
HXLINE(  84)				s = token->reconstruct(embed);
HXLINE(  85)				if ((token->getName() == HX_("CommaToken",04,01,3f,49))) {
HXLINE(  86)					map = true;
HXLINE(  87)					if ((i < (tokens->length - (int)1))) {
HXLINE(  87)						s = (s + (HX_("\n",0a,00,00,00) + embed));
            					}
HXLINE(  88)					first = true;
            				}
            				else {
HXLINE(  89)					if ((token->getName() == HX_("EndLineToken",2a,db,3a,32))) {
HXLINE(  90)						if ((i < (tokens->length - (int)1))) {
HXLINE(  90)							s = (s + (HX_("\n",0a,00,00,00) + embed));
            						}
HXLINE(  91)						first = true;
            					}
            					else {
HXLINE(  92)						bool _hx_tmp;
HXDLIN(  92)						bool _hx_tmp1;
HXDLIN(  92)						bool _hx_tmp2;
HXDLIN(  92)						bool _hx_tmp3;
HXDLIN(  92)						bool _hx_tmp4;
HXDLIN(  92)						bool _hx_tmp5;
HXDLIN(  92)						bool _hx_tmp6;
HXDLIN(  92)						bool _hx_tmp7;
HXDLIN(  92)						if ((token->getName() != HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  92)							_hx_tmp7 = (token->getName() == HX_("FloatToken",dd,5b,75,29));
            						}
            						else {
HXLINE(  92)							_hx_tmp7 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp7)) {
HXLINE(  92)							_hx_tmp6 = (token->getName() == HX_("IntegerToken",7b,f0,70,21));
            						}
            						else {
HXLINE(  92)							_hx_tmp6 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp6)) {
HXLINE(  92)							_hx_tmp5 = (token->getName() == HX_("VariableToken",fd,96,04,01));
            						}
            						else {
HXLINE(  92)							_hx_tmp5 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp5)) {
HXLINE(  92)							_hx_tmp4 = (token->getName() == HX_("VariableAccessToken",b9,59,13,8f));
            						}
            						else {
HXLINE(  92)							_hx_tmp4 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp4)) {
HXLINE(  92)							_hx_tmp3 = (token->getName() == HX_("AssignmentToken",4c,94,e1,56));
            						}
            						else {
HXLINE(  92)							_hx_tmp3 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp3)) {
HXLINE(  92)							_hx_tmp2 = (token->getName() == HX_("MathsOperatorToken",2a,dc,94,41));
            						}
            						else {
HXLINE(  92)							_hx_tmp2 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp2)) {
HXLINE(  92)							_hx_tmp1 = (token->getName() == HX_("BooleanOperatorToken",0d,6d,dc,5d));
            						}
            						else {
HXLINE(  92)							_hx_tmp1 = true;
            						}
HXDLIN(  92)						if (!(_hx_tmp1)) {
HXLINE(  92)							_hx_tmp = (token->getName() == HX_("EqualityOperatorToken",3b,c5,40,33));
            						}
            						else {
HXLINE(  92)							_hx_tmp = true;
            						}
HXDLIN(  92)						if (_hx_tmp) {
HXLINE(  98)							if (!(first)) {
HXLINE(  98)								s = (HX_(" ",20,00,00,00) + s);
            							}
HXLINE(  99)							first = false;
            						}
            						else {
HXLINE( 100)							first = false;
            						}
            					}
            				}
HXLINE( 101)				reconstructed = (reconstructed + s);
            			}
            		}
HXLINE( 103)		if (map) {
HXLINE( 103)			return ((HX_("{",7b,00,00,00) + reconstructed) + HX_("}}",60,6d,00,00));
            		}
            		else {
HXLINE( 104)			return (((((HX_(" {\n",4f,b3,18,00) + embed) + reconstructed) + HX_("\n",0a,00,00,00)) + lastEmbed) + HX_("}",7d,00,00,00));
            		}
HXLINE( 103)		return null();
            	}


 ::src::ast::base::BlockToken BlockToken_obj::fromRaw(::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_a520fd318f5498d3_13_fromRaw)
HXLINE(  14)		 ::src::ast::base::BlockToken token =  ::src::ast::base::BlockToken_obj::__alloc( HX_CTX ,HX_("",00,00,00,00));
HXLINE(  15)		token->content = ::src::ast::Token_obj::merge(tokens);
HXLINE(  16)		token->originalLength = (int)0;
HXLINE(  17)		return token;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BlockToken_obj,fromRaw,return )

int BlockToken_obj::count(::String s,::String c){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_29_count)
HXLINE(  30)		int count = (int)0;
HXLINE(  31)		int index = s.indexOf(c,null());
HXLINE(  32)		while((index >= (int)0)){
HXLINE(  33)			count = (count + (int)1);
HXLINE(  34)			index = s.indexOf(c,(index + (int)1));
            		}
HXLINE(  36)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BlockToken_obj,count,return )

bool BlockToken_obj::match(::String s){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_41_match)
HXDLIN(  41)		bool _hx_tmp;
HXDLIN(  41)		if ((s.charAt((int)0) == HX_("{",7b,00,00,00))) {
HXDLIN(  41)			_hx_tmp = (s.charAt((s.length - (int)1)) == HX_("}",7d,00,00,00));
            		}
            		else {
HXDLIN(  41)			_hx_tmp = false;
            		}
HXDLIN(  41)		if (_hx_tmp) {
HXDLIN(  41)			int _hx_tmp1 = ::src::ast::base::BlockToken_obj::count(s,HX_("{",7b,00,00,00));
HXDLIN(  41)			return (_hx_tmp1 == ::src::ast::base::BlockToken_obj::count(s,HX_("}",7d,00,00,00)));
            		}
            		else {
HXDLIN(  41)			return false;
            		}
HXDLIN(  41)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BlockToken_obj,match,return )

bool BlockToken_obj::partialMatch(::String s){
            	HX_STACKFRAME(&_hx_pos_a520fd318f5498d3_45_partialMatch)
HXLINE(  46)		int openCount = ::src::ast::base::BlockToken_obj::count(s,HX_("{",7b,00,00,00));
HXLINE(  47)		int closeCount = ::src::ast::base::BlockToken_obj::count(s,HX_("}",7d,00,00,00));
HXLINE(  48)		if ((s.charAt((int)0) == HX_("{",7b,00,00,00))) {
HXLINE(  48)			bool _hx_tmp;
HXDLIN(  48)			if ((openCount == closeCount)) {
HXLINE(  48)				_hx_tmp = (s.charAt((s.length - (int)1)) == HX_("}",7d,00,00,00));
            			}
            			else {
HXLINE(  48)				_hx_tmp = false;
            			}
HXDLIN(  48)			if (!(_hx_tmp)) {
HXLINE(  48)				return (openCount > closeCount);
            			}
            			else {
HXLINE(  48)				return true;
            			}
            		}
            		else {
HXLINE(  48)			return false;
            		}
HXDLIN(  48)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BlockToken_obj,partialMatch,return )


hx::ObjectPtr< BlockToken_obj > BlockToken_obj::__new(::String content) {
	hx::ObjectPtr< BlockToken_obj > __this = new BlockToken_obj();
	__this->__construct(content);
	return __this;
}

hx::ObjectPtr< BlockToken_obj > BlockToken_obj::__alloc(hx::Ctx *_hx_ctx,::String content) {
	BlockToken_obj *__this = (BlockToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BlockToken_obj), true, "src.ast.base.BlockToken"));
	*(void **)__this = BlockToken_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

BlockToken_obj::BlockToken_obj()
{
}

hx::Val BlockToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isMap") ) { return hx::Val( isMap_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"originalLength") ) { return hx::Val( originalLength ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BlockToken_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { outValue = count_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromRaw") ) { outValue = fromRaw_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { outValue = partialMatch_dyn(); return true; }
	}
	return false;
}

hx::Val BlockToken_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"originalLength") ) { originalLength=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BlockToken_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("originalLength","\x17","\xd0","\xed","\xd6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BlockToken_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BlockToken_obj,originalLength),HX_HCSTRING("originalLength","\x17","\xd0","\xed","\xd6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BlockToken_obj_sStaticStorageInfo = 0;
#endif

static ::String BlockToken_obj_sMemberFields[] = {
	HX_HCSTRING("originalLength","\x17","\xd0","\xed","\xd6"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("isMap","\xd2","\x34","\x51","\xc1"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void BlockToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlockToken_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlockToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlockToken_obj::__mClass,"__mClass");
};

#endif

hx::Class BlockToken_obj::__mClass;

static ::String BlockToken_obj_sStaticFields[] = {
	HX_HCSTRING("fromRaw","\x9e","\xa6","\x01","\x58"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	::String(null())
};

void BlockToken_obj::__register()
{
	hx::Object *dummy = new BlockToken_obj;
	BlockToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.base.BlockToken","\x13","\xdc","\x3c","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BlockToken_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BlockToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BlockToken_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BlockToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BlockToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlockToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlockToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlockToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
} // end namespace base
