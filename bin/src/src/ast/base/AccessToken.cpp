// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_AccessToken
#include <src/ast/base/AccessToken.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0876ba1cde46cc48_8_new,"src.ast.base.AccessToken","new",0xf7387720,"src.ast.base.AccessToken.new","src/ast/base/AccessToken.hx",8,0x775bf0cf)
HX_LOCAL_STACK_FRAME(_hx_pos_0876ba1cde46cc48_23_getName,"src.ast.base.AccessToken","getName",0x65a128c1,"src.ast.base.AccessToken.getName","src/ast/base/AccessToken.hx",23,0x775bf0cf)
HX_LOCAL_STACK_FRAME(_hx_pos_0876ba1cde46cc48_13_match,"src.ast.base.AccessToken","match",0xf98f2005,"src.ast.base.AccessToken.match","src/ast/base/AccessToken.hx",13,0x775bf0cf)
HX_LOCAL_STACK_FRAME(_hx_pos_0876ba1cde46cc48_18_partialMatch,"src.ast.base.AccessToken","partialMatch",0x58f28f44,"src.ast.base.AccessToken.partialMatch","src/ast/base/AccessToken.hx",18,0x775bf0cf)
namespace src{
namespace ast{
namespace base{

void AccessToken_obj::__construct(::String content){
            	HX_STACKFRAME(&_hx_pos_0876ba1cde46cc48_8_new)
HXDLIN(   8)		super::__construct(content);
            	}

Dynamic AccessToken_obj::__CreateEmpty() { return new AccessToken_obj; }

void *AccessToken_obj::_hx_vtable = 0;

Dynamic AccessToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AccessToken_obj > _hx_result = new AccessToken_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AccessToken_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5340e606) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5340e606;
	} else {
		return inClassId==(int)0x7cd9a4bb;
	}
}

::String AccessToken_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_0876ba1cde46cc48_23_getName)
HXDLIN(  23)		return HX_("AccessToken",95,02,10,8a);
            	}


bool AccessToken_obj::match(::String s){
            	HX_STACKFRAME(&_hx_pos_0876ba1cde46cc48_13_match)
HXDLIN(  13)		return (s == HX_(".",2e,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AccessToken_obj,match,return )

bool AccessToken_obj::partialMatch(::String s){
            	HX_STACKFRAME(&_hx_pos_0876ba1cde46cc48_18_partialMatch)
HXDLIN(  18)		return ::src::ast::base::AccessToken_obj::match(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AccessToken_obj,partialMatch,return )


hx::ObjectPtr< AccessToken_obj > AccessToken_obj::__new(::String content) {
	hx::ObjectPtr< AccessToken_obj > __this = new AccessToken_obj();
	__this->__construct(content);
	return __this;
}

hx::ObjectPtr< AccessToken_obj > AccessToken_obj::__alloc(hx::Ctx *_hx_ctx,::String content) {
	AccessToken_obj *__this = (AccessToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AccessToken_obj), true, "src.ast.base.AccessToken"));
	*(void **)__this = AccessToken_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

AccessToken_obj::AccessToken_obj()
{
}

hx::Val AccessToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AccessToken_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { outValue = partialMatch_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AccessToken_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *AccessToken_obj_sStaticStorageInfo = 0;
#endif

static ::String AccessToken_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	::String(null()) };

static void AccessToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AccessToken_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AccessToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AccessToken_obj::__mClass,"__mClass");
};

#endif

hx::Class AccessToken_obj::__mClass;

static ::String AccessToken_obj_sStaticFields[] = {
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	::String(null())
};

void AccessToken_obj::__register()
{
	hx::Object *dummy = new AccessToken_obj;
	AccessToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.base.AccessToken","\x2e","\xa7","\x2e","\xc2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AccessToken_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AccessToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AccessToken_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AccessToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AccessToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AccessToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AccessToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AccessToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
} // end namespace base
