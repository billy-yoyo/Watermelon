// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_GlobalProcessor
#include <src/ast/GlobalProcessor.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_TokenProcessor
#include <src/ast/TokenProcessor.h>
#endif
#ifndef INCLUDED_src_ast_base_AccessToken
#include <src/ast/base/AccessToken.h>
#endif
#ifndef INCLUDED_src_ast_base_BlockToken
#include <src/ast/base/BlockToken.h>
#endif
#ifndef INCLUDED_src_ast_base_BracketToken
#include <src/ast/base/BracketToken.h>
#endif
#ifndef INCLUDED_src_ast_base_CommaToken
#include <src/ast/base/CommaToken.h>
#endif
#ifndef INCLUDED_src_ast_base_EndLineToken
#include <src/ast/base/EndLineToken.h>
#endif
#ifndef INCLUDED_src_ast_base_KwdToken
#include <src/ast/base/KwdToken.h>
#endif
#ifndef INCLUDED_src_ast_base_ListToken
#include <src/ast/base/ListToken.h>
#endif
#ifndef INCLUDED_src_ast_base_RootToken
#include <src/ast/base/RootToken.h>
#endif
#ifndef INCLUDED_src_ast_base_StringToken
#include <src/ast/base/StringToken.h>
#endif
#ifndef INCLUDED_src_ast_base_VariableToken
#include <src/ast/base/VariableToken.h>
#endif
#ifndef INCLUDED_src_ast_base_WhitespaceToken
#include <src/ast/base/WhitespaceToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_BinaryOperatorToken
#include <src/ast/maths/BinaryOperatorToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_FloatToken
#include <src/ast/maths/FloatToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_HexToken
#include <src/ast/maths/HexToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_IntegerToken
#include <src/ast/maths/IntegerToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_MathsOperatorToken
#include <src/ast/maths/MathsOperatorToken.h>
#endif
#ifndef INCLUDED_src_ast_script_AssignmentToken
#include <src/ast/script/AssignmentToken.h>
#endif
#ifndef INCLUDED_src_ast_script_BooleanOperatorToken
#include <src/ast/script/BooleanOperatorToken.h>
#endif
#ifndef INCLUDED_src_ast_script_EqualityOperatorToken
#include <src/ast/script/EqualityOperatorToken.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_955ae47b50d94871_55_process,"src.ast.GlobalProcessor","process",0xd793a09a,"src.ast.GlobalProcessor.process","src/ast/GlobalProcessor.hx",55,0x594de9c7)
HX_LOCAL_STACK_FRAME(_hx_pos_955ae47b50d94871_15_boot,"src.ast.GlobalProcessor","boot",0x7940cd27,"src.ast.GlobalProcessor.boot","src/ast/GlobalProcessor.hx",15,0x594de9c7)
namespace src{
namespace ast{

void GlobalProcessor_obj::__construct() { }

Dynamic GlobalProcessor_obj::__CreateEmpty() { return new GlobalProcessor_obj; }

void *GlobalProcessor_obj::_hx_vtable = 0;

Dynamic GlobalProcessor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GlobalProcessor_obj > _hx_result = new GlobalProcessor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GlobalProcessor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6ae8e5e9;
}

 ::src::ast::TokenProcessor GlobalProcessor_obj::baseProcessor;

 ::src::ast::base::RootToken GlobalProcessor_obj::process(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_955ae47b50d94871_55_process)
HXDLIN(  55)		return  ::src::ast::base::RootToken_obj::__alloc( HX_CTX ,s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GlobalProcessor_obj,process,return )


GlobalProcessor_obj::GlobalProcessor_obj()
{
}

bool GlobalProcessor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"process") ) { outValue = process_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"baseProcessor") ) { outValue = ( baseProcessor ); return true; }
	}
	return false;
}

bool GlobalProcessor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"baseProcessor") ) { baseProcessor=ioValue.Cast<  ::src::ast::TokenProcessor >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GlobalProcessor_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GlobalProcessor_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::src::ast::TokenProcessor*/ ,(void *) &GlobalProcessor_obj::baseProcessor,HX_HCSTRING("baseProcessor","\x01","\xab","\x62","\xd3")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GlobalProcessor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GlobalProcessor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GlobalProcessor_obj::baseProcessor,"baseProcessor");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GlobalProcessor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GlobalProcessor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GlobalProcessor_obj::baseProcessor,"baseProcessor");
};

#endif

hx::Class GlobalProcessor_obj::__mClass;

static ::String GlobalProcessor_obj_sStaticFields[] = {
	HX_HCSTRING("baseProcessor","\x01","\xab","\x62","\xd3"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	::String(null())
};

void GlobalProcessor_obj::__register()
{
	hx::Object *dummy = new GlobalProcessor_obj;
	GlobalProcessor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.GlobalProcessor","\x99","\xbb","\x3d","\x30");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GlobalProcessor_obj::__GetStatic;
	__mClass->mSetStaticField = &GlobalProcessor_obj::__SetStatic;
	__mClass->mMarkFunc = GlobalProcessor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GlobalProcessor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GlobalProcessor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GlobalProcessor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GlobalProcessor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GlobalProcessor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GlobalProcessor_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_955ae47b50d94871_15_boot)
HXDLIN(  15)		baseProcessor =  ::src::ast::TokenProcessor_obj::__alloc( HX_CTX )->addClass(hx::ClassOf< ::src::ast::base::BlockToken >(),::src::ast::base::BlockToken_obj::match_dyn(),::src::ast::base::BlockToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::BracketToken >(),::src::ast::base::BracketToken_obj::match_dyn(),::src::ast::base::BracketToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::StringToken >(),::src::ast::base::StringToken_obj::match_dyn(),::src::ast::base::StringToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::VariableToken >(),::src::ast::base::VariableToken_obj::match_dyn(),::src::ast::base::VariableToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::WhitespaceToken >(),::src::ast::base::WhitespaceToken_obj::match_dyn(),::src::ast::base::WhitespaceToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::EndLineToken >(),::src::ast::base::EndLineToken_obj::match_dyn(),::src::ast::base::EndLineToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::script::AssignmentToken >(),::src::ast::script::AssignmentToken_obj::match_dyn(),::src::ast::script::AssignmentToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::script::BooleanOperatorToken >(),::src::ast::script::BooleanOperatorToken_obj::match_dyn(),::src::ast::script::BooleanOperatorToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::script::EqualityOperatorToken >(),::src::ast::script::EqualityOperatorToken_obj::match_dyn(),::src::ast::script::EqualityOperatorToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::maths::IntegerToken >(),::src::ast::maths::IntegerToken_obj::match_dyn(),::src::ast::maths::IntegerToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::maths::FloatToken >(),::src::ast::maths::FloatToken_obj::match_dyn(),::src::ast::maths::FloatToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::maths::MathsOperatorToken >(),::src::ast::maths::MathsOperatorToken_obj::match_dyn(),::src::ast::maths::MathsOperatorToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::KwdToken >(),::src::ast::base::KwdToken_obj::match_dyn(),::src::ast::base::KwdToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::CommaToken >(),::src::ast::base::CommaToken_obj::match_dyn(),::src::ast::base::CommaToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::ListToken >(),::src::ast::base::ListToken_obj::match_dyn(),::src::ast::base::ListToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::base::AccessToken >(),::src::ast::base::AccessToken_obj::match_dyn(),::src::ast::base::AccessToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::maths::HexToken >(),::src::ast::maths::HexToken_obj::match_dyn(),::src::ast::maths::HexToken_obj::partialMatch_dyn())->addClass(hx::ClassOf< ::src::ast::maths::BinaryOperatorToken >(),::src::ast::maths::BinaryOperatorToken_obj::match_dyn(),::src::ast::maths::BinaryOperatorToken_obj::partialMatch_dyn());
            	}
}

} // end namespace src
} // end namespace ast
