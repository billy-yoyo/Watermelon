// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_TokenPriority
#include <src/ast/TokenPriority.h>
#endif
#ifndef INCLUDED_src_ast_TokenProcessor
#include <src/ast/TokenProcessor.h>
#endif
#ifndef INCLUDED_src_ast__TokenProcessor_TokenClass
#include <src/ast/_TokenProcessor/TokenClass.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1136675ffcbd9a0f_14_new,"src.ast.TokenProcessor","new",0x1feb76a1,"src.ast.TokenProcessor.new","src/ast/TokenProcessor.hx",14,0x0e84312d)
HX_LOCAL_STACK_FRAME(_hx_pos_1136675ffcbd9a0f_18_addClass,"src.ast.TokenProcessor","addClass",0xf9d6ac76,"src.ast.TokenProcessor.addClass","src/ast/TokenProcessor.hx",18,0x0e84312d)
HX_LOCAL_STACK_FRAME(_hx_pos_1136675ffcbd9a0f_24_getMatches,"src.ast.TokenProcessor","getMatches",0x25f5d6dc,"src.ast.TokenProcessor.getMatches","src/ast/TokenProcessor.hx",24,0x0e84312d)
HX_LOCAL_STACK_FRAME(_hx_pos_1136675ffcbd9a0f_37_higherPriority,"src.ast.TokenProcessor","higherPriority",0x9f093a32,"src.ast.TokenProcessor.higherPriority","src/ast/TokenProcessor.hx",37,0x0e84312d)
HX_LOCAL_STACK_FRAME(_hx_pos_1136675ffcbd9a0f_47_processToken,"src.ast.TokenProcessor","processToken",0xce0c27a9,"src.ast.TokenProcessor.processToken","src/ast/TokenProcessor.hx",47,0x0e84312d)
HX_LOCAL_STACK_FRAME(_hx_pos_1136675ffcbd9a0f_74_process,"src.ast.TokenProcessor","process",0x19b8fd30,"src.ast.TokenProcessor.process","src/ast/TokenProcessor.hx",74,0x0e84312d)
namespace src{
namespace ast{

void TokenProcessor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1136675ffcbd9a0f_14_new)
HXDLIN(  14)		this->classes = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic TokenProcessor_obj::__CreateEmpty() { return new TokenProcessor_obj; }

void *TokenProcessor_obj::_hx_vtable = 0;

Dynamic TokenProcessor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TokenProcessor_obj > _hx_result = new TokenProcessor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TokenProcessor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40160917;
}

 ::src::ast::TokenProcessor TokenProcessor_obj::addClass(hx::Class cls, ::Dynamic match, ::Dynamic partialMatch){
            	HX_GC_STACKFRAME(&_hx_pos_1136675ffcbd9a0f_18_addClass)
HXLINE(  19)		::Array< ::Dynamic> _hx_tmp = this->classes;
HXDLIN(  19)		_hx_tmp->push( ::src::ast::_TokenProcessor::TokenClass_obj::__alloc( HX_CTX ,cls,match,partialMatch));
HXLINE(  20)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TokenProcessor_obj,addClass,return )

::Array< ::Dynamic> TokenProcessor_obj::getMatches(::String s){
            	HX_STACKFRAME(&_hx_pos_1136675ffcbd9a0f_24_getMatches)
HXLINE(  25)		::Array< ::Dynamic> matches = ::Array_obj< ::Dynamic>::__new();
HXLINE(  26)		{
HXLINE(  26)			int _g = (int)0;
HXDLIN(  26)			::Array< ::Dynamic> _g1 = this->classes;
HXDLIN(  26)			while((_g < _g1->length)){
HXLINE(  26)				 ::src::ast::_TokenProcessor::TokenClass cls = _g1->__get(_g).StaticCast<  ::src::ast::_TokenProcessor::TokenClass >();
HXDLIN(  26)				_g = (_g + (int)1);
HXLINE(  27)				if (( (bool)(cls->partialMatch(s)) )) {
HXLINE(  29)					matches->push(cls);
            				}
            			}
            		}
HXLINE(  32)		return matches;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TokenProcessor_obj,getMatches,return )

bool TokenProcessor_obj::higherPriority( ::src::ast::TokenPriority priority1, ::src::ast::TokenPriority priority2){
            	HX_STACKFRAME(&_hx_pos_1136675ffcbd9a0f_37_higherPriority)
HXDLIN(  37)		bool _hx_tmp;
HXDLIN(  37)		bool _hx_tmp1;
HXDLIN(  37)		bool _hx_tmp2;
HXDLIN(  37)		if (hx::IsEq( priority1,::src::ast::TokenPriority_obj::MAXIMUM_dyn() )) {
HXDLIN(  37)			bool _hx_tmp3;
HXDLIN(  37)			bool _hx_tmp4;
HXDLIN(  37)			if (hx::IsNotEq( priority2,::src::ast::TokenPriority_obj::HIGH_dyn() )) {
HXDLIN(  37)				_hx_tmp4 = hx::IsEq( priority2,::src::ast::TokenPriority_obj::MEDIUM_dyn() );
            			}
            			else {
HXDLIN(  37)				_hx_tmp4 = true;
            			}
HXDLIN(  37)			if (!(_hx_tmp4)) {
HXDLIN(  37)				_hx_tmp3 = hx::IsEq( priority2,::src::ast::TokenPriority_obj::LOW_dyn() );
            			}
            			else {
HXDLIN(  37)				_hx_tmp3 = true;
            			}
HXDLIN(  37)			if (!(_hx_tmp3)) {
HXDLIN(  37)				_hx_tmp2 = hx::IsEq( priority2,::src::ast::TokenPriority_obj::MINIMUM_dyn() );
            			}
            			else {
HXDLIN(  37)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXDLIN(  37)			_hx_tmp2 = false;
            		}
HXDLIN(  37)		if (!(_hx_tmp2)) {
HXLINE(  39)			if (hx::IsEq( priority1,::src::ast::TokenPriority_obj::HIGH_dyn() )) {
HXLINE(  39)				bool _hx_tmp5;
HXDLIN(  39)				if (hx::IsNotEq( priority2,::src::ast::TokenPriority_obj::MEDIUM_dyn() )) {
HXLINE(  39)					_hx_tmp5 = hx::IsEq( priority2,::src::ast::TokenPriority_obj::LOW_dyn() );
            				}
            				else {
HXLINE(  39)					_hx_tmp5 = true;
            				}
HXDLIN(  39)				if (!(_hx_tmp5)) {
HXDLIN(  37)					_hx_tmp1 = hx::IsEq( priority2,::src::ast::TokenPriority_obj::MINIMUM_dyn() );
            				}
            				else {
HXDLIN(  37)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXDLIN(  37)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXDLIN(  37)			_hx_tmp1 = true;
            		}
HXDLIN(  37)		if (!(_hx_tmp1)) {
HXLINE(  41)			if (hx::IsEq( priority1,::src::ast::TokenPriority_obj::MEDIUM_dyn() )) {
HXLINE(  41)				if (hx::IsNotEq( priority2,::src::ast::TokenPriority_obj::LOW_dyn() )) {
HXDLIN(  37)					_hx_tmp = hx::IsEq( priority2,::src::ast::TokenPriority_obj::MINIMUM_dyn() );
            				}
            				else {
HXDLIN(  37)					_hx_tmp = true;
            				}
            			}
            			else {
HXDLIN(  37)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN(  37)			_hx_tmp = true;
            		}
HXDLIN(  37)		if (!(_hx_tmp)) {
HXLINE(  42)			if (hx::IsEq( priority1,::src::ast::TokenPriority_obj::LOW_dyn() )) {
HXLINE(  42)				return hx::IsEq( priority2,::src::ast::TokenPriority_obj::MINIMUM_dyn() );
            			}
            			else {
HXLINE(  42)				return false;
            			}
            		}
            		else {
HXDLIN(  37)			return true;
            		}
HXDLIN(  37)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TokenProcessor_obj,higherPriority,return )

 ::src::ast::Token TokenProcessor_obj::processToken(::String s){
            	HX_STACKFRAME(&_hx_pos_1136675ffcbd9a0f_47_processToken)
HXLINE(  48)		::Array< ::Dynamic> matches = this->getMatches(s.substring((int)0,(int)1));
HXLINE(  49)		::Array< ::Dynamic> lastMatches = matches;
HXLINE(  50)		int length = (int)1;
HXLINE(  51)		while(true){
HXLINE(  51)			bool _hx_tmp;
HXDLIN(  51)			if ((matches->length > (int)0)) {
HXLINE(  51)				_hx_tmp = (length <= s.length);
            			}
            			else {
HXLINE(  51)				_hx_tmp = false;
            			}
HXDLIN(  51)			if (!(_hx_tmp)) {
HXLINE(  51)				goto _hx_goto_5;
            			}
HXLINE(  52)			length = (length + (int)1);
HXLINE(  53)			lastMatches = matches;
HXLINE(  54)			matches = this->getMatches(s.substr((int)0,length));
            		}
            		_hx_goto_5:;
HXLINE(  56)		length = (length - (int)1);
HXLINE(  57)		bool _hx_tmp1;
HXDLIN(  57)		if (hx::IsNotNull( lastMatches )) {
HXLINE(  57)			_hx_tmp1 = (lastMatches->length > (int)0);
            		}
            		else {
HXLINE(  57)			_hx_tmp1 = false;
            		}
HXDLIN(  57)		if (_hx_tmp1) {
HXLINE(  58)			::String substr = s.substr((int)0,length);
HXLINE(  59)			::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE(  61)			{
HXLINE(  61)				int _g = (int)0;
HXDLIN(  61)				while((_g < lastMatches->length)){
HXLINE(  61)					 ::src::ast::_TokenProcessor::TokenClass match = lastMatches->__get(_g).StaticCast<  ::src::ast::_TokenProcessor::TokenClass >();
HXDLIN(  61)					_g = (_g + (int)1);
HXLINE(  62)					if (( (bool)(match->match(substr)) )) {
HXLINE(  62)						tokens->push(::Type_obj::createInstance(match->cls,::cpp::VirtualArray_obj::__new(1)->init(0,substr)));
            					}
            				}
            			}
HXLINE(  64)			 ::src::ast::Token token = tokens->__get((int)0).StaticCast<  ::src::ast::Token >();
HXLINE(  65)			{
HXLINE(  65)				int _g1 = (int)1;
HXDLIN(  65)				int _g2 = tokens->length;
HXDLIN(  65)				while((_g1 < _g2)){
HXLINE(  65)					_g1 = (_g1 + (int)1);
HXDLIN(  65)					int i = (_g1 - (int)1);
HXLINE(  66)					 ::src::ast::TokenPriority _hx_tmp2 = tokens->__get(i).StaticCast<  ::src::ast::Token >()->getPriority();
HXDLIN(  66)					if (this->higherPriority(_hx_tmp2,token->getPriority())) {
HXLINE(  66)						token = tokens->__get(i).StaticCast<  ::src::ast::Token >();
            					}
            				}
            			}
HXLINE(  68)			return token;
            		}
HXLINE(  70)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TokenProcessor_obj,processToken,return )

::Array< ::Dynamic> TokenProcessor_obj::process(::String s){
            	HX_STACKFRAME(&_hx_pos_1136675ffcbd9a0f_74_process)
HXLINE(  76)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE(  77)		 ::src::ast::Token token = this->processToken(s);
HXLINE(  78)		while(hx::IsNotNull( token )){
HXLINE(  79)			if (!(token->isDisposable())) {
HXLINE(  79)				tokens->push(token);
            			}
HXLINE(  80)			s = s.substr(token->getLength(),null());
HXLINE(  82)			token = this->processToken(s);
            		}
HXLINE(  85)		return tokens;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TokenProcessor_obj,process,return )


hx::ObjectPtr< TokenProcessor_obj > TokenProcessor_obj::__new() {
	hx::ObjectPtr< TokenProcessor_obj > __this = new TokenProcessor_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TokenProcessor_obj > TokenProcessor_obj::__alloc(hx::Ctx *_hx_ctx) {
	TokenProcessor_obj *__this = (TokenProcessor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TokenProcessor_obj), true, "src.ast.TokenProcessor"));
	*(void **)__this = TokenProcessor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TokenProcessor_obj::TokenProcessor_obj()
{
}

void TokenProcessor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TokenProcessor);
	HX_MARK_MEMBER_NAME(classes,"classes");
	HX_MARK_END_CLASS();
}

void TokenProcessor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(classes,"classes");
}

hx::Val TokenProcessor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"classes") ) { return hx::Val( classes ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addClass") ) { return hx::Val( addClass_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getMatches") ) { return hx::Val( getMatches_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"processToken") ) { return hx::Val( processToken_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"higherPriority") ) { return hx::Val( higherPriority_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TokenProcessor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"classes") ) { classes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TokenProcessor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("classes","\xa6","\x4e","\x91","\x69"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TokenProcessor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TokenProcessor_obj,classes),HX_HCSTRING("classes","\xa6","\x4e","\x91","\x69")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TokenProcessor_obj_sStaticStorageInfo = 0;
#endif

static ::String TokenProcessor_obj_sMemberFields[] = {
	HX_HCSTRING("classes","\xa6","\x4e","\x91","\x69"),
	HX_HCSTRING("addClass","\x57","\x9e","\xb5","\xc1"),
	HX_HCSTRING("getMatches","\xfd","\xc2","\xdd","\xd8"),
	HX_HCSTRING("higherPriority","\xd3","\x4a","\x90","\xe2"),
	HX_HCSTRING("processToken","\x0a","\x1e","\xe0","\xfb"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	::String(null()) };

static void TokenProcessor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TokenProcessor_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TokenProcessor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TokenProcessor_obj::__mClass,"__mClass");
};

#endif

hx::Class TokenProcessor_obj::__mClass;

void TokenProcessor_obj::__register()
{
	hx::Object *dummy = new TokenProcessor_obj;
	TokenProcessor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast.TokenProcessor","\x2f","\x92","\x29","\xa8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TokenProcessor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TokenProcessor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TokenProcessor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TokenProcessor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TokenProcessor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TokenProcessor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
