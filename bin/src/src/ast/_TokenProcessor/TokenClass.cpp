// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_src_ast__TokenProcessor_TokenClass
#include <src/ast/_TokenProcessor/TokenClass.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d729384247e7049_95_new,"src.ast._TokenProcessor.TokenClass","new",0xc1d12ddd,"src.ast._TokenProcessor.TokenClass.new","src/ast/TokenProcessor.hx",95,0x0e84312d)
HX_LOCAL_STACK_FRAME(_hx_pos_3d729384247e7049_103_toString,"src.ast._TokenProcessor.TokenClass","toString",0x1cfc6e0f,"src.ast._TokenProcessor.TokenClass.toString","src/ast/TokenProcessor.hx",103,0x0e84312d)
namespace src{
namespace ast{
namespace _TokenProcessor{

void TokenClass_obj::__construct(hx::Class cls, ::Dynamic match, ::Dynamic partialMatch){
            	HX_STACKFRAME(&_hx_pos_3d729384247e7049_95_new)
HXLINE(  96)		this->cls = cls;
HXLINE(  97)		this->match = match;
HXLINE(  98)		this->partialMatch = partialMatch;
            	}

Dynamic TokenClass_obj::__CreateEmpty() { return new TokenClass_obj; }

void *TokenClass_obj::_hx_vtable = 0;

Dynamic TokenClass_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TokenClass_obj > _hx_result = new TokenClass_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TokenClass_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61bc89b5;
}

::String TokenClass_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_3d729384247e7049_103_toString)
HXDLIN( 103)		return ::Type_obj::getClassName(this->cls);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TokenClass_obj,toString,return )


hx::ObjectPtr< TokenClass_obj > TokenClass_obj::__new(hx::Class cls, ::Dynamic match, ::Dynamic partialMatch) {
	hx::ObjectPtr< TokenClass_obj > __this = new TokenClass_obj();
	__this->__construct(cls,match,partialMatch);
	return __this;
}

hx::ObjectPtr< TokenClass_obj > TokenClass_obj::__alloc(hx::Ctx *_hx_ctx,hx::Class cls, ::Dynamic match, ::Dynamic partialMatch) {
	TokenClass_obj *__this = (TokenClass_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TokenClass_obj), true, "src.ast._TokenProcessor.TokenClass"));
	*(void **)__this = TokenClass_obj::_hx_vtable;
	__this->__construct(cls,match,partialMatch);
	return __this;
}

TokenClass_obj::TokenClass_obj()
{
}

void TokenClass_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TokenClass);
	HX_MARK_MEMBER_NAME(cls,"cls");
	HX_MARK_MEMBER_NAME(match,"match");
	HX_MARK_MEMBER_NAME(partialMatch,"partialMatch");
	HX_MARK_END_CLASS();
}

void TokenClass_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cls,"cls");
	HX_VISIT_MEMBER_NAME(match,"match");
	HX_VISIT_MEMBER_NAME(partialMatch,"partialMatch");
}

hx::Val TokenClass_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cls") ) { return hx::Val( cls ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { return hx::Val( match ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { return hx::Val( partialMatch ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TokenClass_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cls") ) { cls=inValue.Cast< hx::Class >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { match=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"partialMatch") ) { partialMatch=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TokenClass_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cls","\xaa","\x7d","\x4b","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TokenClass_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(TokenClass_obj,cls),HX_HCSTRING("cls","\xaa","\x7d","\x4b","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TokenClass_obj,match),HX_HCSTRING("match","\x45","\x49","\x23","\x03")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TokenClass_obj,partialMatch),HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TokenClass_obj_sStaticStorageInfo = 0;
#endif

static ::String TokenClass_obj_sMemberFields[] = {
	HX_HCSTRING("cls","\xaa","\x7d","\x4b","\x00"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("partialMatch","\x04","\x0e","\xc2","\xca"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void TokenClass_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TokenClass_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TokenClass_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TokenClass_obj::__mClass,"__mClass");
};

#endif

hx::Class TokenClass_obj::__mClass;

void TokenClass_obj::__register()
{
	hx::Object *dummy = new TokenClass_obj;
	TokenClass_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.ast._TokenProcessor.TokenClass","\x6b","\xfb","\x1b","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TokenClass_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TokenClass_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TokenClass_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TokenClass_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TokenClass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TokenClass_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
} // end namespace _TokenProcessor
