// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_StringPool
#include <src/compiler/bytecode/StringPool.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_RootCommand
#include <src/compiler/commands/RootCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_LiteralValueCommand
#include <src/compiler/commands/value/LiteralValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ObjectValueCommand
#include <src/compiler/commands/value/ObjectValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_146c2b8c015a08bf_17_new,"src.compiler.bytecode.StringPool","new",0xfb0e08f3,"src.compiler.bytecode.StringPool.new","src/compiler/bytecode/StringPool.hx",17,0x4592491c)
HX_LOCAL_STACK_FRAME(_hx_pos_146c2b8c015a08bf_41_getPool,"src.compiler.bytecode.StringPool","getPool",0x10fcaea5,"src.compiler.bytecode.StringPool.getPool","src/compiler/bytecode/StringPool.hx",41,0x4592491c)
HX_LOCAL_STACK_FRAME(_hx_pos_146c2b8c015a08bf_22_getBestMatches,"src.compiler.bytecode.StringPool","getBestMatches",0x4aacad86,"src.compiler.bytecode.StringPool.getBestMatches","src/compiler/bytecode/StringPool.hx",22,0x4592491c)
HX_LOCAL_STACK_FRAME(_hx_pos_146c2b8c015a08bf_45_getStrings,"src.compiler.bytecode.StringPool","getStrings",0x59c96459,"src.compiler.bytecode.StringPool.getStrings","src/compiler/bytecode/StringPool.hx",45,0x4592491c)
HX_LOCAL_STACK_FRAME(_hx_pos_146c2b8c015a08bf_70_getMatches,"src.compiler.bytecode.StringPool","getMatches",0xea5212ca,"src.compiler.bytecode.StringPool.getMatches","src/compiler/bytecode/StringPool.hx",70,0x4592491c)
HX_LOCAL_STACK_FRAME(_hx_pos_146c2b8c015a08bf_94_getBest,"src.compiler.bytecode.StringPool","getBest",0x07b41eed,"src.compiler.bytecode.StringPool.getBest","src/compiler/bytecode/StringPool.hx",94,0x4592491c)
namespace src{
namespace compiler{
namespace bytecode{

void StringPool_obj::__construct( ::src::compiler::commands::RootCommand root){
            	HX_STACKFRAME(&_hx_pos_146c2b8c015a08bf_17_new)
HXDLIN(  17)		this->pool = ::src::compiler::bytecode::StringPool_obj::getBestMatches(::src::compiler::bytecode::StringPool_obj::getStrings(root));
            	}

Dynamic StringPool_obj::__CreateEmpty() { return new StringPool_obj; }

void *StringPool_obj::_hx_vtable = 0;

Dynamic StringPool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StringPool_obj > _hx_result = new StringPool_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StringPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6fb58425;
}

::Array< ::String > StringPool_obj::getPool(){
            	HX_STACKFRAME(&_hx_pos_146c2b8c015a08bf_41_getPool)
HXDLIN(  41)		return this->pool;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringPool_obj,getPool,return )

::Array< ::String > StringPool_obj::getBestMatches(::Array< ::String > strings){
            	HX_STACKFRAME(&_hx_pos_146c2b8c015a08bf_22_getBestMatches)
HXLINE(  23)		::Array< ::String > bestMatches = ::Array_obj< ::String >::__new();
HXLINE(  24)		::Array< ::String > matches = ::src::compiler::bytecode::StringPool_obj::getMatches(strings);
HXDLIN(  24)		::Array< ::String > newStrings;
HXLINE(  25)		while(true){
HXLINE(  25)			bool _hx_tmp;
HXDLIN(  25)			if ((matches->length > (int)0)) {
HXLINE(  25)				_hx_tmp = (bestMatches->length < (int)255);
            			}
            			else {
HXLINE(  25)				_hx_tmp = false;
            			}
HXDLIN(  25)			if (!(_hx_tmp)) {
HXLINE(  25)				goto _hx_goto_2;
            			}
HXLINE(  26)			::String best = ::src::compiler::bytecode::StringPool_obj::getBest(strings,matches);
HXLINE(  27)			if ((best == HX_("",00,00,00,00))) {
HXLINE(  27)				goto _hx_goto_2;
            			}
HXLINE(  28)			bestMatches->push(best);
HXLINE(  29)			newStrings = ::Array_obj< ::String >::__new();
HXLINE(  30)			{
HXLINE(  30)				int _g = (int)0;
HXDLIN(  30)				while((_g < strings->length)){
HXLINE(  30)					::String string = strings->__get(_g);
HXDLIN(  30)					_g = (_g + (int)1);
HXLINE(  31)					newStrings = newStrings->concat(string.split(best));
            				}
            			}
HXLINE(  33)			strings = newStrings;
HXLINE(  34)			matches = ::src::compiler::bytecode::StringPool_obj::getMatches(strings);
            		}
            		_hx_goto_2:;
HXLINE(  36)		return bestMatches;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringPool_obj,getBestMatches,return )

::Array< ::String > StringPool_obj::getStrings( ::src::compiler::commands::RootCommand root){
            	HX_STACKFRAME(&_hx_pos_146c2b8c015a08bf_45_getStrings)
HXLINE(  46)		::Array< ::String > strings = ::Array_obj< ::String >::__new();
HXLINE(  47)		::Array< ::Dynamic> todo = root->walk();
HXLINE(  48)		::Array< ::Dynamic> next;
HXDLIN(  48)		::Array< ::Dynamic> arr;
HXLINE(  49)		while((todo->length > (int)0)){
HXLINE(  50)			next = ::Array_obj< ::Dynamic>::__new();
HXLINE(  51)			{
HXLINE(  51)				int _g = (int)0;
HXDLIN(  51)				while((_g < todo->length)){
HXLINE(  51)					 ::src::compiler::commands::Command cmd = todo->__get(_g).StaticCast<  ::src::compiler::commands::Command >();
HXDLIN(  51)					_g = (_g + (int)1);
HXLINE(  52)					if ((cmd->getName() == HX_("ObjectValueCommand",59,eb,9e,45))) {
HXLINE(  53)						 ::src::compiler::commands::value::ObjectValueCommand ovc = hx::TCast<  ::src::compiler::commands::value::ObjectValueCommand >::cast(cmd);
HXLINE(  54)						if ((ovc->type == HX_("StringType",4b,88,b6,f5))) {
HXLINE(  54)							strings->push(ovc->value);
            						}
            					}
            					else {
HXLINE(  55)						if ((cmd->getName() == HX_("LiteralValueCommand",c9,b1,43,d2))) {
HXLINE(  56)							 ::src::compiler::commands::value::LiteralValueCommand lvc = hx::TCast<  ::src::compiler::commands::value::LiteralValueCommand >::cast(cmd);
HXLINE(  57)							strings->push(lvc->getContent());
            						}
            						else {
HXLINE(  59)							arr = cmd->walk();
HXLINE(  60)							bool _hx_tmp;
HXDLIN(  60)							if (hx::IsNotNull( arr )) {
HXLINE(  60)								_hx_tmp = (arr->length > (int)0);
            							}
            							else {
HXLINE(  60)								_hx_tmp = false;
            							}
HXDLIN(  60)							if (_hx_tmp) {
HXLINE(  60)								next = next->concat(arr);
            							}
            						}
            					}
            				}
            			}
HXLINE(  63)			todo = next;
            		}
HXLINE(  66)		return strings;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringPool_obj,getStrings,return )

::Array< ::String > StringPool_obj::getMatches(::Array< ::String > strings){
            	HX_STACKFRAME(&_hx_pos_146c2b8c015a08bf_70_getMatches)
HXLINE(  71)		::Array< ::String > matches = ::Array_obj< ::String >::__new();
HXLINE(  72)		int window;
HXDLIN(  72)		int max;
HXDLIN(  72)		int maxPos;
HXDLIN(  72)		::String s0;
HXDLIN(  72)		::String s1;
HXDLIN(  72)		::String check;
HXLINE(  73)		{
HXLINE(  73)			int _g1 = (int)0;
HXDLIN(  73)			int _g = strings->length;
HXDLIN(  73)			while((_g1 < _g)){
HXLINE(  73)				_g1 = (_g1 + (int)1);
HXDLIN(  73)				int si = (_g1 - (int)1);
HXLINE(  74)				s0 = strings->__get(si);
HXLINE(  75)				{
HXLINE(  75)					int _g3 = (si + (int)1);
HXDLIN(  75)					int _g2 = strings->length;
HXDLIN(  75)					while((_g3 < _g2)){
HXLINE(  75)						_g3 = (_g3 + (int)1);
HXDLIN(  75)						int sj = (_g3 - (int)1);
HXLINE(  76)						s1 = strings->__get(sj);
HXLINE(  77)						window = s0.length;
HXLINE(  78)						if ((s1.length < window)) {
HXLINE(  78)							window = s1.length;
            						}
HXLINE(  79)						while((window > (int)2)){
HXLINE(  80)							{
HXLINE(  80)								int _g5 = (int)0;
HXDLIN(  80)								int _g4 = ((s0.length - window) + (int)1);
HXDLIN(  80)								while((_g5 < _g4)){
HXLINE(  80)									_g5 = (_g5 + (int)1);
HXDLIN(  80)									int i = (_g5 - (int)1);
HXLINE(  81)									check = s0.substr(i,window);
HXLINE(  82)									if ((s1.indexOf(check,null()) >= (int)0)) {
HXLINE(  83)										if ((matches->indexOf(check,null()) == (int)-1)) {
HXLINE(  83)											matches->push(check);
            										}
            									}
            								}
            							}
HXLINE(  86)							window = (window - (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(  90)		return matches;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringPool_obj,getMatches,return )

::String StringPool_obj::getBest(::Array< ::String > strings,::Array< ::String > matches){
            	HX_STACKFRAME(&_hx_pos_146c2b8c015a08bf_94_getBest)
HXLINE(  95)		int bestScore = (int)0;
HXLINE(  96)		::String bestMatch = HX_("",00,00,00,00);
HXLINE(  97)		int index;
HXLINE(  98)		{
HXLINE(  98)			int _g = (int)0;
HXDLIN(  98)			while((_g < matches->length)){
HXLINE(  98)				::String match = matches->__get(_g);
HXDLIN(  98)				_g = (_g + (int)1);
HXLINE(  99)				int count = (int)0;
HXLINE( 100)				{
HXLINE( 100)					int _g1 = (int)0;
HXDLIN( 100)					while((_g1 < strings->length)){
HXLINE( 100)						::String string = strings->__get(_g1);
HXDLIN( 100)						_g1 = (_g1 + (int)1);
HXLINE( 101)						index = string.indexOf(match,null());
HXLINE( 102)						while((index >= (int)0)){
HXLINE( 103)							count = (count + (int)1);
HXLINE( 104)							index = string.indexOf(match,(index + (int)1));
            						}
            					}
            				}
HXLINE( 107)				int score = (count * match.length);
HXDLIN( 107)				int score1 = (((int)2 * count) + match.length);
HXDLIN( 107)				int score2 = (score - (score1 + ::src::compiler::bytecode::Bytecode_obj::lengthOfLength(match.length)));
HXLINE( 108)				if ((score2 > bestScore)) {
HXLINE( 109)					bestScore = score2;
HXLINE( 110)					bestMatch = match;
            				}
            			}
            		}
HXLINE( 113)		return bestMatch;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringPool_obj,getBest,return )


hx::ObjectPtr< StringPool_obj > StringPool_obj::__new( ::src::compiler::commands::RootCommand root) {
	hx::ObjectPtr< StringPool_obj > __this = new StringPool_obj();
	__this->__construct(root);
	return __this;
}

hx::ObjectPtr< StringPool_obj > StringPool_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::commands::RootCommand root) {
	StringPool_obj *__this = (StringPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StringPool_obj), true, "src.compiler.bytecode.StringPool"));
	*(void **)__this = StringPool_obj::_hx_vtable;
	__this->__construct(root);
	return __this;
}

StringPool_obj::StringPool_obj()
{
}

void StringPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringPool);
	HX_MARK_MEMBER_NAME(pool,"pool");
	HX_MARK_END_CLASS();
}

void StringPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pool,"pool");
}

hx::Val StringPool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { return hx::Val( pool ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getPool") ) { return hx::Val( getPool_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StringPool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getBest") ) { outValue = getBest_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getStrings") ) { outValue = getStrings_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMatches") ) { outValue = getMatches_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getBestMatches") ) { outValue = getBestMatches_dyn(); return true; }
	}
	return false;
}

hx::Val StringPool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { pool=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StringPool_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(StringPool_obj,pool),HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StringPool_obj_sStaticStorageInfo = 0;
#endif

static ::String StringPool_obj_sMemberFields[] = {
	HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a"),
	HX_HCSTRING("getPool","\x92","\x30","\xdf","\x1c"),
	::String(null()) };

static void StringPool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringPool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringPool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringPool_obj::__mClass,"__mClass");
};

#endif

hx::Class StringPool_obj::__mClass;

static ::String StringPool_obj_sStaticFields[] = {
	HX_HCSTRING("getBestMatches","\x39","\xf3","\x3f","\xbe"),
	HX_HCSTRING("getStrings","\x8c","\x14","\x55","\x48"),
	HX_HCSTRING("getMatches","\xfd","\xc2","\xdd","\xd8"),
	HX_HCSTRING("getBest","\xda","\xa0","\x96","\x13"),
	::String(null())
};

void StringPool_obj::__register()
{
	hx::Object *dummy = new StringPool_obj;
	StringPool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.bytecode.StringPool","\x81","\x13","\x9c","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringPool_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StringPool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StringPool_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StringPool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StringPool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringPool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringPool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace bytecode
