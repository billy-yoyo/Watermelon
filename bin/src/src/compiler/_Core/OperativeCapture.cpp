// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_compiler__Core_OperativeCapture
#include <src/compiler/_Core/OperativeCapture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7d43b3e2b768e154_173_new,"src.compiler._Core.OperativeCapture","new",0x89678496,"src.compiler._Core.OperativeCapture.new","src/compiler/Core.hx",173,0x3bfcc3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d43b3e2b768e154_190_isStart,"src.compiler._Core.OperativeCapture","isStart",0x67321f4e,"src.compiler._Core.OperativeCapture.isStart","src/compiler/Core.hx",190,0x3bfcc3ba)
HX_LOCAL_STACK_FRAME(_hx_pos_7d43b3e2b768e154_195_isEnd,"src.compiler._Core.OperativeCapture","isEnd",0x7ddcdbc7,"src.compiler._Core.OperativeCapture.isEnd","src/compiler/Core.hx",195,0x3bfcc3ba)
namespace src{
namespace compiler{
namespace _Core{

void OperativeCapture_obj::__construct(::Array< ::String > end,::Array< ::String > startContent,::Array< ::String > endContent, ::Dynamic checkOverride){
            	HX_STACKFRAME(&_hx_pos_7d43b3e2b768e154_173_new)
HXLINE( 179)		this->lastData = null();
HXLINE( 182)		this->end = end;
HXLINE( 183)		this->startContent = startContent;
HXLINE( 184)		this->endContent = endContent;
HXLINE( 185)		this->checkOverride = checkOverride;
            	}

Dynamic OperativeCapture_obj::__CreateEmpty() { return new OperativeCapture_obj; }

void *OperativeCapture_obj::_hx_vtable = 0;

Dynamic OperativeCapture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OperativeCapture_obj > _hx_result = new OperativeCapture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool OperativeCapture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4672bace;
}

bool OperativeCapture_obj::isStart( ::src::ast::Token token){
            	HX_STACKFRAME(&_hx_pos_7d43b3e2b768e154_190_isStart)
HXDLIN( 190)		if (hx::IsNotNull( this->startContent )) {
HXDLIN( 190)			::Array< ::String > _hx_tmp = this->startContent;
HXDLIN( 190)			return (_hx_tmp->indexOf(token->getContent(),null()) >= (int)0);
            		}
            		else {
HXDLIN( 190)			return true;
            		}
HXDLIN( 190)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OperativeCapture_obj,isStart,return )

bool OperativeCapture_obj::isEnd( ::src::ast::Token token, ::src::ast::Token nextToken){
            	HX_STACKFRAME(&_hx_pos_7d43b3e2b768e154_195_isEnd)
HXDLIN( 195)		if (hx::IsNotNull( this->checkOverride )) {
HXLINE( 196)			return ( (bool)(this->checkOverride(this->lastData,token,nextToken)) );
            		}
            		else {
HXLINE( 198)			::Array< ::String > _hx_tmp = this->end;
HXDLIN( 198)			if ((_hx_tmp->indexOf(token->getName(),null()) >= (int)0)) {
HXLINE( 198)				if (hx::IsNotNull( this->endContent )) {
HXLINE( 198)					::Array< ::String > _hx_tmp1 = this->endContent;
HXDLIN( 198)					return (_hx_tmp1->indexOf(token->getContent(),null()) >= (int)0);
            				}
            				else {
HXLINE( 198)					return true;
            				}
            			}
            			else {
HXLINE( 198)				return false;
            			}
            		}
HXLINE( 195)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(OperativeCapture_obj,isEnd,return )


hx::ObjectPtr< OperativeCapture_obj > OperativeCapture_obj::__new(::Array< ::String > end,::Array< ::String > startContent,::Array< ::String > endContent, ::Dynamic checkOverride) {
	hx::ObjectPtr< OperativeCapture_obj > __this = new OperativeCapture_obj();
	__this->__construct(end,startContent,endContent,checkOverride);
	return __this;
}

hx::ObjectPtr< OperativeCapture_obj > OperativeCapture_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::String > end,::Array< ::String > startContent,::Array< ::String > endContent, ::Dynamic checkOverride) {
	OperativeCapture_obj *__this = (OperativeCapture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OperativeCapture_obj), true, "src.compiler._Core.OperativeCapture"));
	*(void **)__this = OperativeCapture_obj::_hx_vtable;
	__this->__construct(end,startContent,endContent,checkOverride);
	return __this;
}

OperativeCapture_obj::OperativeCapture_obj()
{
}

void OperativeCapture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OperativeCapture);
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(startContent,"startContent");
	HX_MARK_MEMBER_NAME(endContent,"endContent");
	HX_MARK_MEMBER_NAME(checkOverride,"checkOverride");
	HX_MARK_MEMBER_NAME(lastData,"lastData");
	HX_MARK_END_CLASS();
}

void OperativeCapture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(startContent,"startContent");
	HX_VISIT_MEMBER_NAME(endContent,"endContent");
	HX_VISIT_MEMBER_NAME(checkOverride,"checkOverride");
	HX_VISIT_MEMBER_NAME(lastData,"lastData");
}

hx::Val OperativeCapture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isEnd") ) { return hx::Val( isEnd_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isStart") ) { return hx::Val( isStart_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastData") ) { return hx::Val( lastData ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endContent") ) { return hx::Val( endContent ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startContent") ) { return hx::Val( startContent ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkOverride") ) { return hx::Val( checkOverride ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OperativeCapture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastData") ) { lastData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endContent") ) { endContent=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startContent") ) { startContent=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkOverride") ) { checkOverride=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OperativeCapture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("startContent","\xf7","\x70","\x23","\x8b"));
	outFields->push(HX_HCSTRING("endContent","\x9e","\xb2","\x99","\xbf"));
	outFields->push(HX_HCSTRING("lastData","\xa0","\x6f","\xac","\xd5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OperativeCapture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(OperativeCapture_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(OperativeCapture_obj,startContent),HX_HCSTRING("startContent","\xf7","\x70","\x23","\x8b")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(OperativeCapture_obj,endContent),HX_HCSTRING("endContent","\x9e","\xb2","\x99","\xbf")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(OperativeCapture_obj,checkOverride),HX_HCSTRING("checkOverride","\x34","\x7f","\x82","\x31")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(OperativeCapture_obj,lastData),HX_HCSTRING("lastData","\xa0","\x6f","\xac","\xd5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OperativeCapture_obj_sStaticStorageInfo = 0;
#endif

static ::String OperativeCapture_obj_sMemberFields[] = {
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("startContent","\xf7","\x70","\x23","\x8b"),
	HX_HCSTRING("endContent","\x9e","\xb2","\x99","\xbf"),
	HX_HCSTRING("checkOverride","\x34","\x7f","\x82","\x31"),
	HX_HCSTRING("lastData","\xa0","\x6f","\xac","\xd5"),
	HX_HCSTRING("isStart","\x18","\x18","\x91","\x20"),
	HX_HCSTRING("isEnd","\x11","\x2e","\x4b","\xc1"),
	::String(null()) };

static void OperativeCapture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OperativeCapture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OperativeCapture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OperativeCapture_obj::__mClass,"__mClass");
};

#endif

hx::Class OperativeCapture_obj::__mClass;

void OperativeCapture_obj::__register()
{
	hx::Object *dummy = new OperativeCapture_obj;
	OperativeCapture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler._Core.OperativeCapture","\xa4","\x41","\x40","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OperativeCapture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OperativeCapture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OperativeCapture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OperativeCapture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OperativeCapture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OperativeCapture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace _Core
