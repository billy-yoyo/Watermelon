// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_IndexOutOfBoundsSignal
#include <src/compiler/signals/IndexOutOfBoundsSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b458842e11c43db8_7_new,"src.compiler.signals.IndexOutOfBoundsSignal","new",0xd7c20eaa,"src.compiler.signals.IndexOutOfBoundsSignal.new","src/compiler/signals/IndexOutOfBoundsSignal.hx",7,0xfe074605)
HX_LOCAL_STACK_FRAME(_hx_pos_b458842e11c43db8_11_getName,"src.compiler.signals.IndexOutOfBoundsSignal","getName",0xb58e4d4b,"src.compiler.signals.IndexOutOfBoundsSignal.getName","src/compiler/signals/IndexOutOfBoundsSignal.hx",11,0xfe074605)
namespace src{
namespace compiler{
namespace signals{

void IndexOutOfBoundsSignal_obj::__construct(::String msg){
            	HX_STACKFRAME(&_hx_pos_b458842e11c43db8_7_new)
HXDLIN(   7)		super::__construct(msg);
            	}

Dynamic IndexOutOfBoundsSignal_obj::__CreateEmpty() { return new IndexOutOfBoundsSignal_obj; }

void *IndexOutOfBoundsSignal_obj::_hx_vtable = 0;

Dynamic IndexOutOfBoundsSignal_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IndexOutOfBoundsSignal_obj > _hx_result = new IndexOutOfBoundsSignal_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool IndexOutOfBoundsSignal_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f7d2c12) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1f7d2c12;
	} else {
		return inClassId==(int)0x7a96e6b8;
	}
}

::String IndexOutOfBoundsSignal_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_b458842e11c43db8_11_getName)
HXDLIN(  11)		return HX_("IndexOutOfBoundsSignal",50,78,40,89);
            	}



IndexOutOfBoundsSignal_obj::IndexOutOfBoundsSignal_obj()
{
}

hx::Val IndexOutOfBoundsSignal_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IndexOutOfBoundsSignal_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IndexOutOfBoundsSignal_obj_sStaticStorageInfo = 0;
#endif

static ::String IndexOutOfBoundsSignal_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	::String(null()) };

static void IndexOutOfBoundsSignal_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IndexOutOfBoundsSignal_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IndexOutOfBoundsSignal_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IndexOutOfBoundsSignal_obj::__mClass,"__mClass");
};

#endif

hx::Class IndexOutOfBoundsSignal_obj::__mClass;

void IndexOutOfBoundsSignal_obj::__register()
{
	hx::Object *dummy = new IndexOutOfBoundsSignal_obj;
	IndexOutOfBoundsSignal_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.signals.IndexOutOfBoundsSignal","\xb8","\x31","\x5f","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IndexOutOfBoundsSignal_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IndexOutOfBoundsSignal_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IndexOutOfBoundsSignal_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IndexOutOfBoundsSignal_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexOutOfBoundsSignal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexOutOfBoundsSignal_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace signals
