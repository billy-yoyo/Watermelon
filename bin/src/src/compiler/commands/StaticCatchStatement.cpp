// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_commands_CatchStatement
#include <src/compiler/commands/CatchStatement.h>
#endif
#ifndef INCLUDED_src_compiler_commands_StaticCatchStatement
#include <src/compiler/commands/StaticCatchStatement.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e3c9525e64473ac_272_new,"src.compiler.commands.StaticCatchStatement","new",0xb90142f5,"src.compiler.commands.StaticCatchStatement.new","src/compiler/commands/TryCatchCommand.hx",272,0x3a9aac55)
namespace src{
namespace compiler{
namespace commands{

void StaticCatchStatement_obj::__construct( ::src::compiler::commands::CatchStatement statement, ::src::compiler::Scope scope,::String type, ::Dynamic source){
            	HX_STACKFRAME(&_hx_pos_6e3c9525e64473ac_272_new)
HXLINE( 273)		this->statement = statement;
HXLINE( 274)		this->scope = scope;
HXLINE( 275)		this->type = type;
HXLINE( 276)		this->source = source;
            	}

Dynamic StaticCatchStatement_obj::__CreateEmpty() { return new StaticCatchStatement_obj; }

void *StaticCatchStatement_obj::_hx_vtable = 0;

Dynamic StaticCatchStatement_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StaticCatchStatement_obj > _hx_result = new StaticCatchStatement_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool StaticCatchStatement_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x570356a5;
}


hx::ObjectPtr< StaticCatchStatement_obj > StaticCatchStatement_obj::__new( ::src::compiler::commands::CatchStatement statement, ::src::compiler::Scope scope,::String type, ::Dynamic source) {
	hx::ObjectPtr< StaticCatchStatement_obj > __this = new StaticCatchStatement_obj();
	__this->__construct(statement,scope,type,source);
	return __this;
}

hx::ObjectPtr< StaticCatchStatement_obj > StaticCatchStatement_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::commands::CatchStatement statement, ::src::compiler::Scope scope,::String type, ::Dynamic source) {
	StaticCatchStatement_obj *__this = (StaticCatchStatement_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StaticCatchStatement_obj), true, "src.compiler.commands.StaticCatchStatement"));
	*(void **)__this = StaticCatchStatement_obj::_hx_vtable;
	__this->__construct(statement,scope,type,source);
	return __this;
}

StaticCatchStatement_obj::StaticCatchStatement_obj()
{
}

void StaticCatchStatement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StaticCatchStatement);
	HX_MARK_MEMBER_NAME(statement,"statement");
	HX_MARK_MEMBER_NAME(scope,"scope");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_END_CLASS();
}

void StaticCatchStatement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(statement,"statement");
	HX_VISIT_MEMBER_NAME(scope,"scope");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(source,"source");
}

hx::Val StaticCatchStatement_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scope") ) { return hx::Val( scope ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { return hx::Val( source ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statement") ) { return hx::Val( statement ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StaticCatchStatement_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scope") ) { scope=inValue.Cast<  ::src::compiler::Scope >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statement") ) { statement=inValue.Cast<  ::src::compiler::commands::CatchStatement >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StaticCatchStatement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("statement","\x2f","\x98","\x27","\x40"));
	outFields->push(HX_HCSTRING("scope","\x94","\x71","\xd9","\x78"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StaticCatchStatement_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::CatchStatement*/ ,(int)offsetof(StaticCatchStatement_obj,statement),HX_HCSTRING("statement","\x2f","\x98","\x27","\x40")},
	{hx::fsObject /*::src::compiler::Scope*/ ,(int)offsetof(StaticCatchStatement_obj,scope),HX_HCSTRING("scope","\x94","\x71","\xd9","\x78")},
	{hx::fsString,(int)offsetof(StaticCatchStatement_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(StaticCatchStatement_obj,source),HX_HCSTRING("source","\xdb","\xb0","\x31","\x32")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StaticCatchStatement_obj_sStaticStorageInfo = 0;
#endif

static ::String StaticCatchStatement_obj_sMemberFields[] = {
	HX_HCSTRING("statement","\x2f","\x98","\x27","\x40"),
	HX_HCSTRING("scope","\x94","\x71","\xd9","\x78"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"),
	::String(null()) };

static void StaticCatchStatement_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StaticCatchStatement_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StaticCatchStatement_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StaticCatchStatement_obj::__mClass,"__mClass");
};

#endif

hx::Class StaticCatchStatement_obj::__mClass;

void StaticCatchStatement_obj::__register()
{
	hx::Object *dummy = new StaticCatchStatement_obj;
	StaticCatchStatement_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.StaticCatchStatement","\x83","\xa4","\x25","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StaticCatchStatement_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StaticCatchStatement_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StaticCatchStatement_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StaticCatchStatement_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StaticCatchStatement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StaticCatchStatement_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
