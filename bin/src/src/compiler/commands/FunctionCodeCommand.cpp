// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_EndLineToken
#include <src/ast/base/EndLineToken.h>
#endif
#ifndef INCLUDED_src_compiler_Core
#include <src/compiler/Core.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_FunctionCodeCommand
#include <src/compiler/commands/FunctionCodeCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_FunctionReturnSignal
#include <src/compiler/signals/FunctionReturnSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_822373d1ecaf46cd_30_new,"src.compiler.commands.FunctionCodeCommand","new",0xfcb66337,"src.compiler.commands.FunctionCodeCommand.new","src/compiler/commands/FunctionCodeCommand.hx",30,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_37_walk,"src.compiler.commands.FunctionCodeCommand","walk",0x28d04652,"src.compiler.commands.FunctionCodeCommand.walk","src/compiler/commands/FunctionCodeCommand.hx",37,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_41_run,"src.compiler.commands.FunctionCodeCommand","run",0xfcb97a22,"src.compiler.commands.FunctionCodeCommand.run","src/compiler/commands/FunctionCodeCommand.hx",41,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_54_getName,"src.compiler.commands.FunctionCodeCommand","getName",0x3cbc6c58,"src.compiler.commands.FunctionCodeCommand.getName","src/compiler/commands/FunctionCodeCommand.hx",54,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_59_getBytecode,"src.compiler.commands.FunctionCodeCommand","getBytecode",0x828f78c2,"src.compiler.commands.FunctionCodeCommand.getBytecode","src/compiler/commands/FunctionCodeCommand.hx",59,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_64_reconstruct,"src.compiler.commands.FunctionCodeCommand","reconstruct",0x951e27db,"src.compiler.commands.FunctionCodeCommand.reconstruct","src/compiler/commands/FunctionCodeCommand.hx",64,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_18_fromTokens,"src.compiler.commands.FunctionCodeCommand","fromTokens",0xd77ca26d,"src.compiler.commands.FunctionCodeCommand.fromTokens","src/compiler/commands/FunctionCodeCommand.hx",18,0xf7649cfa)
HX_LOCAL_STACK_FRAME(_hx_pos_822373d1ecaf46cd_22_fromBytecode,"src.compiler.commands.FunctionCodeCommand","fromBytecode",0x55f4aa08,"src.compiler.commands.FunctionCodeCommand.fromBytecode","src/compiler/commands/FunctionCodeCommand.hx",22,0xf7649cfa)
namespace src{
namespace compiler{
namespace commands{

void FunctionCodeCommand_obj::__construct( ::src::compiler::Scope scope,::Array< ::Dynamic> commands){
            	HX_STACKFRAME(&_hx_pos_822373d1ecaf46cd_30_new)
HXLINE(  31)		super::__construct(scope);
HXLINE(  32)		this->commands = commands;
            	}

Dynamic FunctionCodeCommand_obj::__CreateEmpty() { return new FunctionCodeCommand_obj; }

void *FunctionCodeCommand_obj::_hx_vtable = 0;

Dynamic FunctionCodeCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FunctionCodeCommand_obj > _hx_result = new FunctionCodeCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FunctionCodeCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x3c394d7f;
	}
}

::Array< ::Dynamic> FunctionCodeCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_822373d1ecaf46cd_37_walk)
HXDLIN(  37)		return this->commands;
            	}


 ::src::compiler::object::Object FunctionCodeCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_822373d1ecaf46cd_41_run)
HXLINE(  42)		{
HXLINE(  42)			int _g = (int)0;
HXDLIN(  42)			::Array< ::Dynamic> _g1 = this->commands;
HXDLIN(  42)			while((_g < _g1->length)){
HXLINE(  42)				 ::src::compiler::commands::Command command = _g1->__get(_g).StaticCast<  ::src::compiler::commands::Command >();
HXDLIN(  42)				_g = (_g + (int)1);
HXLINE(  43)				try {
            					HX_STACK_CATCHABLE( ::src::compiler::signals::FunctionReturnSignal, 0);
HXLINE(  44)					command->run();
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::src::compiler::signals::FunctionReturnSignal >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::src::compiler::signals::FunctionReturnSignal ret = _hx_e;
HXLINE(  46)						return ret->getReturn();
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(  49)		return null();
            	}


::String FunctionCodeCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_822373d1ecaf46cd_54_getName)
HXDLIN(  54)		return HX_("FunctionCodeCommand",46,a3,e9,4f);
            	}


 ::src::compiler::bytecode::Bytecode FunctionCodeCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_822373d1ecaf46cd_59_getBytecode)
HXDLIN(  59)		::Array< ::Dynamic> _hx_tmp = this->commands;
HXDLIN(  59)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> FunctionCodeCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_822373d1ecaf46cd_64_reconstruct)
HXDLIN(  64)		 ::src::ast::base::EndLineToken _hx_tmp =  ::src::ast::base::EndLineToken_obj::__alloc( HX_CTX ,HX_(";",3b,00,00,00));
HXDLIN(  64)		return _hx_tmp->join(::src::compiler::commands::Command_obj::reconstructCommands(this->commands),true);
            	}


 ::src::compiler::commands::FunctionCodeCommand FunctionCodeCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_822373d1ecaf46cd_18_fromTokens)
HXDLIN(  18)		return  ::src::compiler::commands::FunctionCodeCommand_obj::__alloc( HX_CTX ,scope,::src::compiler::Core_obj::convert(scope,tokens));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunctionCodeCommand_obj,fromTokens,return )

 ::src::compiler::commands::FunctionCodeCommand FunctionCodeCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_822373d1ecaf46cd_22_fromBytecode)
HXLINE(  23)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE(  24)		while((arr->length > (int)0)){
HXLINE(  24)			result->push(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            		}
HXLINE(  25)		return  ::src::compiler::commands::FunctionCodeCommand_obj::__alloc( HX_CTX ,scope,result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunctionCodeCommand_obj,fromBytecode,return )


hx::ObjectPtr< FunctionCodeCommand_obj > FunctionCodeCommand_obj::__new( ::src::compiler::Scope scope,::Array< ::Dynamic> commands) {
	hx::ObjectPtr< FunctionCodeCommand_obj > __this = new FunctionCodeCommand_obj();
	__this->__construct(scope,commands);
	return __this;
}

hx::ObjectPtr< FunctionCodeCommand_obj > FunctionCodeCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::Array< ::Dynamic> commands) {
	FunctionCodeCommand_obj *__this = (FunctionCodeCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FunctionCodeCommand_obj), true, "src.compiler.commands.FunctionCodeCommand"));
	*(void **)__this = FunctionCodeCommand_obj::_hx_vtable;
	__this->__construct(scope,commands);
	return __this;
}

FunctionCodeCommand_obj::FunctionCodeCommand_obj()
{
}

void FunctionCodeCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionCodeCommand);
	HX_MARK_MEMBER_NAME(commands,"commands");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FunctionCodeCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(commands,"commands");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FunctionCodeCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { return hx::Val( commands ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunctionCodeCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val FunctionCodeCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { commands=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionCodeCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FunctionCodeCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FunctionCodeCommand_obj,commands),HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FunctionCodeCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionCodeCommand_obj_sMemberFields[] = {
	HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void FunctionCodeCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunctionCodeCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunctionCodeCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunctionCodeCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class FunctionCodeCommand_obj::__mClass;

static ::String FunctionCodeCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void FunctionCodeCommand_obj::__register()
{
	hx::Object *dummy = new FunctionCodeCommand_obj;
	FunctionCodeCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.FunctionCodeCommand","\xc5","\xfb","\x70","\xe4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunctionCodeCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FunctionCodeCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FunctionCodeCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FunctionCodeCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FunctionCodeCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunctionCodeCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionCodeCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionCodeCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
