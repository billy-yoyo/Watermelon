// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_KwdToken
#include <src/ast/base/KwdToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_IteratorCommand
#include <src/compiler/commands/IteratorCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_BoolObject
#include <src/compiler/object/builtin/BoolObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_IntObject
#include <src/compiler/object/builtin/IntObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ValuedObject
#include <src/compiler/object/builtin/ValuedObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_IteratorExitSignal
#include <src/compiler/signals/IteratorExitSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_494c23514ca1bc78_16_new,"src.compiler.commands.IteratorCommand","new",0x9d3abcce,"src.compiler.commands.IteratorCommand.new","src/compiler/commands/IteratorCommand.hx",16,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_62_copy,"src.compiler.commands.IteratorCommand","copy",0xeeecaf87,"src.compiler.commands.IteratorCommand.copy","src/compiler/commands/IteratorCommand.hx",62,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_66_setScope,"src.compiler.commands.IteratorCommand","setScope",0x9cd11f64,"src.compiler.commands.IteratorCommand.setScope","src/compiler/commands/IteratorCommand.hx",66,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_73_walk,"src.compiler.commands.IteratorCommand","walk",0xfc1a50db,"src.compiler.commands.IteratorCommand.walk","src/compiler/commands/IteratorCommand.hx",73,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_77_run,"src.compiler.commands.IteratorCommand","run",0x9d3dd3b9,"src.compiler.commands.IteratorCommand.run","src/compiler/commands/IteratorCommand.hx",77,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_97_getName,"src.compiler.commands.IteratorCommand","getName",0x0a62dd6f,"src.compiler.commands.IteratorCommand.getName","src/compiler/commands/IteratorCommand.hx",97,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_102_getFriendlyName,"src.compiler.commands.IteratorCommand","getFriendlyName",0x7a436b7a,"src.compiler.commands.IteratorCommand.getFriendlyName","src/compiler/commands/IteratorCommand.hx",102,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_106_getBytecode,"src.compiler.commands.IteratorCommand","getBytecode",0xa0f9c159,"src.compiler.commands.IteratorCommand.getBytecode","src/compiler/commands/IteratorCommand.hx",106,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_113_reconstruct,"src.compiler.commands.IteratorCommand","reconstruct",0xb3887072,"src.compiler.commands.IteratorCommand.reconstruct","src/compiler/commands/IteratorCommand.hx",113,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_20_fromTokens,"src.compiler.commands.IteratorCommand","fromTokens",0x55e6b9b6,"src.compiler.commands.IteratorCommand.fromTokens","src/compiler/commands/IteratorCommand.hx",20,0x5e4f7ec3)
HX_LOCAL_STACK_FRAME(_hx_pos_494c23514ca1bc78_47_fromBytecode,"src.compiler.commands.IteratorCommand","fromBytecode",0xd489e591,"src.compiler.commands.IteratorCommand.fromBytecode","src/compiler/commands/IteratorCommand.hx",47,0x5e4f7ec3)
namespace src{
namespace compiler{
namespace commands{

void IteratorCommand_obj::__construct( ::src::compiler::Scope scope,::Array< ::String > vars, ::src::compiler::commands::value::ValueCommand value){
            	HX_STACKFRAME(&_hx_pos_494c23514ca1bc78_16_new)
HXLINE(  50)		this->iterator = null();
HXLINE(  55)		super::__construct(scope);
HXLINE(  56)		this->vars = vars;
HXLINE(  57)		this->value = value;
            	}

Dynamic IteratorCommand_obj::__CreateEmpty() { return new IteratorCommand_obj; }

void *IteratorCommand_obj::_hx_vtable = 0;

Dynamic IteratorCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IteratorCommand_obj > _hx_result = new IteratorCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IteratorCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x09465632) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x09465632;
	} else {
		return inClassId==(int)0x20538180;
	}
}

 ::src::compiler::commands::Command IteratorCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_494c23514ca1bc78_62_copy)
HXDLIN(  62)		::Array< ::String > _hx_tmp = this->vars->copy();
HXDLIN(  62)		return  ::src::compiler::commands::IteratorCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,this->value->copy(scope));
            	}


void IteratorCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_494c23514ca1bc78_66_setScope)
HXLINE(  67)		this->super::setScope(scope);
HXLINE(  68)		this->value->setScope(scope);
            	}


::Array< ::Dynamic> IteratorCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_494c23514ca1bc78_73_walk)
HXDLIN(  73)		return this->value->walk();
            	}


 ::src::compiler::object::Object IteratorCommand_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_494c23514ca1bc78_77_run)
HXLINE(  78)		if (hx::IsNull( this->iterator )) {
HXLINE(  78)			this->iterator = this->value->run();
            		}
HXLINE(  79)		bool _hx_tmp;
HXDLIN(  79)		if (!(this->iterator->isInstance(HX_("IteratorType",e8,43,45,b2)))) {
HXLINE(  79)			_hx_tmp = !(this->iterator->hasMember(HX_("__next__",f3,a5,93,1a)));
            		}
            		else {
HXLINE(  79)			_hx_tmp = false;
            		}
HXDLIN(  79)		if (_hx_tmp) {
HXLINE(  79)			this->iterator = this->iterator->iter();
            		}
HXLINE(  80)		if (this->iterator->hasNext()->rawBool()) {
HXLINE(  81)			if ((this->vars->length == (int)1)) {
HXLINE(  82)				 ::src::compiler::Scope _hx_tmp1 = this->scope;
HXDLIN(  82)				::String _hx_tmp2 = this->vars->__get((int)0);
HXDLIN(  82)				_hx_tmp1->setVariable(_hx_tmp2,this->iterator->next());
            			}
            			else {
HXLINE(  84)				 ::src::compiler::object::Object obj = this->iterator->next();
HXLINE(  85)				{
HXLINE(  85)					int _g1 = (int)0;
HXDLIN(  85)					int _g = this->vars->length;
HXDLIN(  85)					while((_g1 < _g)){
HXLINE(  85)						_g1 = (_g1 + (int)1);
HXDLIN(  85)						int i = (_g1 - (int)1);
HXLINE(  86)						 ::src::compiler::Scope _hx_tmp3 = this->scope;
HXDLIN(  86)						::String _hx_tmp4 = this->vars->__get(i);
HXDLIN(  86)						_hx_tmp3->setVariable(_hx_tmp4,obj->get(obj->_int(i,null())));
            					}
            				}
            			}
            		}
            		else {
HXLINE(  90)			HX_STACK_DO_THROW( ::src::compiler::signals::IteratorExitSignal_obj::__alloc( HX_CTX ,HX_("",00,00,00,00)));
            		}
HXLINE(  92)		return null();
            	}


::String IteratorCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_494c23514ca1bc78_97_getName)
HXDLIN(  97)		return HX_("IteratorCommand",dd,90,61,b2);
            	}


::String IteratorCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_494c23514ca1bc78_102_getFriendlyName)
HXDLIN( 102)		return HX_("iterator",ee,49,9a,93);
            	}


 ::src::compiler::bytecode::Bytecode IteratorCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_494c23514ca1bc78_106_getBytecode)
HXLINE( 107)		::String joinedVars = this->vars->join(HX_("+",2b,00,00,00));
HXLINE( 108)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(2)->init(0,joinedVars)->init(1,this->value);
HXDLIN( 108)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> IteratorCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_494c23514ca1bc78_113_reconstruct)
HXDLIN( 113)		::Array< ::String > _hx_tmp = this->vars;
HXDLIN( 113)		 ::src::ast::base::KwdToken _hx_tmp1 =  ::src::ast::base::KwdToken_obj::__alloc( HX_CTX ,HX_("in",e5,5b,00,00));
HXDLIN( 113)		return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,this->value->reconstruct()));
            	}


 ::src::compiler::commands::IteratorCommand IteratorCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_494c23514ca1bc78_20_fromTokens)
HXLINE(  21)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("KwdToken",c1,aa,4a,b9),HX_("in",e5,5b,00,00),null());
HXLINE(  22)		if ((spl->length == (int)1)) {
HXLINE(  22)			HX_STACK_DO_THROW(HX_("No in keyword in iterator value",c7,65,f8,0d));
            		}
            		else {
HXLINE(  23)			if ((spl->length > (int)2)) {
HXLINE(  23)				HX_STACK_DO_THROW(HX_("Double iterator",bd,dc,3c,35));
            			}
            			else {
HXLINE(  25)				::Array< ::Dynamic> lhs = spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  26)				::Array< ::Dynamic> rhs = spl->__get((int)1).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  28)				::Array< ::String > vars = ::Array_obj< ::String >::__new();
HXLINE(  29)				 ::src::ast::Token token;
HXDLIN(  29)				 ::src::ast::Token lastToken = null();
HXLINE(  30)				while((lhs->length > (int)0)){
HXLINE(  31)					token = lhs->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  32)					bool _hx_tmp;
HXDLIN(  32)					if ((token->getName() == HX_("VariableToken",fd,96,04,01))) {
HXLINE(  32)						if (hx::IsNotNull( lastToken )) {
HXLINE(  32)							_hx_tmp = (lastToken->getName() == HX_("CommaToken",04,01,3f,49));
            						}
            						else {
HXLINE(  32)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE(  32)						_hx_tmp = false;
            					}
HXDLIN(  32)					if (_hx_tmp) {
HXLINE(  33)						vars->push(token->getContent());
            					}
            					else {
HXLINE(  34)						bool _hx_tmp1;
HXDLIN(  34)						if ((token->getName() == HX_("CommaToken",04,01,3f,49))) {
HXLINE(  34)							_hx_tmp1 = (lastToken->getName() == HX_("VariableToken",fd,96,04,01));
            						}
            						else {
HXLINE(  34)							_hx_tmp1 = false;
            						}
HXDLIN(  34)						if (!(_hx_tmp1)) {
HXLINE(  35)							::String expected = HX_("VariableToken",fd,96,04,01);
HXLINE(  36)							bool _hx_tmp2;
HXDLIN(  36)							if (hx::IsNotNull( lastToken )) {
HXLINE(  36)								_hx_tmp2 = (lastToken->getName() == HX_("VariableToken",fd,96,04,01));
            							}
            							else {
HXLINE(  36)								_hx_tmp2 = false;
            							}
HXDLIN(  36)							if (_hx_tmp2) {
HXLINE(  36)								expected = HX_("CommaToken",04,01,3f,49);
            							}
HXLINE(  37)							HX_STACK_DO_THROW((((HX_("Expected a ",27,61,3d,99) + expected) + HX_(", found a ",31,aa,e8,9c)) + token->getName()));
            						}
            					}
            				}
HXLINE(  41)				return  ::src::compiler::commands::IteratorCommand_obj::__alloc( HX_CTX ,scope,vars,::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,rhs));
            			}
            		}
HXLINE(  22)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IteratorCommand_obj,fromTokens,return )

 ::src::compiler::commands::IteratorCommand IteratorCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_494c23514ca1bc78_47_fromBytecode)
HXDLIN(  47)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope)->__Field(HX_("split",da,ea,6e,81),hx::paccDynamic)(HX_("+",2b,00,00,00));
HXDLIN(  47)		return  ::src::compiler::commands::IteratorCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(IteratorCommand_obj,fromBytecode,return )


hx::ObjectPtr< IteratorCommand_obj > IteratorCommand_obj::__new( ::src::compiler::Scope scope,::Array< ::String > vars, ::src::compiler::commands::value::ValueCommand value) {
	hx::ObjectPtr< IteratorCommand_obj > __this = new IteratorCommand_obj();
	__this->__construct(scope,vars,value);
	return __this;
}

hx::ObjectPtr< IteratorCommand_obj > IteratorCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::Array< ::String > vars, ::src::compiler::commands::value::ValueCommand value) {
	IteratorCommand_obj *__this = (IteratorCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IteratorCommand_obj), true, "src.compiler.commands.IteratorCommand"));
	*(void **)__this = IteratorCommand_obj::_hx_vtable;
	__this->__construct(scope,vars,value);
	return __this;
}

IteratorCommand_obj::IteratorCommand_obj()
{
}

void IteratorCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IteratorCommand);
	HX_MARK_MEMBER_NAME(iterator,"iterator");
	HX_MARK_MEMBER_NAME(vars,"vars");
	HX_MARK_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IteratorCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iterator,"iterator");
	HX_VISIT_MEMBER_NAME(vars,"vars");
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val IteratorCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { return hx::Val( vars ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool IteratorCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val IteratorCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { vars=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { iterator=inValue.Cast<  ::src::compiler::object::Object >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IteratorCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"));
	outFields->push(HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IteratorCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::object::Object*/ ,(int)offsetof(IteratorCommand_obj,iterator),HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(IteratorCommand_obj,vars),HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(IteratorCommand_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IteratorCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String IteratorCommand_obj_sMemberFields[] = {
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void IteratorCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IteratorCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IteratorCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IteratorCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class IteratorCommand_obj::__mClass;

static ::String IteratorCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void IteratorCommand_obj::__register()
{
	hx::Object *dummy = new IteratorCommand_obj;
	IteratorCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.IteratorCommand","\xdc","\xfd","\x94","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IteratorCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IteratorCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IteratorCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IteratorCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IteratorCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IteratorCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IteratorCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IteratorCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
