// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_src_ast_GlobalProcessor
#include <src/ast/GlobalProcessor.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_RootToken
#include <src/ast/base/RootToken.h>
#endif
#ifndef INCLUDED_src_ast_base_StringToken
#include <src/ast/base/StringToken.h>
#endif
#ifndef INCLUDED_src_ast_base_VariableToken
#include <src/ast/base/VariableToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_StringFormatValueCommand
#include <src/compiler/commands/value/StringFormatValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_VariableAccess
#include <src/compiler/commands/value/VariableAccess.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_28_new,"src.compiler.commands.value.StringFormatValueCommand","new",0x61991a72,"src.compiler.commands.value.StringFormatValueCommand.new","src/compiler/commands/value/StringFormatValueCommand.hx",28,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_73_copy,"src.compiler.commands.value.StringFormatValueCommand","copy",0xfd204163,"src.compiler.commands.value.StringFormatValueCommand.copy","src/compiler/commands/value/StringFormatValueCommand.hx",73,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_86_run,"src.compiler.commands.value.StringFormatValueCommand","run",0x619c315d,"src.compiler.commands.value.StringFormatValueCommand.run","src/compiler/commands/value/StringFormatValueCommand.hx",86,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_98_getName,"src.compiler.commands.value.StringFormatValueCommand","getName",0x076add13,"src.compiler.commands.value.StringFormatValueCommand.getName","src/compiler/commands/value/StringFormatValueCommand.hx",98,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_103_getFriendlyName,"src.compiler.commands.value.StringFormatValueCommand","getFriendlyName",0xf089af1e,"src.compiler.commands.value.StringFormatValueCommand.getFriendlyName","src/compiler/commands/value/StringFormatValueCommand.hx",103,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_108_getBytecode,"src.compiler.commands.value.StringFormatValueCommand","getBytecode",0xc92462fd,"src.compiler.commands.value.StringFormatValueCommand.getBytecode","src/compiler/commands/value/StringFormatValueCommand.hx",108,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_113_reconstruct,"src.compiler.commands.value.StringFormatValueCommand","reconstruct",0xdbb31216,"src.compiler.commands.value.StringFormatValueCommand.reconstruct","src/compiler/commands/value/StringFormatValueCommand.hx",113,0x12e0c19c)
HX_LOCAL_STACK_FRAME(_hx_pos_51dee7b03a9c64d2_19_fromBytecode,"src.compiler.commands.value.StringFormatValueCommand","fromBytecode",0xd1acb36d,"src.compiler.commands.value.StringFormatValueCommand.fromBytecode","src/compiler/commands/value/StringFormatValueCommand.hx",19,0x12e0c19c)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void StringFormatValueCommand_obj::__construct( ::src::compiler::Scope scope,::String content,::cpp::VirtualArray raw){
            	HX_GC_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_28_new)
HXLINE(  29)		super::__construct(scope);
HXLINE(  30)		if (hx::IsNotNull( raw )) {
HXLINE(  30)			this->content = raw;
            		}
            		else {
HXLINE(  32)			this->content = ::cpp::VirtualArray_obj::__new();
HXLINE(  35)			int index = (int)0;
HXLINE(  36)			bool escaped;
HXDLIN(  36)			int i;
HXDLIN(  36)			int end = (int)0;
HXLINE(  37)			while((index > (int)-1)){
HXLINE(  38)				escaped = false;
HXDLIN(  38)				i = (index - (int)1);
HXLINE(  39)				while(true){
HXLINE(  39)					bool _hx_tmp;
HXDLIN(  39)					if ((i >= (int)0)) {
HXLINE(  39)						_hx_tmp = (content.charAt(i) == HX_("\\",5c,00,00,00));
            					}
            					else {
HXLINE(  39)						_hx_tmp = false;
            					}
HXDLIN(  39)					if (!(_hx_tmp)) {
HXLINE(  39)						goto _hx_goto_1;
            					}
HXLINE(  40)					escaped = (escaped == false);
HXLINE(  41)					i = (i - (int)1);
            				}
            				_hx_goto_1:;
HXLINE(  43)				index = content.indexOf(HX_("$",24,00,00,00),end);
HXLINE(  44)				if ((end < (index - (int)1))) {
HXLINE(  45)					if (escaped) {
HXLINE(  45)						::cpp::VirtualArray _hx_tmp1 = this->content;
HXDLIN(  45)						_hx_tmp1->push(::src::compiler::commands::value::ValueCommand_obj::processStringEscapes(content.substring(end,(index - (int)2))));
            					}
            					else {
HXLINE(  46)						::cpp::VirtualArray _hx_tmp2 = this->content;
HXDLIN(  46)						_hx_tmp2->push(::src::compiler::commands::value::ValueCommand_obj::processStringEscapes(content.substring(end,(index - (int)1))));
            					}
            				}
HXLINE(  50)				if (!(escaped)) {
HXLINE(  51)					bool _hx_tmp3;
HXDLIN(  51)					if ((index < (content.length - (int)1))) {
HXLINE(  51)						_hx_tmp3 = (content.charAt((index + (int)1)) == HX_("{",7b,00,00,00));
            					}
            					else {
HXLINE(  51)						_hx_tmp3 = false;
            					}
HXDLIN(  51)					if (_hx_tmp3) {
HXLINE(  52)						end = content.indexOf(HX_("}",7d,00,00,00),index);
HXLINE(  53)						 ::src::ast::base::RootToken token = ::src::ast::GlobalProcessor_obj::process(content.substring((index + (int)2),end));
HXLINE(  54)						 ::src::compiler::commands::value::ValueCommand cmd = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
HXLINE(  55)						this->content->push(cmd);
HXLINE(  56)						end = (end + (int)1);
            					}
            					else {
HXLINE(  58)						end = content.indexOf(HX_(" ",20,00,00,00),index);
HXLINE(  59)						::String name = content.substring((index + (int)1),end);
HXLINE(  60)						 ::src::compiler::commands::value::VariableAccess cmd1 = ::src::compiler::commands::value::VariableAccess_obj::fromTokens(scope,::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,name)),null());
HXLINE(  61)						this->content->push(cmd1);
HXLINE(  62)						end = (end + (int)1);
            					}
            				}
            				else {
HXLINE(  65)					this->content->push(HX_("$",24,00,00,00));
HXLINE(  66)					end = (index + (int)1);
            				}
            			}
            		}
            	}

Dynamic StringFormatValueCommand_obj::__CreateEmpty() { return new StringFormatValueCommand_obj; }

void *StringFormatValueCommand_obj::_hx_vtable = 0;

Dynamic StringFormatValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StringFormatValueCommand_obj > _hx_result = new StringFormatValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool StringFormatValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x109c542c) {
		if (inClassId<=(int)0x1020cfc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
		} else {
			return inClassId==(int)0x109c542c;
		}
	} else {
		return inClassId==(int)0x20538180;
	}
}

 ::src::compiler::commands::Command StringFormatValueCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_73_copy)
HXLINE(  74)		::cpp::VirtualArray newContent = ::cpp::VirtualArray_obj::__new();
HXLINE(  75)		{
HXLINE(  75)			int _g = (int)0;
HXDLIN(  75)			::cpp::VirtualArray _g1 = this->content;
HXDLIN(  75)			while((_g < _g1->get_length())){
HXLINE(  75)				 ::Dynamic x = _g1->__get(_g);
HXDLIN(  75)				_g = (_g + (int)1);
HXLINE(  76)				if (hx::IsNotNull( ( ( ::src::compiler::commands::Command)(::Std_obj::instance(x,hx::ClassOf< ::src::compiler::commands::Command >())) ) )) {
HXLINE(  77)					newContent->push(x->__Field(HX_("copy",b5,bb,c4,41),hx::paccDynamic)(scope));
            				}
            				else {
HXLINE(  79)					newContent->push(x);
            				}
            			}
            		}
HXLINE(  82)		return  ::src::compiler::commands::value::StringFormatValueCommand_obj::__alloc( HX_CTX ,scope,null(),newContent);
            	}


 ::src::compiler::object::Object StringFormatValueCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_86_run)
HXLINE(  87)		::String s = HX_("",00,00,00,00);
HXLINE(  88)		{
HXLINE(  88)			int _g = (int)0;
HXDLIN(  88)			::cpp::VirtualArray _g1 = this->content;
HXDLIN(  88)			while((_g < _g1->get_length())){
HXLINE(  88)				 ::Dynamic el = _g1->__get(_g);
HXDLIN(  88)				_g = (_g + (int)1);
HXLINE(  89)				if (hx::IsEq( ::Type_obj::getClass(el),hx::ClassOf< ::String >() )) {
HXLINE(  89)					s = (s + ::Std_obj::string(el));
            				}
            				else {
HXLINE(  90)					s = (s + ::Std_obj::string(el->__Field(HX_("run",4b,e7,56,00),hx::paccDynamic)()->__Field(HX_("rawString",d9,d0,dc,35),hx::paccDynamic)()));
            				}
            			}
            		}
HXLINE(  92)		return this->scope->getType(HX_("StringType",4b,88,b6,f5),null())->createValue(s,this->scope,null());
            	}


::String StringFormatValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_98_getName)
HXDLIN(  98)		return HX_("StringFormatValueCommand",02,7d,ec,62);
            	}


::String StringFormatValueCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_103_getFriendlyName)
HXDLIN( 103)		return HX_("string format",a6,6a,11,39);
            	}


 ::src::compiler::bytecode::Bytecode StringFormatValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_108_getBytecode)
HXDLIN( 108)		::cpp::VirtualArray _hx_tmp = this->content;
HXDLIN( 108)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> StringFormatValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_113_reconstruct)
HXDLIN( 113)		return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::base::StringToken_obj::__alloc( HX_CTX ,((HX_("f\"",fc,58,00,00) + ::Std_obj::string(this->content)) + HX_("\"",22,00,00,00))));
            	}


 ::src::compiler::commands::value::StringFormatValueCommand StringFormatValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_51dee7b03a9c64d2_19_fromBytecode)
HXLINE(  20)		::cpp::VirtualArray result = ::cpp::VirtualArray_obj::__new();
HXLINE(  21)		while((arr->length > (int)0)){
HXLINE(  21)			result->push(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            		}
HXLINE(  22)		return  ::src::compiler::commands::value::StringFormatValueCommand_obj::__alloc( HX_CTX ,scope,HX_("",00,00,00,00),result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringFormatValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< StringFormatValueCommand_obj > StringFormatValueCommand_obj::__new( ::src::compiler::Scope scope,::String content,::cpp::VirtualArray raw) {
	hx::ObjectPtr< StringFormatValueCommand_obj > __this = new StringFormatValueCommand_obj();
	__this->__construct(scope,content,raw);
	return __this;
}

hx::ObjectPtr< StringFormatValueCommand_obj > StringFormatValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::String content,::cpp::VirtualArray raw) {
	StringFormatValueCommand_obj *__this = (StringFormatValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StringFormatValueCommand_obj), true, "src.compiler.commands.value.StringFormatValueCommand"));
	*(void **)__this = StringFormatValueCommand_obj::_hx_vtable;
	__this->__construct(scope,content,raw);
	return __this;
}

StringFormatValueCommand_obj::StringFormatValueCommand_obj()
{
}

void StringFormatValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringFormatValueCommand);
	HX_MARK_MEMBER_NAME(content,"content");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StringFormatValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(content,"content");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val StringFormatValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return hx::Val( content ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StringFormatValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val StringFormatValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringFormatValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("content","\x39","\x8d","\x77","\x19"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StringFormatValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(StringFormatValueCommand_obj,content),HX_HCSTRING("content","\x39","\x8d","\x77","\x19")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StringFormatValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String StringFormatValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("content","\x39","\x8d","\x77","\x19"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void StringFormatValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringFormatValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringFormatValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringFormatValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class StringFormatValueCommand_obj::__mClass;

static ::String StringFormatValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void StringFormatValueCommand_obj::__register()
{
	hx::Object *dummy = new StringFormatValueCommand_obj;
	StringFormatValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.StringFormatValueCommand","\x80","\xb9","\x42","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringFormatValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StringFormatValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StringFormatValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StringFormatValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StringFormatValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringFormatValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringFormatValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringFormatValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
