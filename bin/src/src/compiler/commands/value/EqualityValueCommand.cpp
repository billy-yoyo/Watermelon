// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_script_EqualityOperatorToken
#include <src/ast/script/EqualityOperatorToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_EqualityValueCommand
#include <src/compiler/commands/value/EqualityValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_42_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",42,0x023bf9ca)
HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_51_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",51,0x023bf9ca)
HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_55_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",55,0x023bf9ca)
HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_59_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",59,0x023bf9ca)
HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_63_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",63,0x023bf9ca)
HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_67_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",67,0x023bf9ca)
HX_DEFINE_STACK_FRAME(_hx_pos_2ea93a285f1060b0_71_new,"src.compiler.commands.value.EqualityValueCommand","new",0xd3d62384,"src.compiler.commands.value.EqualityValueCommand.new","src/compiler/commands/value/EqualityValueCommand.hx",71,0x023bf9ca)
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_80_walk,"src.compiler.commands.value.EqualityValueCommand","walk",0x8d78c965,"src.compiler.commands.value.EqualityValueCommand.walk","src/compiler/commands/value/EqualityValueCommand.hx",80,0x023bf9ca)
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_87_run,"src.compiler.commands.value.EqualityValueCommand","run",0xd3d93a6f,"src.compiler.commands.value.EqualityValueCommand.run","src/compiler/commands/value/EqualityValueCommand.hx",87,0x023bf9ca)
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_102_getName,"src.compiler.commands.value.EqualityValueCommand","getName",0xd496d725,"src.compiler.commands.value.EqualityValueCommand.getName","src/compiler/commands/value/EqualityValueCommand.hx",102,0x023bf9ca)
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_106_getBytecode,"src.compiler.commands.value.EqualityValueCommand","getBytecode",0x920bce0f,"src.compiler.commands.value.EqualityValueCommand.getBytecode","src/compiler/commands/value/EqualityValueCommand.hx",106,0x023bf9ca)
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_117_reconstruct,"src.compiler.commands.value.EqualityValueCommand","reconstruct",0xa49a7d28,"src.compiler.commands.value.EqualityValueCommand.reconstruct","src/compiler/commands/value/EqualityValueCommand.hx",117,0x023bf9ca)
static const ::String _hx_array_data_dd1d5192_18[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_18_fromTokens,"src.compiler.commands.value.EqualityValueCommand","fromTokens",0xbc0135c0,"src.compiler.commands.value.EqualityValueCommand.fromTokens","src/compiler/commands/value/EqualityValueCommand.hx",18,0x023bf9ca)
static const ::String _hx_array_data_dd1d5192_21[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2ea93a285f1060b0_35_fromBytecode,"src.compiler.commands.value.EqualityValueCommand","fromBytecode",0xd342f81b,"src.compiler.commands.value.EqualityValueCommand.fromBytecode","src/compiler/commands/value/EqualityValueCommand.hx",35,0x023bf9ca)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void EqualityValueCommand_obj::__construct( ::src::compiler::Scope scope,::Array< ::Dynamic> values,::Array< int > operators){
            	HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_42_new)
HXLINE(  43)		super::__construct(scope);
HXLINE(  44)		this->values = values;
HXLINE(  45)		this->checkers = ::Array_obj< ::Dynamic>::__new();
HXLINE(  46)		this->_operators = operators;
HXLINE(  47)		int _hx_tmp = this->values->length;
HXDLIN(  47)		if ((_hx_tmp != (operators->length + (int)1))) {
HXLINE(  47)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid amount of operators and values",c6,5e,1a,2f)));
            		}
HXLINE(  48)		{
HXLINE(  48)			int _g = (int)0;
HXDLIN(  48)			while((_g < operators->length)){
HXLINE(  48)				int _hx_operator = operators->__get(_g);
HXDLIN(  48)				_g = (_g + (int)1);
HXLINE(  49)				if ((_hx_operator == (int)0)) {
            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            					bool _hx_run( ::src::compiler::object::Object left, ::src::compiler::object::Object right){
            						HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_51_new)
HXLINE(  51)						return left->eq(right)->rawBool();
            					}
            					HX_END_LOCAL_FUNC2(return)

HXLINE(  50)					this->checkers->push( ::Dynamic(new _hx_Closure_0()));
            				}
            				else {
HXLINE(  53)					if ((_hx_operator == (int)1)) {
            						HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            						bool _hx_run( ::src::compiler::object::Object left1, ::src::compiler::object::Object right1){
            							HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_55_new)
HXLINE(  55)							return left1->neq(right1)->rawBool();
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE(  54)						this->checkers->push( ::Dynamic(new _hx_Closure_1()));
            					}
            					else {
HXLINE(  57)						if ((_hx_operator == (int)2)) {
            							HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            							bool _hx_run( ::src::compiler::object::Object left2, ::src::compiler::object::Object right2){
            								HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_59_new)
HXLINE(  59)								return left2->greq(right2)->rawBool();
            							}
            							HX_END_LOCAL_FUNC2(return)

HXLINE(  58)							this->checkers->push( ::Dynamic(new _hx_Closure_2()));
            						}
            						else {
HXLINE(  61)							if ((_hx_operator == (int)3)) {
            								HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            								bool _hx_run( ::src::compiler::object::Object left3, ::src::compiler::object::Object right3){
            									HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_63_new)
HXLINE(  63)									return left3->lseq(right3)->rawBool();
            								}
            								HX_END_LOCAL_FUNC2(return)

HXLINE(  62)								this->checkers->push( ::Dynamic(new _hx_Closure_3()));
            							}
            							else {
HXLINE(  65)								if ((_hx_operator == (int)4)) {
            									HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(2)
            									bool _hx_run( ::src::compiler::object::Object left4, ::src::compiler::object::Object right4){
            										HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_67_new)
HXLINE(  67)										return left4->ls(right4)->rawBool();
            									}
            									HX_END_LOCAL_FUNC2(return)

HXLINE(  66)									this->checkers->push( ::Dynamic(new _hx_Closure_4()));
            								}
            								else {
HXLINE(  69)									if ((_hx_operator == (int)5)) {
            										HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            										bool _hx_run( ::src::compiler::object::Object left5, ::src::compiler::object::Object right5){
            											HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_71_new)
HXLINE(  71)											return left5->gr(right5)->rawBool();
            										}
            										HX_END_LOCAL_FUNC2(return)

HXLINE(  70)										this->checkers->push( ::Dynamic(new _hx_Closure_5()));
            									}
            									else {
HXLINE(  74)										HX_STACK_DO_THROW((HX_("Invalid operator ",73,a5,0f,c3) + _hx_operator));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic EqualityValueCommand_obj::__CreateEmpty() { return new EqualityValueCommand_obj; }

void *EqualityValueCommand_obj::_hx_vtable = 0;

Dynamic EqualityValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EqualityValueCommand_obj > _hx_result = new EqualityValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool EqualityValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1020cfc0) {
		if (inClassId<=(int)0x0b7940a2) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b7940a2;
		} else {
			return inClassId==(int)0x1020cfc0;
		}
	} else {
		return inClassId==(int)0x20538180;
	}
}

::Array< ::Dynamic> EqualityValueCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_2ea93a285f1060b0_80_walk)
HXLINE(  81)		::Array< ::Dynamic> cmds = ::Array_obj< ::Dynamic>::__new();
HXLINE(  82)		{
HXLINE(  82)			int _g = (int)0;
HXDLIN(  82)			::Array< ::Dynamic> _g1 = this->values;
HXDLIN(  82)			while((_g < _g1->length)){
HXLINE(  82)				 ::src::compiler::commands::value::ValueCommand x = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  82)				_g = (_g + (int)1);
HXDLIN(  82)				cmds->push(x);
            			}
            		}
HXLINE(  83)		return cmds;
            	}


 ::src::compiler::object::Object EqualityValueCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_2ea93a285f1060b0_87_run)
HXLINE(  88)		bool result = true;
HXLINE(  89)		 ::src::compiler::object::Object lastObj = this->values->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXDLIN(  89)		 ::src::compiler::object::Object obj;
HXLINE(  90)		{
HXLINE(  90)			int _g1 = (int)1;
HXDLIN(  90)			int _g = this->values->length;
HXDLIN(  90)			while((_g1 < _g)){
HXLINE(  90)				_g1 = (_g1 + (int)1);
HXDLIN(  90)				int i = (_g1 - (int)1);
HXLINE(  91)				obj = this->values->__get(i).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE(  92)				::Array< ::Dynamic> _hx_tmp = this->checkers;
HXDLIN(  92)				if (!(( (bool)(_hx_tmp->__get((i - (int)1))(lastObj,obj)) ))) {
HXLINE(  93)					result = false;
HXLINE(  94)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
HXLINE(  97)		return this->scope->getType(HX_("BoolType",24,bc,95,8f),null())->createValue(result,null());
            	}


::String EqualityValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_2ea93a285f1060b0_102_getName)
HXDLIN( 102)		return HX_("EqualityValueCommand",14,ac,fa,7d);
            	}


 ::src::compiler::bytecode::Bytecode EqualityValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_2ea93a285f1060b0_106_getBytecode)
HXLINE( 107)		::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 108)		arr->push(this->values->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >());
HXLINE( 109)		{
HXLINE( 109)			int _g1 = (int)0;
HXDLIN( 109)			int _g = this->_operators->length;
HXDLIN( 109)			while((_g1 < _g)){
HXLINE( 109)				_g1 = (_g1 + (int)1);
HXDLIN( 109)				int i = (_g1 - (int)1);
HXLINE( 110)				arr->push(this->_operators->__get(i));
HXLINE( 111)				::Array< ::Dynamic> _hx_tmp = this->values;
HXDLIN( 111)				arr->push(_hx_tmp->__get((i + (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >());
            			}
            		}
HXLINE( 113)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(arr,this->getCodeID());
            	}


::Array< ::Dynamic> EqualityValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_117_reconstruct)
HXLINE( 118)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 119)		::Array< ::Dynamic> values = this->values->copy();
HXLINE( 120)		::Array< ::String > operators = ::Array_obj< ::String >::__new();
HXLINE( 121)		{
HXLINE( 121)			int _g = (int)0;
HXDLIN( 121)			::Array< int > _g1 = this->_operators;
HXDLIN( 121)			while((_g < _g1->length)){
HXLINE( 121)				int op = _g1->__get(_g);
HXDLIN( 121)				_g = (_g + (int)1);
HXDLIN( 121)				operators->push(::Array_obj< ::String >::fromData( _hx_array_data_dd1d5192_18,6)->__get(op));
            			}
            		}
HXLINE( 122)		tokens->concat(values->shift().StaticCast<  ::src::compiler::commands::value::ValueCommand >()->reconstruct());
HXLINE( 123)		while((values->length > (int)0)){
HXLINE( 124)			tokens->push( ::src::ast::script::EqualityOperatorToken_obj::__alloc( HX_CTX ,operators->shift()));
HXLINE( 125)			tokens->concat(values->shift().StaticCast<  ::src::compiler::commands::value::ValueCommand >()->reconstruct());
            		}
HXLINE( 127)		return tokens;
            	}


 ::src::compiler::commands::value::EqualityValueCommand EqualityValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_18_fromTokens)
HXLINE(  19)		::Array< int > operators = ::Array_obj< int >::__new();
HXLINE(  20)		{
HXLINE(  20)			int _g = (int)0;
HXDLIN(  20)			while((_g < tokens->length)){
HXLINE(  20)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  20)				_g = (_g + (int)1);
HXLINE(  21)				if ((token->getName() == HX_("EqualityOperatorToken",3b,c5,40,33))) {
HXLINE(  22)					operators->push(::Array_obj< ::String >::fromData( _hx_array_data_dd1d5192_21,6)->indexOf(token->getContent(),null()));
            				}
            			}
            		}
HXLINE(  26)		::Array< ::Dynamic> values = ::src::compiler::commands::value::ValueCommand_obj::splitTokens(scope,tokens,HX_("EqualityOperatorToken",3b,c5,40,33),null(),null());
HXLINE(  27)		if ((values->length == (int)1)) {
HXLINE(  27)			HX_STACK_DO_THROW(HX_("Single value in equality",ee,43,c1,53));
            		}
            		else {
HXLINE(  29)			return  ::src::compiler::commands::value::EqualityValueCommand_obj::__alloc( HX_CTX ,scope,values,operators);
            		}
HXLINE(  27)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(EqualityValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::EqualityValueCommand EqualityValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_2ea93a285f1060b0_35_fromBytecode)
HXDLIN(  35)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  35)		return  ::src::compiler::commands::value::EqualityValueCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(EqualityValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< EqualityValueCommand_obj > EqualityValueCommand_obj::__new( ::src::compiler::Scope scope,::Array< ::Dynamic> values,::Array< int > operators) {
	hx::ObjectPtr< EqualityValueCommand_obj > __this = new EqualityValueCommand_obj();
	__this->__construct(scope,values,operators);
	return __this;
}

hx::ObjectPtr< EqualityValueCommand_obj > EqualityValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::Array< ::Dynamic> values,::Array< int > operators) {
	EqualityValueCommand_obj *__this = (EqualityValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EqualityValueCommand_obj), true, "src.compiler.commands.value.EqualityValueCommand"));
	*(void **)__this = EqualityValueCommand_obj::_hx_vtable;
	__this->__construct(scope,values,operators);
	return __this;
}

EqualityValueCommand_obj::EqualityValueCommand_obj()
{
}

void EqualityValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EqualityValueCommand);
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(checkers,"checkers");
	HX_MARK_MEMBER_NAME(_operators,"_operators");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EqualityValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(checkers,"checkers");
	HX_VISIT_MEMBER_NAME(_operators,"_operators");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val EqualityValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"checkers") ) { return hx::Val( checkers ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_operators") ) { return hx::Val( _operators ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EqualityValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val EqualityValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"checkers") ) { checkers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_operators") ) { _operators=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EqualityValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("checkers","\x9e","\x1b","\xf8","\xac"));
	outFields->push(HX_HCSTRING("_operators","\x10","\x90","\xe7","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EqualityValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(EqualityValueCommand_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(EqualityValueCommand_obj,checkers),HX_HCSTRING("checkers","\x9e","\x1b","\xf8","\xac")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(EqualityValueCommand_obj,_operators),HX_HCSTRING("_operators","\x10","\x90","\xe7","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EqualityValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String EqualityValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("checkers","\x9e","\x1b","\xf8","\xac"),
	HX_HCSTRING("_operators","\x10","\x90","\xe7","\xfb"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void EqualityValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EqualityValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EqualityValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EqualityValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class EqualityValueCommand_obj::__mClass;

static ::String EqualityValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void EqualityValueCommand_obj::__register()
{
	hx::Object *dummy = new EqualityValueCommand_obj;
	EqualityValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.EqualityValueCommand","\x92","\x51","\x1d","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EqualityValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EqualityValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(EqualityValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EqualityValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EqualityValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EqualityValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EqualityValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EqualityValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
