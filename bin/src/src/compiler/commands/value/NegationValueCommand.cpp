// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_maths_MathsOperatorToken
#include <src/ast/maths/MathsOperatorToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_NegationValueCommand
#include <src/compiler/commands/value/NegationValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_30_new,"src.compiler.commands.value.NegationValueCommand","new",0x5a07feef,"src.compiler.commands.value.NegationValueCommand.new","src/compiler/commands/value/NegationValueCommand.hx",30,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_37_copy,"src.compiler.commands.value.NegationValueCommand","copy",0x65b94a46,"src.compiler.commands.value.NegationValueCommand.copy","src/compiler/commands/value/NegationValueCommand.hx",37,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_41_setScope,"src.compiler.commands.value.NegationValueCommand","setScope",0x187b85a3,"src.compiler.commands.value.NegationValueCommand.setScope","src/compiler/commands/value/NegationValueCommand.hx",41,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_48_getName,"src.compiler.commands.value.NegationValueCommand","getName",0x24324410,"src.compiler.commands.value.NegationValueCommand.getName","src/compiler/commands/value/NegationValueCommand.hx",48,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_53_getFriendlyName,"src.compiler.commands.value.NegationValueCommand","getFriendlyName",0x54bbdb1b,"src.compiler.commands.value.NegationValueCommand.getFriendlyName","src/compiler/commands/value/NegationValueCommand.hx",53,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_58_run,"src.compiler.commands.value.NegationValueCommand","run",0x5a0b15da,"src.compiler.commands.value.NegationValueCommand.run","src/compiler/commands/value/NegationValueCommand.hx",58,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_63_getBytecode,"src.compiler.commands.value.NegationValueCommand","getBytecode",0xe0f78c7a,"src.compiler.commands.value.NegationValueCommand.getBytecode","src/compiler/commands/value/NegationValueCommand.hx",63,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_67_reconstruct,"src.compiler.commands.value.NegationValueCommand","reconstruct",0xf3863b93,"src.compiler.commands.value.NegationValueCommand.reconstruct","src/compiler/commands/value/NegationValueCommand.hx",67,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_17_fromTokens,"src.compiler.commands.value.NegationValueCommand","fromTokens",0xdda66db5,"src.compiler.commands.value.NegationValueCommand.fromTokens","src/compiler/commands/value/NegationValueCommand.hx",17,0xa38db4bf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb4fc67ac2a1d529_25_fromBytecode,"src.compiler.commands.value.NegationValueCommand","fromBytecode",0x929dd750,"src.compiler.commands.value.NegationValueCommand.fromBytecode","src/compiler/commands/value/NegationValueCommand.hx",25,0xa38db4bf)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void NegationValueCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand value){
            	HX_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_30_new)
HXLINE(  31)		super::__construct(scope);
HXLINE(  32)		this->value = value;
            	}

Dynamic NegationValueCommand_obj::__CreateEmpty() { return new NegationValueCommand_obj; }

void *NegationValueCommand_obj::_hx_vtable = 0;

Dynamic NegationValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NegationValueCommand_obj > _hx_result = new NegationValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NegationValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		if (inClassId<=(int)0x1020cfc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
		} else {
			return inClassId==(int)0x20538180;
		}
	} else {
		return inClassId==(int)0x6af815c5;
	}
}

 ::src::compiler::commands::Command NegationValueCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_37_copy)
HXDLIN(  37)		return  ::src::compiler::commands::value::NegationValueCommand_obj::__alloc( HX_CTX ,scope,this->value->copy(scope));
            	}


void NegationValueCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_41_setScope)
HXLINE(  42)		this->super::setScope(scope);
HXLINE(  43)		this->value->setScope(scope);
            	}


::String NegationValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_48_getName)
HXDLIN(  48)		return HX_("NegationValueCommand",ff,b5,49,46);
            	}


::String NegationValueCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_53_getFriendlyName)
HXDLIN(  53)		return HX_("negation",65,20,42,51);
            	}


 ::src::compiler::object::Object NegationValueCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_58_run)
HXDLIN(  58)		return this->value->run()->negate();
            	}


 ::src::compiler::bytecode::Bytecode NegationValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_63_getBytecode)
HXDLIN(  63)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(1)->init(0,this->value);
HXDLIN(  63)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> NegationValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_67_reconstruct)
HXLINE(  68)		::Array< ::Dynamic> tokens = this->value->reconstruct();
HXLINE(  69)		tokens->insert((int)0, ::src::ast::maths::MathsOperatorToken_obj::__alloc( HX_CTX ,HX_("-",2d,00,00,00)));
HXLINE(  70)		return tokens;
            	}


 ::src::compiler::commands::value::NegationValueCommand NegationValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_17_fromTokens)
HXLINE(  18)		 ::src::ast::Token token = tokens->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  19)		bool _hx_tmp;
HXDLIN(  19)		if ((token->getName() == HX_("MathsOperatorToken",2a,dc,94,41))) {
HXLINE(  19)			_hx_tmp = hx::IsNotEq( token->getContent(),HX_("-",2d,00,00,00) );
            		}
            		else {
HXLINE(  19)			_hx_tmp = true;
            		}
HXDLIN(  19)		if (_hx_tmp) {
HXLINE(  19)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Negative sign must be at the start of the expression",94,62,94,d4)));
            		}
HXLINE(  20)		return  ::src::compiler::commands::value::NegationValueCommand_obj::__alloc( HX_CTX ,scope,::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,tokens));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NegationValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::NegationValueCommand NegationValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_fb4fc67ac2a1d529_25_fromBytecode)
HXDLIN(  25)		return  ::src::compiler::commands::value::NegationValueCommand_obj::__alloc( HX_CTX ,scope,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NegationValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< NegationValueCommand_obj > NegationValueCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand value) {
	hx::ObjectPtr< NegationValueCommand_obj > __this = new NegationValueCommand_obj();
	__this->__construct(scope,value);
	return __this;
}

hx::ObjectPtr< NegationValueCommand_obj > NegationValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand value) {
	NegationValueCommand_obj *__this = (NegationValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NegationValueCommand_obj), true, "src.compiler.commands.value.NegationValueCommand"));
	*(void **)__this = NegationValueCommand_obj::_hx_vtable;
	__this->__construct(scope,value);
	return __this;
}

NegationValueCommand_obj::NegationValueCommand_obj()
{
}

void NegationValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NegationValueCommand);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NegationValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val NegationValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NegationValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val NegationValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NegationValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NegationValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(NegationValueCommand_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NegationValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String NegationValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void NegationValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NegationValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NegationValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NegationValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class NegationValueCommand_obj::__mClass;

static ::String NegationValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void NegationValueCommand_obj::__register()
{
	hx::Object *dummy = new NegationValueCommand_obj;
	NegationValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.NegationValueCommand","\x7d","\x5b","\x6c","\xa5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NegationValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NegationValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NegationValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NegationValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NegationValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NegationValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NegationValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NegationValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
