// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_SpliceToken
#include <src/ast/base/SpliceToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_SpliceValueCommand
#include <src/compiler/commands/value/SpliceValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_SpliceObject
#include <src/compiler/object/builtin/SpliceObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_45_new,"src.compiler.commands.value.SpliceValueCommand","new",0x5ad83e86,"src.compiler.commands.value.SpliceValueCommand.new","src/compiler/commands/value/SpliceValueCommand.hx",45,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_54_copy,"src.compiler.commands.value.SpliceValueCommand","copy",0x1b20aecf,"src.compiler.commands.value.SpliceValueCommand.copy","src/compiler/commands/value/SpliceValueCommand.hx",54,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_58_setScope,"src.compiler.commands.value.SpliceValueCommand","setScope",0x014a62ac,"src.compiler.commands.value.SpliceValueCommand.setScope","src/compiler/commands/value/SpliceValueCommand.hx",58,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_67_getName,"src.compiler.commands.value.SpliceValueCommand","getName",0xfd0f9b27,"src.compiler.commands.value.SpliceValueCommand.getName","src/compiler/commands/value/SpliceValueCommand.hx",67,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_72_getFriendlyName,"src.compiler.commands.value.SpliceValueCommand","getFriendlyName",0xd0f8a132,"src.compiler.commands.value.SpliceValueCommand.getFriendlyName","src/compiler/commands/value/SpliceValueCommand.hx",72,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_76_run,"src.compiler.commands.value.SpliceValueCommand","run",0x5adb5571,"src.compiler.commands.value.SpliceValueCommand.run","src/compiler/commands/value/SpliceValueCommand.hx",76,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_86_getBytecode,"src.compiler.commands.value.SpliceValueCommand","getBytecode",0x0703bb11,"src.compiler.commands.value.SpliceValueCommand.getBytecode","src/compiler/commands/value/SpliceValueCommand.hx",86,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_90_reconstruct,"src.compiler.commands.value.SpliceValueCommand","reconstruct",0x19926a2a,"src.compiler.commands.value.SpliceValueCommand.reconstruct","src/compiler/commands/value/SpliceValueCommand.hx",90,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_19_fromTokens,"src.compiler.commands.value.SpliceValueCommand","fromTokens",0xbdad5efe,"src.compiler.commands.value.SpliceValueCommand.fromTokens","src/compiler/commands/value/SpliceValueCommand.hx",19,0xab980188)
HX_LOCAL_STACK_FRAME(_hx_pos_3c000ba27b23e2b0_38_fromBytecode,"src.compiler.commands.value.SpliceValueCommand","fromBytecode",0xb73a6cd9,"src.compiler.commands.value.SpliceValueCommand.fromBytecode","src/compiler/commands/value/SpliceValueCommand.hx",38,0xab980188)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void SpliceValueCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand start, ::src::compiler::commands::value::ValueCommand end, ::src::compiler::commands::value::ValueCommand step){
            	HX_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_45_new)
HXLINE(  46)		super::__construct(scope);
HXLINE(  47)		this->start = start;
HXLINE(  48)		this->end = end;
HXLINE(  49)		this->step = step;
            	}

Dynamic SpliceValueCommand_obj::__CreateEmpty() { return new SpliceValueCommand_obj; }

void *SpliceValueCommand_obj::_hx_vtable = 0;

Dynamic SpliceValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpliceValueCommand_obj > _hx_result = new SpliceValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SpliceValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		if (inClassId<=(int)0x1020cfc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
		} else {
			return inClassId==(int)0x20538180;
		}
	} else {
		return inClassId==(int)0x7cd05bdc;
	}
}

 ::src::compiler::commands::Command SpliceValueCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_54_copy)
HXDLIN(  54)		 ::src::compiler::commands::value::ValueCommand _hx_tmp;
HXDLIN(  54)		if (hx::IsNull( this->start )) {
HXDLIN(  54)			_hx_tmp = null();
            		}
            		else {
HXDLIN(  54)			_hx_tmp = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->start->copy(scope));
            		}
HXDLIN(  54)		 ::src::compiler::commands::value::ValueCommand _hx_tmp1;
HXDLIN(  54)		if (hx::IsNull( this->end )) {
HXDLIN(  54)			_hx_tmp1 = null();
            		}
            		else {
HXDLIN(  54)			_hx_tmp1 = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->end->copy(scope));
            		}
HXDLIN(  54)		 ::src::compiler::commands::value::ValueCommand _hx_tmp2;
HXDLIN(  54)		if (hx::IsNull( this->step )) {
HXDLIN(  54)			_hx_tmp2 = null();
            		}
            		else {
HXDLIN(  54)			_hx_tmp2 = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->step->copy(scope));
            		}
HXDLIN(  54)		return  ::src::compiler::commands::value::SpliceValueCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,_hx_tmp2);
            	}


void SpliceValueCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_58_setScope)
HXLINE(  59)		this->super::setScope(scope);
HXLINE(  60)		if (hx::IsNotNull( this->start )) {
HXLINE(  60)			this->start->setScope(scope);
            		}
HXLINE(  61)		if (hx::IsNotNull( this->end )) {
HXLINE(  61)			this->end->setScope(scope);
            		}
HXLINE(  62)		if (hx::IsNotNull( this->step )) {
HXLINE(  62)			this->step->setScope(scope);
            		}
            	}


::String SpliceValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_67_getName)
HXDLIN(  67)		return HX_("SpliceValueCommand",96,99,8b,84);
            	}


::String SpliceValueCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_72_getFriendlyName)
HXDLIN(  72)		return HX_("splice",7c,85,9e,bf);
            	}


 ::src::compiler::object::Object SpliceValueCommand_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_76_run)
HXLINE(  77)		int start = (int)0;
HXDLIN(  77)		int end = (int)0;
HXDLIN(  77)		int step = (int)1;
HXLINE(  78)		if (hx::IsNotNull( this->start )) {
HXLINE(  78)			start = this->start->run()->rawInt();
            		}
HXLINE(  79)		if (hx::IsNotNull( this->step )) {
HXLINE(  79)			step = this->step->run()->rawInt();
            		}
HXLINE(  80)		if (hx::IsNotNull( this->end )) {
HXLINE(  80)			end = this->end->run()->rawInt();
            		}
HXLINE(  81)		 ::src::compiler::Scope _hx_tmp = this->scope;
HXDLIN(  81)		 ::src::compiler::object::ObjectType _hx_tmp1 = this->scope->getType(HX_("SpliceType",76,16,08,c6),null());
HXDLIN(  81)		bool _hx_tmp2 = hx::IsNotNull( this->start );
HXDLIN(  81)		bool _hx_tmp3 = hx::IsNotNull( this->end );
HXDLIN(  81)		return  ::src::compiler::object::builtin::SpliceObject_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,start,end,step,_hx_tmp2,_hx_tmp3,hx::IsNotNull( this->step ));
            	}


 ::src::compiler::bytecode::Bytecode SpliceValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_86_getBytecode)
HXDLIN(  86)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(3)->init(0,this->start)->init(1,this->end)->init(2,this->step);
HXDLIN(  86)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> SpliceValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_90_reconstruct)
HXLINE(  91)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE(  92)		if (hx::IsNotNull( this->start )) {
HXLINE(  92)			tokens = tokens->concat(this->start->reconstruct());
            		}
HXLINE(  93)		tokens->push( ::src::ast::base::SpliceToken_obj::__alloc( HX_CTX ,HX_(":",3a,00,00,00)));
HXLINE(  94)		if (hx::IsNotNull( this->end )) {
HXLINE(  94)			tokens = tokens->concat(this->end->reconstruct());
            		}
HXLINE(  95)		tokens->push( ::src::ast::base::SpliceToken_obj::__alloc( HX_CTX ,HX_(":",3a,00,00,00)));
HXLINE(  96)		if (hx::IsNotNull( this->step )) {
HXLINE(  96)			tokens = tokens->concat(this->step->reconstruct());
            		}
HXLINE(  97)		return tokens;
            	}


 ::src::compiler::commands::value::SpliceValueCommand SpliceValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_19_fromTokens)
HXLINE(  20)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("SpliceToken",bd,a3,6b,7a),null(),null());
HXLINE(  21)		if ((spl->length == (int)1)) {
HXLINE(  21)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Splice must have at least two values",d5,75,5f,db)));
            		}
HXLINE(  22)		if ((spl->length > (int)3)) {
HXLINE(  22)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Splice can have a max of 3 values",79,e9,19,76)));
            		}
HXLINE(  24)		 ::src::compiler::commands::value::ValueCommand start = null();
HXLINE(  25)		if ((spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->length > (int)0)) {
HXLINE(  25)			start = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >());
            		}
HXLINE(  27)		 ::src::compiler::commands::value::ValueCommand end = null();
HXLINE(  28)		if ((spl->__get((int)1).StaticCast< ::Array< ::Dynamic> >()->length > (int)0)) {
HXLINE(  28)			end = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,spl->__get((int)1).StaticCast< ::Array< ::Dynamic> >());
            		}
HXLINE(  30)		 ::src::compiler::commands::value::ValueCommand step = null();
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		if ((spl->length > (int)2)) {
HXLINE(  31)			_hx_tmp = (spl->__get((int)2).StaticCast< ::Array< ::Dynamic> >()->length > (int)0);
            		}
            		else {
HXLINE(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  31)			step = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,spl->__get((int)2).StaticCast< ::Array< ::Dynamic> >());
            		}
HXLINE(  33)		return  ::src::compiler::commands::value::SpliceValueCommand_obj::__alloc( HX_CTX ,scope,start,end,step);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SpliceValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::SpliceValueCommand SpliceValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_3c000ba27b23e2b0_38_fromBytecode)
HXDLIN(  38)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  38)		 ::Dynamic _hx_tmp1 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  38)		return  ::src::compiler::commands::value::SpliceValueCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SpliceValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< SpliceValueCommand_obj > SpliceValueCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand start, ::src::compiler::commands::value::ValueCommand end, ::src::compiler::commands::value::ValueCommand step) {
	hx::ObjectPtr< SpliceValueCommand_obj > __this = new SpliceValueCommand_obj();
	__this->__construct(scope,start,end,step);
	return __this;
}

hx::ObjectPtr< SpliceValueCommand_obj > SpliceValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand start, ::src::compiler::commands::value::ValueCommand end, ::src::compiler::commands::value::ValueCommand step) {
	SpliceValueCommand_obj *__this = (SpliceValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpliceValueCommand_obj), true, "src.compiler.commands.value.SpliceValueCommand"));
	*(void **)__this = SpliceValueCommand_obj::_hx_vtable;
	__this->__construct(scope,start,end,step);
	return __this;
}

SpliceValueCommand_obj::SpliceValueCommand_obj()
{
}

void SpliceValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpliceValueCommand);
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(step,"step");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SpliceValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(step,"step");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SpliceValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SpliceValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val SpliceValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { step=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpliceValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SpliceValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(SpliceValueCommand_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(SpliceValueCommand_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(SpliceValueCommand_obj,step),HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpliceValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String SpliceValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void SpliceValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpliceValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpliceValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpliceValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class SpliceValueCommand_obj::__mClass;

static ::String SpliceValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void SpliceValueCommand_obj::__register()
{
	hx::Object *dummy = new SpliceValueCommand_obj;
	SpliceValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.SpliceValueCommand","\x94","\x43","\x71","\x1f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SpliceValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpliceValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SpliceValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpliceValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpliceValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpliceValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpliceValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpliceValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
