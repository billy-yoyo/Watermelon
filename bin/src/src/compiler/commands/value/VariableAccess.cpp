// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_AccessToken
#include <src/ast/base/AccessToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_VariableNamePool
#include <src/compiler/VariableNamePool.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_LiteralValueCommand
#include <src/compiler/commands/value/LiteralValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_VariableAccess
#include <src/compiler/commands/value/VariableAccess.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_BoolObject
#include <src/compiler/object/builtin/BoolObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ValuedObject
#include <src/compiler/object/builtin/ValuedObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_InvalidFieldAccessSignal
#include <src/compiler/signals/InvalidFieldAccessSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_abbb7cf773e777fc_55_new,"src.compiler.commands.value.VariableAccess","new",0x7ef96010,"src.compiler.commands.value.VariableAccess.new","src/compiler/commands/value/VariableAccess.hx",55,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_88_getVars,"src.compiler.commands.value.VariableAccess","getVars",0xf96b0312,"src.compiler.commands.value.VariableAccess.getVars","src/compiler/commands/value/VariableAccess.hx",88,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_92_walk,"src.compiler.commands.value.VariableAccess","walk",0xa12a8759,"src.compiler.commands.value.VariableAccess.walk","src/compiler/commands/value/VariableAccess.hx",92,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_99_getVariable,"src.compiler.commands.value.VariableAccess","getVariable",0x9a4594a2,"src.compiler.commands.value.VariableAccess.getVariable","src/compiler/commands/value/VariableAccess.hx",99,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_117_setVariable,"src.compiler.commands.value.VariableAccess","setVariable",0xa4b29bae,"src.compiler.commands.value.VariableAccess.setVariable","src/compiler/commands/value/VariableAccess.hx",117,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_137_deleteVariable,"src.compiler.commands.value.VariableAccess","deleteVariable",0xce365fd7,"src.compiler.commands.value.VariableAccess.deleteVariable","src/compiler/commands/value/VariableAccess.hx",137,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_158_getName,"src.compiler.commands.value.VariableAccess","getName",0xf42149b1,"src.compiler.commands.value.VariableAccess.getName","src/compiler/commands/value/VariableAccess.hx",158,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_170_getBytecode,"src.compiler.commands.value.VariableAccess","getBytecode",0x88d0769b,"src.compiler.commands.value.VariableAccess.getBytecode","src/compiler/commands/value/VariableAccess.hx",170,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_175_reconstruct,"src.compiler.commands.value.VariableAccess","reconstruct",0x9b5f25b4,"src.compiler.commands.value.VariableAccess.reconstruct","src/compiler/commands/value/VariableAccess.hx",175,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_20_fromTokens,"src.compiler.commands.value.VariableAccess","fromTokens",0x2593e2b4,"src.compiler.commands.value.VariableAccess.fromTokens","src/compiler/commands/value/VariableAccess.hx",20,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_33_fromBytecode,"src.compiler.commands.value.VariableAccess","fromBytecode",0xc891ca0f,"src.compiler.commands.value.VariableAccess.fromBytecode","src/compiler/commands/value/VariableAccess.hx",33,0x0769183e)
HX_LOCAL_STACK_FRAME(_hx_pos_abbb7cf773e777fc_48_fromInt,"src.compiler.commands.value.VariableAccess","fromInt",0x309a0555,"src.compiler.commands.value.VariableAccess.fromInt","src/compiler/commands/value/VariableAccess.hx",48,0x0769183e)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void VariableAccess_obj::__construct( ::src::compiler::Scope scope,::Array< ::Dynamic> vars, ::Dynamic definition, ::Dynamic obfuscated){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_55_new)
HXLINE(  56)		super::__construct(scope);
HXLINE(  58)		this->vars = vars;
HXLINE(  59)		if ((vars->length == (int)0)) {
HXLINE(  59)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Empty variable access",55,93,72,06)));
            		}
            	}

Dynamic VariableAccess_obj::__CreateEmpty() { return new VariableAccess_obj; }

void *VariableAccess_obj::_hx_vtable = 0;

Dynamic VariableAccess_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VariableAccess_obj > _hx_result = new VariableAccess_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool VariableAccess_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x741c9b2e;
	}
}

::Array< ::Dynamic> VariableAccess_obj::getVars(){
            	HX_STACKFRAME(&_hx_pos_abbb7cf773e777fc_88_getVars)
HXDLIN(  88)		return this->vars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VariableAccess_obj,getVars,return )

::Array< ::Dynamic> VariableAccess_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_abbb7cf773e777fc_92_walk)
HXLINE(  93)		::Array< ::Dynamic> cmds = ::Array_obj< ::Dynamic>::__new();
HXLINE(  94)		{
HXLINE(  94)			int _g = (int)0;
HXDLIN(  94)			::Array< ::Dynamic> _g1 = this->vars;
HXDLIN(  94)			while((_g < _g1->length)){
HXLINE(  94)				 ::src::compiler::commands::value::ValueCommand x = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  94)				_g = (_g + (int)1);
HXDLIN(  94)				cmds->push(x);
            			}
            		}
HXLINE(  95)		return cmds;
            	}


 ::src::compiler::object::Object VariableAccess_obj::getVariable(){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_99_getVariable)
HXLINE( 100)		 ::src::compiler::object::Object obj;
HXLINE( 101)		if ((this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->getName() == HX_("LiteralValueCommand",c9,b1,43,d2))) {
HXLINE( 101)			 ::src::compiler::Scope obj1 = this->scope;
HXDLIN( 101)			obj = obj1->getVariable(hx::TCast<  ::src::compiler::commands::value::LiteralValueCommand >::cast(this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >())->getContent());
            		}
            		else {
HXLINE( 102)			obj = this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
            		}
HXLINE( 104)		 ::src::compiler::object::Object v;
HXLINE( 105)		{
HXLINE( 105)			int _g1 = (int)1;
HXDLIN( 105)			int _g = this->vars->length;
HXDLIN( 105)			while((_g1 < _g)){
HXLINE( 105)				_g1 = (_g1 + (int)1);
HXDLIN( 105)				int i = (_g1 - (int)1);
HXLINE( 106)				v = this->vars->__get(i).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 107)				if (!(obj->hasfield(v)->rawBool())) {
HXLINE( 107)					::String _hx_tmp = ((HX_("Invalid field, ",65,53,a6,f7) + ::Std_obj::string(obj)) + HX_(" has no field ",bf,1b,77,a6));
HXDLIN( 107)					HX_STACK_DO_THROW( ::src::compiler::signals::InvalidFieldAccessSignal_obj::__alloc( HX_CTX ,(_hx_tmp + v->rawString())));
            				}
HXLINE( 108)				obj = obj->getfield(v);
            			}
            		}
HXLINE( 110)		return obj;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VariableAccess_obj,getVariable,return )

void VariableAccess_obj::setVariable( ::src::compiler::object::Object value){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_117_setVariable)
HXLINE( 118)		if ((this->vars->length == (int)1)) {
HXLINE( 119)			 ::src::compiler::Scope _hx_tmp = this->scope;
HXDLIN( 119)			_hx_tmp->setVariable(this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->rawString(),value);
HXLINE( 120)			return;
            		}
HXLINE( 122)		 ::src::compiler::object::Object obj;
HXLINE( 123)		if ((this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->getName() == HX_("LiteralValueCommand",c9,b1,43,d2))) {
HXLINE( 123)			 ::src::compiler::Scope obj1 = this->scope;
HXDLIN( 123)			obj = obj1->getVariable(hx::TCast<  ::src::compiler::commands::value::LiteralValueCommand >::cast(this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >())->getContent());
            		}
            		else {
HXLINE( 124)			obj = this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
            		}
HXLINE( 126)		 ::src::compiler::object::Object v;
HXLINE( 127)		{
HXLINE( 127)			int _g1 = (int)1;
HXDLIN( 127)			int _g = (this->vars->length - (int)1);
HXDLIN( 127)			while((_g1 < _g)){
HXLINE( 127)				_g1 = (_g1 + (int)1);
HXDLIN( 127)				int i = (_g1 - (int)1);
HXLINE( 128)				v = this->vars->__get(i).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 129)				if (!(obj->hasfield(v)->rawBool())) {
HXLINE( 129)					::String _hx_tmp1 = ((HX_("Invalid field access, ",67,50,74,95) + ::Std_obj::string(obj)) + HX_(" has no field ",bf,1b,77,a6));
HXDLIN( 129)					HX_STACK_DO_THROW( ::src::compiler::signals::InvalidFieldAccessSignal_obj::__alloc( HX_CTX ,(_hx_tmp1 + v->rawString())));
            				}
HXLINE( 130)				obj = obj->getfield(v);
            			}
            		}
HXLINE( 132)		if (hx::IsNull( obj )) {
HXLINE( 132)			HX_STACK_DO_THROW( ::src::compiler::signals::InvalidFieldAccessSignal_obj::__alloc( HX_CTX ,HX_("Null object found",3a,2f,1b,18)));
            		}
HXLINE( 133)		::Array< ::Dynamic> _hx_tmp2 = this->vars;
HXDLIN( 133)		obj->setfield(_hx_tmp2->__get((this->vars->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run(),value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VariableAccess_obj,setVariable,(void))

void VariableAccess_obj::deleteVariable(){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_137_deleteVariable)
HXLINE( 138)		if ((this->vars->length == (int)1)) {
HXLINE( 139)			 ::src::compiler::Scope _hx_tmp = this->scope;
HXDLIN( 139)			_hx_tmp->deleteVariable(this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->rawString());
HXLINE( 140)			return;
            		}
HXLINE( 142)		 ::src::compiler::object::Object obj;
HXLINE( 143)		if ((this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->getName() == HX_("LiteralValueCommand",c9,b1,43,d2))) {
HXLINE( 143)			 ::src::compiler::Scope obj1 = this->scope;
HXDLIN( 143)			obj = obj1->getVariable(hx::TCast<  ::src::compiler::commands::value::LiteralValueCommand >::cast(this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >())->getContent());
            		}
            		else {
HXLINE( 144)			obj = this->vars->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
            		}
HXLINE( 146)		 ::src::compiler::object::Object v;
HXLINE( 147)		{
HXLINE( 147)			int _g1 = (int)1;
HXDLIN( 147)			int _g = (this->vars->length - (int)1);
HXDLIN( 147)			while((_g1 < _g)){
HXLINE( 147)				_g1 = (_g1 + (int)1);
HXDLIN( 147)				int i = (_g1 - (int)1);
HXLINE( 148)				v = this->vars->__get(i).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 149)				if (!(obj->hasfield(v)->rawBool())) {
HXLINE( 149)					::String _hx_tmp1 = ((HX_("Invalid field access, ",67,50,74,95) + ::Std_obj::string(obj)) + HX_(" has no field ",bf,1b,77,a6));
HXDLIN( 149)					HX_STACK_DO_THROW( ::src::compiler::signals::InvalidFieldAccessSignal_obj::__alloc( HX_CTX ,(_hx_tmp1 + v->rawString())));
            				}
HXLINE( 150)				obj = obj->getfield(v);
            			}
            		}
HXLINE( 152)		if (hx::IsNull( obj )) {
HXLINE( 152)			HX_STACK_DO_THROW( ::src::compiler::signals::InvalidFieldAccessSignal_obj::__alloc( HX_CTX ,HX_("Null object found",3a,2f,1b,18)));
            		}
HXLINE( 153)		::Array< ::Dynamic> _hx_tmp2 = this->vars;
HXDLIN( 153)		obj->delfield(_hx_tmp2->__get((this->vars->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run());
            	}


HX_DEFINE_DYNAMIC_FUNC0(VariableAccess_obj,deleteVariable,(void))

::String VariableAccess_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_abbb7cf773e777fc_158_getName)
HXDLIN( 158)		return HX_("VariableAccess",20,05,1f,5c);
            	}


 ::src::compiler::bytecode::Bytecode VariableAccess_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_abbb7cf773e777fc_170_getBytecode)
HXDLIN( 170)		::Array< ::Dynamic> _hx_tmp = this->vars;
HXDLIN( 170)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> VariableAccess_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_175_reconstruct)
HXDLIN( 175)		 ::src::ast::base::AccessToken _hx_tmp =  ::src::ast::base::AccessToken_obj::__alloc( HX_CTX ,HX_(".",2e,00,00,00));
HXDLIN( 175)		return _hx_tmp->join(::src::compiler::commands::Command_obj::reconstructCommands(this->vars),null());
            	}


 ::src::compiler::commands::value::VariableAccess VariableAccess_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens, ::Dynamic definition){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_20_fromTokens)
HXLINE(  21)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("AccessToken",95,02,10,8a),null(),null());
HXLINE(  22)		::Array< ::Dynamic> vars = ::Array_obj< ::Dynamic>::__new();
HXLINE(  23)		{
HXLINE(  23)			int _g = (int)0;
HXDLIN(  23)			while((_g < spl->length)){
HXLINE(  23)				::Array< ::Dynamic> subtokens = spl->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  23)				_g = (_g + (int)1);
HXLINE(  24)				bool _hx_tmp;
HXDLIN(  24)				if ((subtokens->length == (int)1)) {
HXLINE(  24)					_hx_tmp = (subtokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("VariableToken",fd,96,04,01));
            				}
            				else {
HXLINE(  24)					_hx_tmp = false;
            				}
HXDLIN(  24)				if (_hx_tmp) {
HXLINE(  24)					vars->push( ::src::compiler::commands::value::LiteralValueCommand_obj::__alloc( HX_CTX ,scope,subtokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent()));
            				}
            				else {
HXLINE(  25)					vars->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,subtokens));
            				}
            			}
            		}
HXLINE(  29)		return  ::src::compiler::commands::value::VariableAccess_obj::__alloc( HX_CTX ,scope,vars,definition,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(VariableAccess_obj,fromTokens,return )

 ::src::compiler::commands::value::VariableAccess VariableAccess_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_33_fromBytecode)
HXLINE(  42)		::Array< ::Dynamic> vars = ::Array_obj< ::Dynamic>::__new();
HXLINE(  43)		while((arr->length > (int)0)){
HXLINE(  43)			vars->push(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            		}
HXLINE(  44)		return  ::src::compiler::commands::value::VariableAccess_obj::__alloc( HX_CTX ,scope,vars,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VariableAccess_obj,fromBytecode,return )

 ::src::compiler::commands::value::VariableAccess VariableAccess_obj::fromInt( ::src::compiler::Scope scope,int i){
            	HX_GC_STACKFRAME(&_hx_pos_abbb7cf773e777fc_48_fromInt)
HXLINE(  49)		::String name = ::src::compiler::VariableNamePool_obj::nameFromID(i);
HXLINE(  50)		return  ::src::compiler::commands::value::VariableAccess_obj::__alloc( HX_CTX ,scope,::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::compiler::commands::value::LiteralValueCommand_obj::__alloc( HX_CTX ,scope,name)),false,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VariableAccess_obj,fromInt,return )


hx::ObjectPtr< VariableAccess_obj > VariableAccess_obj::__new( ::src::compiler::Scope scope,::Array< ::Dynamic> vars, ::Dynamic definition, ::Dynamic obfuscated) {
	hx::ObjectPtr< VariableAccess_obj > __this = new VariableAccess_obj();
	__this->__construct(scope,vars,definition,obfuscated);
	return __this;
}

hx::ObjectPtr< VariableAccess_obj > VariableAccess_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::Array< ::Dynamic> vars, ::Dynamic definition, ::Dynamic obfuscated) {
	VariableAccess_obj *__this = (VariableAccess_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VariableAccess_obj), true, "src.compiler.commands.value.VariableAccess"));
	*(void **)__this = VariableAccess_obj::_hx_vtable;
	__this->__construct(scope,vars,definition,obfuscated);
	return __this;
}

VariableAccess_obj::VariableAccess_obj()
{
}

void VariableAccess_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VariableAccess);
	HX_MARK_MEMBER_NAME(vars,"vars");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VariableAccess_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vars,"vars");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val VariableAccess_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { return hx::Val( vars ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getVars") ) { return hx::Val( getVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getVariable") ) { return hx::Val( getVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVariable") ) { return hx::Val( setVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"deleteVariable") ) { return hx::Val( deleteVariable_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VariableAccess_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val VariableAccess_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { vars=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VariableAccess_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VariableAccess_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VariableAccess_obj,vars),HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VariableAccess_obj_sStaticStorageInfo = 0;
#endif

static ::String VariableAccess_obj_sMemberFields[] = {
	HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"),
	HX_HCSTRING("getVars","\x62","\xdb","\xcb","\x20"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("getVariable","\xf2","\xd4","\x00","\x8f"),
	HX_HCSTRING("setVariable","\xfe","\xdb","\x6d","\x99"),
	HX_HCSTRING("deleteVariable","\x87","\x31","\xe4","\xc2"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void VariableAccess_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VariableAccess_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VariableAccess_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VariableAccess_obj::__mClass,"__mClass");
};

#endif

hx::Class VariableAccess_obj::__mClass;

static ::String VariableAccess_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	::String(null())
};

void VariableAccess_obj::__register()
{
	hx::Object *dummy = new VariableAccess_obj;
	VariableAccess_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.VariableAccess","\x1e","\x58","\x2c","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VariableAccess_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VariableAccess_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VariableAccess_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VariableAccess_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VariableAccess_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VariableAccess_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VariableAccess_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VariableAccess_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
