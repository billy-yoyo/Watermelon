// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_BracketToken
#include <src/ast/base/BracketToken.h>
#endif
#ifndef INCLUDED_src_ast_base_CommaToken
#include <src/ast/base/CommaToken.h>
#endif
#ifndef INCLUDED_src_ast_base_VariableToken
#include <src/ast/base/VariableToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_MathsOperatorToken
#include <src/ast/maths/MathsOperatorToken.h>
#endif
#ifndef INCLUDED_src_ast_script_AssignmentToken
#include <src/ast/script/AssignmentToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_Argument
#include <src/compiler/commands/value/Argument.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_FunctionCallValueCommand
#include <src/compiler/commands/value/FunctionCallValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_VariableAccess
#include <src/compiler/commands/value/VariableAccess.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_BoolObject
#include <src/compiler/object/builtin/BoolObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_PairObject
#include <src/compiler/object/builtin/PairObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ValuedObject
#include <src/compiler/object/builtin/ValuedObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin__PairObject_Pair
#include <src/compiler/object/builtin/_PairObject/Pair.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_InvalidArgumentSignal
#include <src/compiler/signals/InvalidArgumentSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_79_new,"src.compiler.commands.value.FunctionCallValueCommand","new",0xd54c9360,"src.compiler.commands.value.FunctionCallValueCommand.new","src/compiler/commands/value/FunctionCallValueCommand.hx",79,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_88_walk,"src.compiler.commands.value.FunctionCallValueCommand","walk",0xd3a43a09,"src.compiler.commands.value.FunctionCallValueCommand.walk","src/compiler/commands/value/FunctionCallValueCommand.hx",88,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_97_run,"src.compiler.commands.value.FunctionCallValueCommand","run",0xd54faa4b,"src.compiler.commands.value.FunctionCallValueCommand.run","src/compiler/commands/value/FunctionCallValueCommand.hx",97,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_148_getName,"src.compiler.commands.value.FunctionCallValueCommand","getName",0xef986501,"src.compiler.commands.value.FunctionCallValueCommand.getName","src/compiler/commands/value/FunctionCallValueCommand.hx",148,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_152_getBytecode,"src.compiler.commands.value.FunctionCallValueCommand","getBytecode",0xed7f79eb,"src.compiler.commands.value.FunctionCallValueCommand.getBytecode","src/compiler/commands/value/FunctionCallValueCommand.hx",152,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_164_reconstruct,"src.compiler.commands.value.FunctionCallValueCommand","reconstruct",0x000e2904,"src.compiler.commands.value.FunctionCallValueCommand.reconstruct","src/compiler/commands/value/FunctionCallValueCommand.hx",164,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_31_getArgumentFromBytes,"src.compiler.commands.value.FunctionCallValueCommand","getArgumentFromBytes",0xcf7a3fee,"src.compiler.commands.value.FunctionCallValueCommand.getArgumentFromBytes","src/compiler/commands/value/FunctionCallValueCommand.hx",31,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_35_fromTokens,"src.compiler.commands.value.FunctionCallValueCommand","fromTokens",0x7c20b964,"src.compiler.commands.value.FunctionCallValueCommand.fromTokens","src/compiler/commands/value/FunctionCallValueCommand.hx",35,0x6f3c406e)
HX_LOCAL_STACK_FRAME(_hx_pos_378f1ce6cb88ec27_72_fromBytecode,"src.compiler.commands.value.FunctionCallValueCommand","fromBytecode",0x7d05acbf,"src.compiler.commands.value.FunctionCallValueCommand.fromBytecode","src/compiler/commands/value/FunctionCallValueCommand.hx",72,0x6f3c406e)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void FunctionCallValueCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::VariableAccess func,::Array< ::Dynamic> args, ::haxe::ds::StringMap kwdArgs){
            	HX_GC_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_79_new)
HXLINE(  80)		super::__construct(scope);
HXLINE(  81)		this->func = func;
HXLINE(  82)		this->args = args;
HXLINE(  83)		this->kwdArgs = kwdArgs;
HXLINE(  84)		if (hx::IsNull( this->kwdArgs )) {
HXLINE(  84)			this->kwdArgs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
            	}

Dynamic FunctionCallValueCommand_obj::__CreateEmpty() { return new FunctionCallValueCommand_obj; }

void *FunctionCallValueCommand_obj::_hx_vtable = 0;

Dynamic FunctionCallValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FunctionCallValueCommand_obj > _hx_result = new FunctionCallValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FunctionCallValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17c93e1a) {
		if (inClassId<=(int)0x1020cfc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
		} else {
			return inClassId==(int)0x17c93e1a;
		}
	} else {
		return inClassId==(int)0x20538180;
	}
}

::Array< ::Dynamic> FunctionCallValueCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_88_walk)
HXLINE(  89)		::Array< ::Dynamic> cmds = ::Array_obj< ::Dynamic>::__new();
HXLINE(  90)		{
HXLINE(  90)			 ::Dynamic arg = this->kwdArgs->iterator();
HXDLIN(  90)			while(( (bool)(arg->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  90)				 ::src::compiler::commands::value::Argument arg1 = ( ( ::src::compiler::commands::value::Argument)(arg->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  90)				cmds->push(arg1);
            			}
            		}
HXLINE(  91)		{
HXLINE(  91)			int _g = (int)0;
HXDLIN(  91)			::Array< ::Dynamic> _g1 = this->args;
HXDLIN(  91)			while((_g < _g1->length)){
HXLINE(  91)				 ::src::compiler::commands::value::Argument arg2 = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::Argument >();
HXDLIN(  91)				_g = (_g + (int)1);
HXDLIN(  91)				cmds->push(arg2);
            			}
            		}
HXLINE(  92)		cmds->push(this->func);
HXLINE(  93)		return cmds;
            	}


 ::src::compiler::object::Object FunctionCallValueCommand_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_97_run)
HXLINE(  98)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE(  99)		 ::src::compiler::object::Object iter;
HXLINE( 100)		{
HXLINE( 100)			int _g = (int)0;
HXDLIN( 100)			::Array< ::Dynamic> _g1 = this->args;
HXDLIN( 100)			while((_g < _g1->length)){
HXLINE( 100)				 ::src::compiler::commands::value::Argument arg = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::Argument >();
HXDLIN( 100)				_g = (_g + (int)1);
HXLINE( 101)				if (arg->collapsed) {
HXLINE( 102)					iter = arg->value->run();
HXLINE( 104)					bool _hx_tmp;
HXDLIN( 104)					if (iter->hasMember(HX_("__next__",f3,a5,93,1a))) {
HXLINE( 104)						_hx_tmp = iter->hasMember(HX_("__hasnext__",8d,c2,e4,ac));
            					}
            					else {
HXLINE( 104)						_hx_tmp = false;
            					}
HXDLIN( 104)					if (!(_hx_tmp)) {
HXLINE( 105)						bool _hx_tmp1;
HXDLIN( 105)						bool _hx_tmp2;
HXDLIN( 105)						if (!(iter->isInstance(HX_("TupleType",c2,3e,8e,1a)))) {
HXLINE( 105)							_hx_tmp2 = iter->isInstance(HX_("ListType",58,7e,af,06));
            						}
            						else {
HXLINE( 105)							_hx_tmp2 = true;
            						}
HXDLIN( 105)						if (!(_hx_tmp2)) {
HXLINE( 105)							_hx_tmp1 = iter->hasMember(HX_("__iter__",58,f9,3c,b1));
            						}
            						else {
HXLINE( 105)							_hx_tmp1 = true;
            						}
HXDLIN( 105)						if (_hx_tmp1) {
HXLINE( 106)							iter = iter->iter();
            						}
            						else {
HXLINE( 108)							HX_STACK_DO_THROW( ::src::compiler::signals::InvalidArgumentSignal_obj::__alloc( HX_CTX ,HX_("Cannot collapse a non-iterable",a7,99,c7,5d)));
            						}
            					}
HXLINE( 111)					 ::src::compiler::object::Object obj;
HXLINE( 112)					while(iter->hasNext()->rawBool()){
HXLINE( 113)						obj = iter->next();
HXLINE( 114)						args->push(obj);
            					}
            				}
            				else {
HXLINE( 117)					args->push(arg->value->run());
            				}
            			}
            		}
HXLINE( 120)		 ::src::compiler::commands::value::Argument arg1;
HXDLIN( 120)		 ::src::compiler::object::Object map;
HXLINE( 121)		{
HXLINE( 121)			 ::Dynamic key = this->kwdArgs->keys();
HXDLIN( 121)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 121)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 122)				arg1 = this->kwdArgs->get(key1).StaticCast<  ::src::compiler::commands::value::Argument >();
HXLINE( 123)				if (arg1->collapsed) {
HXLINE( 124)					map = arg1->value->run();
HXLINE( 125)					if (!(map->hasMember(HX_("__get__",16,fe,be,fb)))) {
HXLINE( 125)						HX_STACK_DO_THROW( ::src::compiler::signals::InvalidArgumentSignal_obj::__alloc( HX_CTX ,HX_("Cannot collapse a non-map",c7,f3,83,e0)));
            					}
HXLINE( 126)					iter = map;
HXLINE( 127)					bool _hx_tmp3;
HXDLIN( 127)					if (iter->hasMember(HX_("__next__",f3,a5,93,1a))) {
HXLINE( 127)						_hx_tmp3 = iter->hasMember(HX_("__hasnext__",8d,c2,e4,ac));
            					}
            					else {
HXLINE( 127)						_hx_tmp3 = false;
            					}
HXDLIN( 127)					if (!(_hx_tmp3)) {
HXLINE( 128)						bool _hx_tmp4;
HXDLIN( 128)						if (!(iter->isInstance(HX_("MapType",56,cf,55,ff)))) {
HXLINE( 128)							_hx_tmp4 = iter->hasMember(HX_("__iter__",58,f9,3c,b1));
            						}
            						else {
HXLINE( 128)							_hx_tmp4 = true;
            						}
HXDLIN( 128)						if (_hx_tmp4) {
HXLINE( 129)							iter = iter->iter();
            						}
            						else {
HXLINE( 131)							HX_STACK_DO_THROW( ::src::compiler::signals::InvalidArgumentSignal_obj::__alloc( HX_CTX ,HX_("Cannot kwd-collapse a non-map or non-iterable",ab,e1,f2,7b)));
            						}
            					}
HXLINE( 133)					 ::src::compiler::object::Object key2;
HXLINE( 134)					while(iter->hasNext()->rawBool()){
HXLINE( 135)						key2 = iter->next();
HXLINE( 136)						 ::src::compiler::object::ObjectType _hx_tmp5 = this->scope->getType(HX_("PairType",14,cc,6e,78),null());
HXDLIN( 136)						::String _hx_tmp6 = key2->rawString();
HXDLIN( 136)						args->push(_hx_tmp5->createValue(::src::compiler::object::builtin::PairObject_obj::createPair(_hx_tmp6,map->get(key2)),null()));
            					}
            				}
            				else {
HXLINE( 139)					 ::src::compiler::object::ObjectType _hx_tmp7 = this->scope->getType(HX_("PairType",14,cc,6e,78),null());
HXDLIN( 139)					args->push(_hx_tmp7->createValue(::src::compiler::object::builtin::PairObject_obj::createPair(key1,arg1->value->run()),null()));
            				}
            			}
            		}
HXLINE( 142)		 ::src::compiler::object::Object fobj = this->func->getVariable();
HXLINE( 143)		return fobj->call(args);
            	}


::String FunctionCallValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_148_getName)
HXDLIN( 148)		return HX_("FunctionCallValueCommand",f0,66,19,6a);
            	}


 ::src::compiler::bytecode::Bytecode FunctionCallValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_152_getBytecode)
HXLINE( 153)		bool containsValues = false;
HXLINE( 154)		{
HXLINE( 154)			 ::Dynamic v = this->kwdArgs->iterator();
HXDLIN( 154)			while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 154)				 ::src::compiler::commands::value::Argument v1 = ( ( ::src::compiler::commands::value::Argument)(v->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 155)				containsValues = true;
HXLINE( 156)				goto _hx_goto_10;
            			}
            			_hx_goto_10:;
            		}
HXLINE( 158)		 ::haxe::ds::StringMap map = null();
HXLINE( 159)		if (containsValues) {
HXLINE( 159)			map = this->kwdArgs;
            		}
HXLINE( 160)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(3)->init(0,this->func)->init(1,this->args)->init(2,map);
HXDLIN( 160)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> FunctionCallValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_164_reconstruct)
HXLINE( 165)		::Array< ::Dynamic> argTokens = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 165)		::Array< ::Dynamic> tokens;
HXLINE( 166)		{
HXLINE( 166)			int _g = (int)0;
HXDLIN( 166)			::Array< ::Dynamic> _g1 = this->args;
HXDLIN( 166)			while((_g < _g1->length)){
HXLINE( 166)				 ::src::compiler::commands::value::Argument arg = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::Argument >();
HXDLIN( 166)				_g = (_g + (int)1);
HXLINE( 167)				tokens = arg->value->reconstruct();
HXLINE( 168)				if (arg->collapsed) {
HXLINE( 168)					tokens->insert((int)0, ::src::ast::maths::MathsOperatorToken_obj::__alloc( HX_CTX ,HX_("*",2a,00,00,00)));
            				}
HXLINE( 169)				tokens->push( ::src::ast::base::CommaToken_obj::__alloc( HX_CTX ,HX_(",",2c,00,00,00)));
HXLINE( 170)				argTokens->push(tokens);
            			}
            		}
HXLINE( 172)		 ::src::compiler::commands::value::Argument arg1;
HXLINE( 173)		{
HXLINE( 173)			 ::Dynamic key = this->kwdArgs->keys();
HXDLIN( 173)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 173)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 174)				arg1 = this->kwdArgs->get(key1).StaticCast<  ::src::compiler::commands::value::Argument >();
HXLINE( 175)				tokens = arg1->value->reconstruct();
HXLINE( 176)				if (arg1->collapsed) {
HXLINE( 176)					tokens->insert((int)0, ::src::ast::maths::MathsOperatorToken_obj::__alloc( HX_CTX ,HX_("**",c0,24,00,00)));
            				}
HXLINE( 177)				tokens->insert((int)0, ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,key1));
HXLINE( 178)				tokens->insert((int)0, ::src::ast::script::AssignmentToken_obj::__alloc( HX_CTX ,HX_("=",3d,00,00,00)));
HXLINE( 179)				tokens->push( ::src::ast::base::CommaToken_obj::__alloc( HX_CTX ,HX_(",",2c,00,00,00)));
HXLINE( 180)				argTokens->push(tokens);
            			}
            		}
HXLINE( 182)		::Array< ::Dynamic> final = ::src::ast::Token_obj::merge(argTokens);
HXLINE( 183)		bool _hx_tmp;
HXDLIN( 183)		if ((final->length > (int)0)) {
HXLINE( 183)			_hx_tmp = (final->__get((final->length - (int)1)).StaticCast<  ::src::ast::Token >()->getName() == HX_("CommaToken",04,01,3f,49));
            		}
            		else {
HXLINE( 183)			_hx_tmp = false;
            		}
HXDLIN( 183)		if (_hx_tmp) {
HXLINE( 183)			final->pop().StaticCast<  ::src::ast::Token >();
            		}
HXLINE( 184)		::Array< ::Dynamic> _hx_tmp1 = this->func->reconstruct();
HXDLIN( 184)		return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(2)->init(0,_hx_tmp1)->init(1,::src::ast::base::BracketToken_obj::fromRaw(final)));
            	}


 ::Dynamic FunctionCallValueCommand_obj::getArgumentFromBytes(){
            	HX_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_31_getArgumentFromBytes)
HXDLIN(  31)		return ::src::compiler::commands::value::Argument_obj::fromBytecode_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FunctionCallValueCommand_obj,getArgumentFromBytes,return )

 ::src::compiler::commands::value::FunctionCallValueCommand FunctionCallValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> varTokens, ::src::ast::Token bracketToken){
            	HX_GC_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_35_fromTokens)
HXLINE(  36)		 ::src::compiler::commands::value::VariableAccess name = ::src::compiler::commands::value::VariableAccess_obj::fromTokens(scope,varTokens,null());
HXLINE(  37)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(( (::Array< ::Dynamic>)(bracketToken->getContent()) ),HX_("CommaToken",04,01,3f,49),null(),null());
HXLINE(  39)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE(  40)		 ::haxe::ds::StringMap kwdArgs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  41)		int kwdAmount = (int)0;
HXLINE(  43)		::Array< ::Dynamic> kwdSpl;
HXDLIN(  43)		bool collector;
HXLINE(  44)		{
HXLINE(  44)			int _g = (int)0;
HXDLIN(  44)			while((_g < spl->length)){
HXLINE(  44)				::Array< ::Dynamic> tokens = spl->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  44)				_g = (_g + (int)1);
HXLINE(  46)				if ((tokens->length == (int)0)) {
HXLINE(  47)					if ((spl->length > (int)1)) {
HXLINE(  47)						HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Empty argument",90,ae,3e,9b)));
            					}
            				}
            				else {
HXLINE(  49)					if (::src::compiler::commands::Command_obj::contains(tokens,HX_("AssignmentToken",4c,94,e1,56))) {
HXLINE(  50)						if ((tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("MathsOperatorToken",2a,dc,94,41))) {
HXLINE(  50)							collector = hx::IsEq( tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent(),HX_("**",c0,24,00,00) );
            						}
            						else {
HXLINE(  50)							collector = false;
            						}
HXLINE(  51)						if (collector) {
HXLINE(  51)							tokens->shift().StaticCast<  ::src::ast::Token >();
            						}
HXLINE(  52)						kwdSpl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("AssignmentToken",4c,94,e1,56),null(),null());
HXLINE(  53)						if ((kwdSpl->length == (int)1)) {
HXLINE(  53)							HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Bad assignment split",a2,ea,4e,f8)));
            						}
            						else {
HXLINE(  54)							if ((kwdSpl->length > (int)2)) {
HXLINE(  54)								HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Too many assignments for the same keyword",04,66,b1,d6)));
            							}
            							else {
HXLINE(  55)								bool _hx_tmp;
HXDLIN(  55)								if ((kwdSpl->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->length == (int)1)) {
HXLINE(  55)									_hx_tmp = (kwdSpl->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() != HX_("VariableToken",fd,96,04,01));
            								}
            								else {
HXLINE(  55)									_hx_tmp = true;
            								}
HXDLIN(  55)								if (_hx_tmp) {
HXLINE(  55)									HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,(HX_("Invalid keyword ",80,4f,8f,8d) + ::Std_obj::string(kwdSpl->__get((int)0).StaticCast< ::Array< ::Dynamic> >()))));
            								}
            								else {
HXLINE(  57)									{
HXLINE(  57)										::String key = hx::TCast< ::String >::cast(kwdSpl->__get((int)0).StaticCast< ::Array< ::Dynamic> >()->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent());
HXDLIN(  57)										kwdArgs->set(key, ::src::compiler::commands::value::Argument_obj::__alloc( HX_CTX ,::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,kwdSpl->__get((int)1).StaticCast< ::Array< ::Dynamic> >()),collector));
            									}
HXLINE(  58)									kwdAmount = (kwdAmount + (int)1);
            								}
            							}
            						}
            					}
            					else {
HXLINE(  61)						if ((tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("MathsOperatorToken",2a,dc,94,41))) {
HXLINE(  61)							collector = hx::IsEq( tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent(),HX_("*",2a,00,00,00) );
            						}
            						else {
HXLINE(  61)							collector = false;
            						}
HXLINE(  62)						if (collector) {
HXLINE(  62)							tokens->shift().StaticCast<  ::src::ast::Token >();
            						}
HXLINE(  63)						args->push( ::src::compiler::commands::value::Argument_obj::__alloc( HX_CTX ,::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,tokens),collector));
            					}
            				}
            			}
            		}
HXLINE(  67)		return  ::src::compiler::commands::value::FunctionCallValueCommand_obj::__alloc( HX_CTX ,scope,name,args,kwdArgs);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FunctionCallValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::FunctionCallValueCommand FunctionCallValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_378f1ce6cb88ec27_72_fromBytecode)
HXDLIN(  72)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  72)		 ::Dynamic _hx_tmp1 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  72)		return  ::src::compiler::commands::value::FunctionCallValueCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunctionCallValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< FunctionCallValueCommand_obj > FunctionCallValueCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::VariableAccess func,::Array< ::Dynamic> args, ::haxe::ds::StringMap kwdArgs) {
	hx::ObjectPtr< FunctionCallValueCommand_obj > __this = new FunctionCallValueCommand_obj();
	__this->__construct(scope,func,args,kwdArgs);
	return __this;
}

hx::ObjectPtr< FunctionCallValueCommand_obj > FunctionCallValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::VariableAccess func,::Array< ::Dynamic> args, ::haxe::ds::StringMap kwdArgs) {
	FunctionCallValueCommand_obj *__this = (FunctionCallValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FunctionCallValueCommand_obj), true, "src.compiler.commands.value.FunctionCallValueCommand"));
	*(void **)__this = FunctionCallValueCommand_obj::_hx_vtable;
	__this->__construct(scope,func,args,kwdArgs);
	return __this;
}

FunctionCallValueCommand_obj::FunctionCallValueCommand_obj()
{
}

void FunctionCallValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionCallValueCommand);
	HX_MARK_MEMBER_NAME(func,"func");
	HX_MARK_MEMBER_NAME(args,"args");
	HX_MARK_MEMBER_NAME(kwdArgs,"kwdArgs");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FunctionCallValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(func,"func");
	HX_VISIT_MEMBER_NAME(args,"args");
	HX_VISIT_MEMBER_NAME(kwdArgs,"kwdArgs");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FunctionCallValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"func") ) { return hx::Val( func ); }
		if (HX_FIELD_EQ(inName,"args") ) { return hx::Val( args ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"kwdArgs") ) { return hx::Val( kwdArgs ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunctionCallValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getArgumentFromBytes") ) { outValue = getArgumentFromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val FunctionCallValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"func") ) { func=inValue.Cast<  ::src::compiler::commands::value::VariableAccess >(); return inValue; }
		if (HX_FIELD_EQ(inName,"args") ) { args=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"kwdArgs") ) { kwdArgs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionCallValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("func","\x44","\xeb","\xc4","\x43"));
	outFields->push(HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"));
	outFields->push(HX_HCSTRING("kwdArgs","\xb5","\x4e","\x50","\xb5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FunctionCallValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::value::VariableAccess*/ ,(int)offsetof(FunctionCallValueCommand_obj,func),HX_HCSTRING("func","\x44","\xeb","\xc4","\x43")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FunctionCallValueCommand_obj,args),HX_HCSTRING("args","\x5d","\x8d","\x74","\x40")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FunctionCallValueCommand_obj,kwdArgs),HX_HCSTRING("kwdArgs","\xb5","\x4e","\x50","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FunctionCallValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionCallValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("func","\x44","\xeb","\xc4","\x43"),
	HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"),
	HX_HCSTRING("kwdArgs","\xb5","\x4e","\x50","\xb5"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void FunctionCallValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunctionCallValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunctionCallValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunctionCallValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class FunctionCallValueCommand_obj::__mClass;

static ::String FunctionCallValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("getArgumentFromBytes","\xee","\x62","\x7e","\x9c"),
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void FunctionCallValueCommand_obj::__register()
{
	hx::Object *dummy = new FunctionCallValueCommand_obj;
	FunctionCallValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.FunctionCallValueCommand","\x6e","\xa3","\x6f","\xac");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunctionCallValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FunctionCallValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FunctionCallValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FunctionCallValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FunctionCallValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunctionCallValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionCallValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionCallValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
