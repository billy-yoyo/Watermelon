// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_KwdToken
#include <src/ast/base/KwdToken.h>
#endif
#ifndef INCLUDED_src_ast_base_StringToken
#include <src/ast/base/StringToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_FloatToken
#include <src/ast/maths/FloatToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_HexToken
#include <src/ast/maths/HexToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_IntegerToken
#include <src/ast/maths/IntegerToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ObjectValueCommand
#include <src/compiler/commands/value/ObjectValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_76220310df0b6c78_28_new,"src.compiler.commands.value.ObjectValueCommand","new",0x5d8b2dc9,"src.compiler.commands.value.ObjectValueCommand.new","src/compiler/commands/value/ObjectValueCommand.hx",28,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_36_copy,"src.compiler.commands.value.ObjectValueCommand","copy",0x74ff1a2c,"src.compiler.commands.value.ObjectValueCommand.copy","src/compiler/commands/value/ObjectValueCommand.hx",36,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_41_run,"src.compiler.commands.value.ObjectValueCommand","run",0x5d8e44b4,"src.compiler.commands.value.ObjectValueCommand.run","src/compiler/commands/value/ObjectValueCommand.hx",41,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_46_getName,"src.compiler.commands.value.ObjectValueCommand","getName",0x993ee7ea,"src.compiler.commands.value.ObjectValueCommand.getName","src/compiler/commands/value/ObjectValueCommand.hx",46,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_51_getFriendlyName,"src.compiler.commands.value.ObjectValueCommand","getFriendlyName",0x0d36e8f5,"src.compiler.commands.value.ObjectValueCommand.getFriendlyName","src/compiler/commands/value/ObjectValueCommand.hx",51,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_60_getBytecode,"src.compiler.commands.value.ObjectValueCommand","getBytecode",0xa1ec2554,"src.compiler.commands.value.ObjectValueCommand.getBytecode","src/compiler/commands/value/ObjectValueCommand.hx",60,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_73_reconstruct,"src.compiler.commands.value.ObjectValueCommand","reconstruct",0xb47ad46d,"src.compiler.commands.value.ObjectValueCommand.reconstruct","src/compiler/commands/value/ObjectValueCommand.hx",73,0xa391eba5)
HX_LOCAL_STACK_FRAME(_hx_pos_76220310df0b6c78_22_fromBytecode,"src.compiler.commands.value.ObjectValueCommand","fromBytecode",0xa7aefd36,"src.compiler.commands.value.ObjectValueCommand.fromBytecode","src/compiler/commands/value/ObjectValueCommand.hx",22,0xa391eba5)
static const ::String _hx_array_data_e0849557_9[] = {
	HX_("IntType",29,f7,3d,d9),HX_("FloatType",56,c2,14,a2),HX_("StringType",4b,88,b6,f5),HX_("BoolType",24,bc,95,8f),HX_("BytesType",a5,18,d1,13),
};
namespace src{
namespace compiler{
namespace commands{
namespace value{

void ObjectValueCommand_obj::__construct( ::src::compiler::Scope scope, ::Dynamic value,::String type){
            	HX_STACKFRAME(&_hx_pos_76220310df0b6c78_28_new)
HXLINE(  29)		super::__construct(scope);
HXLINE(  30)		this->value = value;
HXLINE(  31)		this->type = type;
            	}

Dynamic ObjectValueCommand_obj::__CreateEmpty() { return new ObjectValueCommand_obj; }

void *ObjectValueCommand_obj::_hx_vtable = 0;

Dynamic ObjectValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ObjectValueCommand_obj > _hx_result = new ObjectValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ObjectValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		if (inClassId<=(int)0x1020cfc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
		} else {
			return inClassId==(int)0x20538180;
		}
	} else {
		return inClassId==(int)0x3de3ad9f;
	}
}

 ::src::compiler::commands::Command ObjectValueCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_76220310df0b6c78_36_copy)
HXDLIN(  36)		return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,this->value,this->type);
            	}


 ::src::compiler::object::Object ObjectValueCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_76220310df0b6c78_41_run)
HXDLIN(  41)		return this->scope->getType(this->type,null())->createValue(this->value,this->scope,null());
            	}


::String ObjectValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_76220310df0b6c78_46_getName)
HXDLIN(  46)		return HX_("ObjectValueCommand",59,eb,9e,45);
            	}


::String ObjectValueCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_76220310df0b6c78_51_getFriendlyName)
HXDLIN(  51)		if ((this->type == HX_("IntType",29,f7,3d,d9))) {
HXDLIN(  51)			return HX_("int",ef,0c,50,00);
            		}
            		else {
HXLINE(  52)			if ((this->type == HX_("FloatType",56,c2,14,a2))) {
HXLINE(  52)				return HX_("float",9c,c5,96,02);
            			}
            			else {
HXLINE(  53)				if ((this->type == HX_("StringType",4b,88,b6,f5))) {
HXLINE(  53)					return HX_("string",d1,28,30,11);
            				}
            				else {
HXLINE(  54)					if ((this->type == HX_("BoolType",24,bc,95,8f))) {
HXLINE(  54)						return HX_("bool",2a,84,1b,41);
            					}
            					else {
HXLINE(  55)						if ((this->type == HX_("BytesType",a5,18,d1,13))) {
HXLINE(  55)							return HX_("bytes",6b,08,98,bd);
            						}
            						else {
HXLINE(  56)							return HX_("value",71,7f,b8,31);
            						}
            					}
            				}
            			}
            		}
HXLINE(  51)		return null();
            	}


 ::src::compiler::bytecode::Bytecode ObjectValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_76220310df0b6c78_60_getBytecode)
HXLINE(  61)		 ::src::compiler::bytecode::Bytecode op;
HXLINE(  62)		if ((this->type == HX_("IntType",29,f7,3d,d9))) {
HXLINE(  62)			op = ::src::compiler::bytecode::Bytecode_obj::fromKeyword(HX_("Zero",48,3b,ca,3b));
            		}
            		else {
HXLINE(  63)			if ((this->type == HX_("FloatType",56,c2,14,a2))) {
HXLINE(  63)				op = ::src::compiler::bytecode::Bytecode_obj::fromKeyword(HX_("One",46,52,3c,00));
            			}
            			else {
HXLINE(  64)				if ((this->type == HX_("StringType",4b,88,b6,f5))) {
HXLINE(  64)					op = ::src::compiler::bytecode::Bytecode_obj::fromKeyword(HX_("Two",6c,25,40,00));
            				}
            				else {
HXLINE(  65)					if ((this->type == HX_("BoolType",24,bc,95,8f))) {
HXLINE(  65)						op = ::src::compiler::bytecode::Bytecode_obj::fromKeyword(HX_("Three",3e,c4,bd,a2));
            					}
            					else {
HXLINE(  66)						if ((this->type == HX_("BytesType",a5,18,d1,13))) {
HXLINE(  66)							op = ::src::compiler::bytecode::Bytecode_obj::fromKeyword(HX_("Four",06,90,99,2e));
            						}
            						else {
HXLINE(  67)							HX_STACK_DO_THROW((HX_("Unexpected type ",b7,a0,e9,ea) + this->type));
            						}
            					}
            				}
            			}
            		}
HXLINE(  68)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(2)->init(0,this->value)->init(1,op);
HXDLIN(  68)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> ObjectValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_76220310df0b6c78_73_reconstruct)
HXDLIN(  73)		if ((this->type == HX_("IntType",29,f7,3d,d9))) {
HXLINE(  74)			int i = ( (int)(this->value) );
HXLINE(  75)			return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::maths::IntegerToken_obj::__alloc( HX_CTX ,(HX_("",00,00,00,00) + i)));
            		}
            		else {
HXLINE(  76)			if ((this->type == HX_("FloatType",56,c2,14,a2))) {
HXLINE(  77)				Float f = ( (Float)(this->value) );
HXLINE(  78)				return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::maths::FloatToken_obj::__alloc( HX_CTX ,(HX_("",00,00,00,00) + f)));
            			}
            			else {
HXLINE(  79)				if ((this->type == HX_("StringType",4b,88,b6,f5))) {
HXLINE(  80)					::String s = ( (::String)(this->value) );
HXLINE(  81)					return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::base::StringToken_obj::__alloc( HX_CTX ,((HX_("\"",22,00,00,00) + s) + HX_("\"",22,00,00,00))));
            				}
            				else {
HXLINE(  82)					if ((this->type == HX_("BoolType",24,bc,95,8f))) {
HXLINE(  83)						bool b = ( (bool)(this->value) );
HXLINE(  84)						::String kwd;
HXDLIN(  84)						if (b) {
HXLINE(  84)							kwd = HX_("true",4e,a7,03,4d);
            						}
            						else {
HXLINE(  84)							kwd = HX_("false",a3,35,4f,fb);
            						}
HXLINE(  85)						return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::base::KwdToken_obj::__alloc( HX_CTX ,kwd));
            					}
            					else {
HXLINE(  86)						if ((this->type == HX_("Bytes",4b,78,c5,50))) {
HXLINE(  87)							 ::haxe::io::Bytes bytes = ( ( ::haxe::io::Bytes)(this->value) );
HXDLIN(  87)							::String lookup = HX_("0123456789ABCDEF",68,2a,58,a2);
HXLINE(  88)							::String s1 = HX_("",00,00,00,00);
HXDLIN(  88)							int n;
HXLINE(  89)							{
HXLINE(  89)								int _g1 = (int)0;
HXDLIN(  89)								int _g = bytes->length;
HXDLIN(  89)								while((_g1 < _g)){
HXLINE(  89)									_g1 = (_g1 + (int)1);
HXDLIN(  89)									int index = (_g1 - (int)1);
HXLINE(  90)									n = bytes->b->__get(index);
HXLINE(  91)									::String s2 = lookup.charAt(::Math_obj::floor(((Float)n / (Float)(int)16)));
HXDLIN(  91)									s1 = ((s2 + lookup.charAt(hx::Mod(n,(int)16))) + s1);
            								}
            							}
HXLINE(  93)							s1 = (HX_("bx",d6,55,00,00) + s1);
HXLINE(  94)							return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::maths::HexToken_obj::__alloc( HX_CTX ,s1));
            						}
            						else {
HXLINE(  95)							HX_STACK_DO_THROW((HX_("Unexpected type ",b7,a0,e9,ea) + this->type));
            						}
            					}
            				}
            			}
            		}
HXLINE(  73)		return null();
            	}


 ::src::compiler::commands::value::ObjectValueCommand ObjectValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_76220310df0b6c78_22_fromBytecode)
HXDLIN(  22)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  22)		return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,::Array_obj< ::String >::fromData( _hx_array_data_e0849557_9,5)->__get(( (int)(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope)) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ObjectValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< ObjectValueCommand_obj > ObjectValueCommand_obj::__new( ::src::compiler::Scope scope, ::Dynamic value,::String type) {
	hx::ObjectPtr< ObjectValueCommand_obj > __this = new ObjectValueCommand_obj();
	__this->__construct(scope,value,type);
	return __this;
}

hx::ObjectPtr< ObjectValueCommand_obj > ObjectValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::Dynamic value,::String type) {
	ObjectValueCommand_obj *__this = (ObjectValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ObjectValueCommand_obj), true, "src.compiler.commands.value.ObjectValueCommand"));
	*(void **)__this = ObjectValueCommand_obj::_hx_vtable;
	__this->__construct(scope,value,type);
	return __this;
}

ObjectValueCommand_obj::ObjectValueCommand_obj()
{
}

void ObjectValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectValueCommand);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(type,"type");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ObjectValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(type,"type");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ObjectValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ObjectValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val ObjectValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ObjectValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectValueCommand_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsString,(int)offsetof(ObjectValueCommand_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ObjectValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void ObjectValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ObjectValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ObjectValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ObjectValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class ObjectValueCommand_obj::__mClass;

static ::String ObjectValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void ObjectValueCommand_obj::__register()
{
	hx::Object *dummy = new ObjectValueCommand_obj;
	ObjectValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.ObjectValueCommand","\x57","\x95","\x84","\xe0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ObjectValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ObjectValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ObjectValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ObjectValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ObjectValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ObjectValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
