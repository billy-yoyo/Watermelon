// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_maths_MathsOperatorToken
#include <src/ast/maths/MathsOperatorToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_MathsExpressionValueCommand
#include <src/compiler/commands/value/MathsExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_898a6e1974457f84_56_new,"src.compiler.commands.value.MathsExpressionValueCommand","new",0x9dd40031,"src.compiler.commands.value.MathsExpressionValueCommand.new","src/compiler/commands/value/MathsExpressionValueCommand.hx",56,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_64_copy,"src.compiler.commands.value.MathsExpressionValueCommand","copy",0x746e62c4,"src.compiler.commands.value.MathsExpressionValueCommand.copy","src/compiler/commands/value/MathsExpressionValueCommand.hx",64,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_68_setScope,"src.compiler.commands.value.MathsExpressionValueCommand","setScope",0x5019b521,"src.compiler.commands.value.MathsExpressionValueCommand.setScope","src/compiler/commands/value/MathsExpressionValueCommand.hx",68,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_74_walk,"src.compiler.commands.value.MathsExpressionValueCommand","walk",0x819c0418,"src.compiler.commands.value.MathsExpressionValueCommand.walk","src/compiler/commands/value/MathsExpressionValueCommand.hx",74,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_81_run,"src.compiler.commands.value.MathsExpressionValueCommand","run",0x9dd7171c,"src.compiler.commands.value.MathsExpressionValueCommand.run","src/compiler/commands/value/MathsExpressionValueCommand.hx",81,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_132_getName,"src.compiler.commands.value.MathsExpressionValueCommand","getName",0xa5050e52,"src.compiler.commands.value.MathsExpressionValueCommand.getName","src/compiler/commands/value/MathsExpressionValueCommand.hx",132,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_137_getFriendlyName,"src.compiler.commands.value.MathsExpressionValueCommand","getFriendlyName",0xd6a5b75d,"src.compiler.commands.value.MathsExpressionValueCommand.getFriendlyName","src/compiler/commands/value/MathsExpressionValueCommand.hx",137,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_141_getBytecode,"src.compiler.commands.value.MathsExpressionValueCommand","getBytecode",0x24699fbc,"src.compiler.commands.value.MathsExpressionValueCommand.getBytecode","src/compiler/commands/value/MathsExpressionValueCommand.hx",141,0x90da96c1)
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_149_reconstruct,"src.compiler.commands.value.MathsExpressionValueCommand","reconstruct",0x36f84ed5,"src.compiler.commands.value.MathsExpressionValueCommand.reconstruct","src/compiler/commands/value/MathsExpressionValueCommand.hx",149,0x90da96c1)
static const ::String _hx_array_data_5b8a13bf_18[] = {
	HX_("-",2d,00,00,00),HX_("+",2b,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("//",20,29,00,00),HX_("%",25,00,00,00),HX_("**",c0,24,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_18_fromTokens,"src.compiler.commands.value.MathsExpressionValueCommand","fromTokens",0xdccdf8b3,"src.compiler.commands.value.MathsExpressionValueCommand.fromTokens","src/compiler/commands/value/MathsExpressionValueCommand.hx",18,0x90da96c1)
static const ::String _hx_array_data_5b8a13bf_21[] = {
	HX_("-",2d,00,00,00),HX_("+",2b,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("//",20,29,00,00),HX_("%",25,00,00,00),HX_("**",c0,24,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_898a6e1974457f84_46_fromBytecode,"src.compiler.commands.value.MathsExpressionValueCommand","fromBytecode",0x52fc9dce,"src.compiler.commands.value.MathsExpressionValueCommand.fromBytecode","src/compiler/commands/value/MathsExpressionValueCommand.hx",46,0x90da96c1)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void MathsExpressionValueCommand_obj::__construct( ::src::compiler::Scope scope,int _hx_operator,::Array< ::Dynamic> values){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_56_new)
HXLINE(  57)		super::__construct(scope);
HXLINE(  58)		this->_hx_operator = _hx_operator;
HXLINE(  59)		this->values = values;
            	}

Dynamic MathsExpressionValueCommand_obj::__CreateEmpty() { return new MathsExpressionValueCommand_obj; }

void *MathsExpressionValueCommand_obj::_hx_vtable = 0;

Dynamic MathsExpressionValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MathsExpressionValueCommand_obj > _hx_result = new MathsExpressionValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MathsExpressionValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1020cfc0) {
		if (inClassId<=(int)0x0a5d6c93) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a5d6c93;
		} else {
			return inClassId==(int)0x1020cfc0;
		}
	} else {
		return inClassId==(int)0x20538180;
	}
}

 ::src::compiler::commands::Command MathsExpressionValueCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_898a6e1974457f84_64_copy)
HXDLIN(  64)		int _hx_tmp = this->_hx_operator;
HXDLIN(  64)		return  ::src::compiler::commands::value::MathsExpressionValueCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,::src::compiler::commands::value::ValueCommand_obj::copyArray(scope,this->values));
            	}


void MathsExpressionValueCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_68_setScope)
HXLINE(  69)		this->super::setScope(scope);
HXLINE(  70)		{
HXLINE(  70)			int _g = (int)0;
HXDLIN(  70)			::Array< ::Dynamic> _g1 = this->values;
HXDLIN(  70)			while((_g < _g1->length)){
HXLINE(  70)				 ::src::compiler::commands::value::ValueCommand value = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  70)				_g = (_g + (int)1);
HXDLIN(  70)				value->setScope(scope);
            			}
            		}
            	}


::Array< ::Dynamic> MathsExpressionValueCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_74_walk)
HXLINE(  75)		::Array< ::Dynamic> cmds = ::Array_obj< ::Dynamic>::__new();
HXLINE(  76)		{
HXLINE(  76)			int _g = (int)0;
HXDLIN(  76)			::Array< ::Dynamic> _g1 = this->values;
HXDLIN(  76)			while((_g < _g1->length)){
HXLINE(  76)				 ::src::compiler::commands::value::ValueCommand x = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  76)				_g = (_g + (int)1);
HXDLIN(  76)				cmds->push(x);
            			}
            		}
HXLINE(  77)		return cmds;
            	}


 ::src::compiler::object::Object MathsExpressionValueCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_81_run)
HXLINE(  82)		if ((this->_hx_operator == (int)0)) {
HXLINE(  83)			::Array< ::Dynamic> result = this->values;
HXDLIN(  83)			 ::src::compiler::object::Object result1 = result->__get((this->values->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE(  84)			{
HXLINE(  84)				int _g1 = (int)2;
HXDLIN(  84)				int _g = (this->values->length + (int)1);
HXDLIN(  84)				while((_g1 < _g)){
HXLINE(  84)					_g1 = (_g1 + (int)1);
HXDLIN(  84)					int i = (_g1 - (int)1);
HXLINE(  85)					::Array< ::Dynamic> result2 = this->values;
HXDLIN(  85)					result1 = result2->__get((this->values->length - i)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->sub(result1);
            				}
            			}
HXLINE(  87)			return result1;
            		}
            		else {
HXLINE(  88)			if ((this->_hx_operator == (int)1)) {
HXLINE(  89)				 ::src::compiler::object::Object result3 = this->values->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE(  90)				{
HXLINE(  90)					int _g11 = (int)1;
HXDLIN(  90)					int _g2 = this->values->length;
HXDLIN(  90)					while((_g11 < _g2)){
HXLINE(  90)						_g11 = (_g11 + (int)1);
HXDLIN(  90)						int i1 = (_g11 - (int)1);
HXLINE(  91)						result3 = result3->add(this->values->__get(i1).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run());
            					}
            				}
HXLINE(  93)				return result3;
            			}
            			else {
HXLINE(  94)				if ((this->_hx_operator == (int)2)) {
HXLINE(  95)					 ::src::compiler::object::Object result4 = this->values->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE(  96)					{
HXLINE(  96)						int _g12 = (int)1;
HXDLIN(  96)						int _g3 = this->values->length;
HXDLIN(  96)						while((_g12 < _g3)){
HXLINE(  96)							_g12 = (_g12 + (int)1);
HXDLIN(  96)							int i2 = (_g12 - (int)1);
HXLINE(  97)							result4 = result4->mult(this->values->__get(i2).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run());
            						}
            					}
HXLINE(  99)					return result4;
            				}
            				else {
HXLINE( 100)					if ((this->_hx_operator == (int)3)) {
HXLINE( 101)						::Array< ::Dynamic> result5 = this->values;
HXDLIN( 101)						 ::src::compiler::object::Object result6 = result5->__get((this->values->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 102)						{
HXLINE( 102)							int _g13 = (int)2;
HXDLIN( 102)							int _g4 = (this->values->length + (int)1);
HXDLIN( 102)							while((_g13 < _g4)){
HXLINE( 102)								_g13 = (_g13 + (int)1);
HXDLIN( 102)								int i3 = (_g13 - (int)1);
HXLINE( 103)								::Array< ::Dynamic> result7 = this->values;
HXDLIN( 103)								result6 = result7->__get((this->values->length - i3)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->div(result6);
            							}
            						}
HXLINE( 105)						return result6;
            					}
            					else {
HXLINE( 106)						if ((this->_hx_operator == (int)4)) {
HXLINE( 107)							::Array< ::Dynamic> result8 = this->values;
HXDLIN( 107)							 ::src::compiler::object::Object result9 = result8->__get((this->values->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 108)							{
HXLINE( 108)								int _g14 = (int)2;
HXDLIN( 108)								int _g5 = (this->values->length + (int)1);
HXDLIN( 108)								while((_g14 < _g5)){
HXLINE( 108)									_g14 = (_g14 + (int)1);
HXDLIN( 108)									int i4 = (_g14 - (int)1);
HXLINE( 109)									::Array< ::Dynamic> result10 = this->values;
HXDLIN( 109)									result9 = result10->__get((this->values->length - i4)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->intdiv(result9);
            								}
            							}
HXLINE( 111)							return result9;
            						}
            						else {
HXLINE( 112)							if ((this->_hx_operator == (int)5)) {
HXLINE( 113)								::Array< ::Dynamic> result11 = this->values;
HXDLIN( 113)								 ::src::compiler::object::Object result12 = result11->__get((this->values->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 114)								{
HXLINE( 114)									int _g15 = (int)2;
HXDLIN( 114)									int _g6 = (this->values->length + (int)1);
HXDLIN( 114)									while((_g15 < _g6)){
HXLINE( 114)										_g15 = (_g15 + (int)1);
HXDLIN( 114)										int i5 = (_g15 - (int)1);
HXLINE( 115)										::Array< ::Dynamic> result13 = this->values;
HXDLIN( 115)										result12 = result13->__get((this->values->length - i5)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->mod(result12);
            									}
            								}
HXLINE( 117)								return result12;
            							}
            							else {
HXLINE( 118)								if ((this->_hx_operator == (int)6)) {
HXLINE( 119)									::Array< ::Dynamic> result14 = this->values;
HXDLIN( 119)									 ::src::compiler::object::Object result15 = result14->__get((this->values->length - (int)1)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
HXLINE( 120)									{
HXLINE( 120)										int _g16 = (int)2;
HXDLIN( 120)										int _g7 = (this->values->length + (int)1);
HXDLIN( 120)										while((_g16 < _g7)){
HXLINE( 120)											_g16 = (_g16 + (int)1);
HXDLIN( 120)											int i6 = (_g16 - (int)1);
HXLINE( 121)											::Array< ::Dynamic> result16 = this->values;
HXDLIN( 121)											result15 = result16->__get((this->values->length - i6)).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->pow(result15);
            										}
            									}
HXLINE( 123)									return result15;
            								}
            								else {
HXLINE( 124)									if ((this->values->length == (int)1)) {
HXLINE( 125)										return this->values->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run();
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 127)		HX_STACK_DO_THROW((HX_("Invalid operator ",73,a5,0f,c3) + this->_hx_operator));
HXDLIN( 127)		return null();
            	}


::String MathsExpressionValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_132_getName)
HXDLIN( 132)		return HX_("MathsExpressionValueCommand",7d,ed,09,08);
            	}


::String MathsExpressionValueCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_137_getFriendlyName)
HXDLIN( 137)		return HX_("maths expression",ed,85,00,a3);
            	}


 ::src::compiler::bytecode::Bytecode MathsExpressionValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_898a6e1974457f84_141_getBytecode)
HXLINE( 142)		 ::src::compiler::bytecode::Bytecode op = ::src::compiler::bytecode::Bytecode_obj::fromInt(this->_hx_operator,null());
HXLINE( 143)		::cpp::VirtualArray arr = this->values->copy();
HXLINE( 144)		arr->insert((int)0,op);
HXLINE( 145)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(arr,this->getCodeID());
            	}


::Array< ::Dynamic> MathsExpressionValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_898a6e1974457f84_149_reconstruct)
HXLINE( 150)		::String op = ::Array_obj< ::String >::fromData( _hx_array_data_5b8a13bf_18,7)->__get(this->_hx_operator);
HXLINE( 151)		 ::src::ast::maths::MathsOperatorToken _hx_tmp =  ::src::ast::maths::MathsOperatorToken_obj::__alloc( HX_CTX ,op);
HXDLIN( 151)		return _hx_tmp->join(::src::compiler::commands::Command_obj::reconstructCommands(this->values),null());
            	}


 ::src::compiler::commands::value::MathsExpressionValueCommand MathsExpressionValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_898a6e1974457f84_18_fromTokens)
HXLINE(  19)		int state = (int)7;
HXLINE(  20)		{
HXLINE(  20)			int _g = (int)0;
HXDLIN(  20)			while((_g < tokens->length)){
HXLINE(  20)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  20)				_g = (_g + (int)1);
HXLINE(  21)				if ((token->getName() == HX_("MathsOperatorToken",2a,dc,94,41))) {
HXLINE(  22)					::String op = ( (::String)(token->getContent()) );
HXLINE(  23)					if ((op == HX_("-",2d,00,00,00))) {
HXLINE(  23)						state = (int)0;
            					}
            					else {
HXLINE(  24)						bool _hx_tmp;
HXDLIN(  24)						if ((op == HX_("+",2b,00,00,00))) {
HXLINE(  24)							_hx_tmp = (state > (int)1);
            						}
            						else {
HXLINE(  24)							_hx_tmp = false;
            						}
HXDLIN(  24)						if (_hx_tmp) {
HXLINE(  24)							state = (int)1;
            						}
            						else {
HXLINE(  25)							bool _hx_tmp1;
HXDLIN(  25)							if ((op == HX_("*",2a,00,00,00))) {
HXLINE(  25)								_hx_tmp1 = (state > (int)2);
            							}
            							else {
HXLINE(  25)								_hx_tmp1 = false;
            							}
HXDLIN(  25)							if (_hx_tmp1) {
HXLINE(  25)								state = (int)2;
            							}
            							else {
HXLINE(  26)								bool _hx_tmp2;
HXDLIN(  26)								if ((op == HX_("/",2f,00,00,00))) {
HXLINE(  26)									_hx_tmp2 = (state > (int)3);
            								}
            								else {
HXLINE(  26)									_hx_tmp2 = false;
            								}
HXDLIN(  26)								if (_hx_tmp2) {
HXLINE(  26)									state = (int)3;
            								}
            								else {
HXLINE(  27)									bool _hx_tmp3;
HXDLIN(  27)									if ((op == HX_("//",20,29,00,00))) {
HXLINE(  27)										_hx_tmp3 = (state > (int)4);
            									}
            									else {
HXLINE(  27)										_hx_tmp3 = false;
            									}
HXDLIN(  27)									if (_hx_tmp3) {
HXLINE(  27)										state = (int)4;
            									}
            									else {
HXLINE(  28)										bool _hx_tmp4;
HXDLIN(  28)										if ((op == HX_("%",25,00,00,00))) {
HXLINE(  28)											_hx_tmp4 = (state > (int)5);
            										}
            										else {
HXLINE(  28)											_hx_tmp4 = false;
            										}
HXDLIN(  28)										if (_hx_tmp4) {
HXLINE(  28)											state = (int)5;
            										}
            										else {
HXLINE(  29)											bool _hx_tmp5;
HXDLIN(  29)											if ((op == HX_("**",c0,24,00,00))) {
HXLINE(  29)												_hx_tmp5 = (state > (int)6);
            											}
            											else {
HXLINE(  29)												_hx_tmp5 = false;
            											}
HXDLIN(  29)											if (_hx_tmp5) {
HXLINE(  29)												state = (int)6;
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  34)		if ((state == (int)7)) {
HXLINE(  35)			if ((tokens->length == (int)1)) {
HXLINE(  36)				return  ::src::compiler::commands::value::MathsExpressionValueCommand_obj::__alloc( HX_CTX ,scope,state,::Array_obj< ::Dynamic>::__new(1)->init(0,::src::compiler::commands::value::ValueCommand_obj::fromToken(scope,tokens->__get((int)0).StaticCast<  ::src::ast::Token >())));
            			}
            			else {
HXLINE(  37)				HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,(HX_("Invalid mathematical expression ",b9,f5,76,a9) + ::Std_obj::string(tokens))));
            			}
            		}
            		else {
HXLINE(  39)			::String op1 = ::Array_obj< ::String >::fromData( _hx_array_data_5b8a13bf_21,7)->__get(state);
HXLINE(  40)			::Array< ::Dynamic> spl = ::src::compiler::commands::value::ValueCommand_obj::splitTokens(scope,tokens,HX_("MathsOperatorToken",2a,dc,94,41),false,op1);
HXLINE(  41)			return  ::src::compiler::commands::value::MathsExpressionValueCommand_obj::__alloc( HX_CTX ,scope,state,spl);
            		}
HXLINE(  34)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathsExpressionValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::MathsExpressionValueCommand MathsExpressionValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_898a6e1974457f84_46_fromBytecode)
HXLINE(  47)		int op = ( (int)(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope)) );
HXLINE(  48)		::Array< ::Dynamic> values = ::Array_obj< ::Dynamic>::__new();
HXLINE(  49)		while((arr->length > (int)0)){
HXLINE(  49)			values->push(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            		}
HXLINE(  50)		return  ::src::compiler::commands::value::MathsExpressionValueCommand_obj::__alloc( HX_CTX ,scope,op,values);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathsExpressionValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< MathsExpressionValueCommand_obj > MathsExpressionValueCommand_obj::__new( ::src::compiler::Scope scope,int _hx_operator,::Array< ::Dynamic> values) {
	hx::ObjectPtr< MathsExpressionValueCommand_obj > __this = new MathsExpressionValueCommand_obj();
	__this->__construct(scope,_hx_operator,values);
	return __this;
}

hx::ObjectPtr< MathsExpressionValueCommand_obj > MathsExpressionValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,int _hx_operator,::Array< ::Dynamic> values) {
	MathsExpressionValueCommand_obj *__this = (MathsExpressionValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MathsExpressionValueCommand_obj), true, "src.compiler.commands.value.MathsExpressionValueCommand"));
	*(void **)__this = MathsExpressionValueCommand_obj::_hx_vtable;
	__this->__construct(scope,_hx_operator,values);
	return __this;
}

MathsExpressionValueCommand_obj::MathsExpressionValueCommand_obj()
{
}

void MathsExpressionValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MathsExpressionValueCommand);
	HX_MARK_MEMBER_NAME(_hx_operator,"operator");
	HX_MARK_MEMBER_NAME(values,"values");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MathsExpressionValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx_operator,"operator");
	HX_VISIT_MEMBER_NAME(values,"values");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MathsExpressionValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"operator") ) { return hx::Val( _hx_operator ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MathsExpressionValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val MathsExpressionValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"operator") ) { _hx_operator=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MathsExpressionValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("operator","\xa4","\x1b","\x73","\x44"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MathsExpressionValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(MathsExpressionValueCommand_obj,_hx_operator),HX_HCSTRING("operator","\xa4","\x1b","\x73","\x44")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MathsExpressionValueCommand_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MathsExpressionValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String MathsExpressionValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("operator","\xa4","\x1b","\x73","\x44"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void MathsExpressionValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathsExpressionValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathsExpressionValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathsExpressionValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class MathsExpressionValueCommand_obj::__mClass;

static ::String MathsExpressionValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void MathsExpressionValueCommand_obj::__register()
{
	hx::Object *dummy = new MathsExpressionValueCommand_obj;
	MathsExpressionValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.MathsExpressionValueCommand","\xbf","\x13","\x8a","\x5b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathsExpressionValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MathsExpressionValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MathsExpressionValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MathsExpressionValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MathsExpressionValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathsExpressionValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathsExpressionValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathsExpressionValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
