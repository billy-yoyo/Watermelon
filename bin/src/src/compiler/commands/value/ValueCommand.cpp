// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_FunctionDefinitionCommand
#include <src/compiler/commands/FunctionDefinitionCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_BinaryExpressionValueCommand
#include <src/compiler/commands/value/BinaryExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_BoolExpressionValueCommand
#include <src/compiler/commands/value/BoolExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ContainsValueCommand
#include <src/compiler/commands/value/ContainsValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_EqualityValueCommand
#include <src/compiler/commands/value/EqualityValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_FunctionCallValueCommand
#include <src/compiler/commands/value/FunctionCallValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ListValueCommand
#include <src/compiler/commands/value/ListValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_MapValueCommand
#include <src/compiler/commands/value/MapValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_MathsExpressionValueCommand
#include <src/compiler/commands/value/MathsExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ObjectArrayAccessValueCommand
#include <src/compiler/commands/value/ObjectArrayAccessValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ObjectValueCommand
#include <src/compiler/commands/value/ObjectValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_TupleValueCommand
#include <src/compiler/commands/value/TupleValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_VariableValueCommand
#include <src/compiler/commands/value/VariableValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb608a82cda12f06_13_new,"src.compiler.commands.value.ValueCommand","new",0xd6e05a6a,"src.compiler.commands.value.ValueCommand.new","src/compiler/commands/value/ValueCommand.hx",13,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_127_getName,"src.compiler.commands.value.ValueCommand","getName",0x361d790b,"src.compiler.commands.value.ValueCommand.getName","src/compiler/commands/value/ValueCommand.hx",127,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_17_splitTokens,"src.compiler.commands.value.ValueCommand","splitTokens",0xb8d1b9de,"src.compiler.commands.value.ValueCommand.splitTokens","src/compiler/commands/value/ValueCommand.hx",17,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_36_fromTokens,"src.compiler.commands.value.ValueCommand","fromTokens",0x959c479a,"src.compiler.commands.value.ValueCommand.fromTokens","src/compiler/commands/value/ValueCommand.hx",36,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_93_fromToken,"src.compiler.commands.value.ValueCommand","fromToken",0x421b1ab9,"src.compiler.commands.value.ValueCommand.fromToken","src/compiler/commands/value/ValueCommand.hx",93,0x19b513a4)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void ValueCommand_obj::__construct( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_13_new)
HXDLIN(  13)		super::__construct(scope);
            	}

Dynamic ValueCommand_obj::__CreateEmpty() { return new ValueCommand_obj; }

void *ValueCommand_obj::_hx_vtable = 0;

Dynamic ValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ValueCommand_obj > _hx_result = new ValueCommand_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1020cfc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
	} else {
		return inClassId==(int)0x20538180;
	}
}

::String ValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_127_getName)
HXDLIN( 127)		return HX_("ValueCommand",fa,a5,fa,51);
            	}


::Array< ::Dynamic> ValueCommand_obj::splitTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens,::String splitToken, ::Dynamic singular,::String content){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_17_splitTokens)
HXLINE(  18)		if (hx::IsNull( singular )) {
HXLINE(  18)			singular = false;
            		}
HXLINE(  19)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE(  20)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new();
HXLINE(  21)		{
HXLINE(  21)			int _g = (int)0;
HXDLIN(  21)			while((_g < tokens->length)){
HXLINE(  21)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  21)				_g = (_g + (int)1);
HXLINE(  22)				bool _hx_tmp;
HXDLIN(  22)				if ((token->getName() == splitToken)) {
HXLINE(  22)					if (hx::IsNotNull( content )) {
HXLINE(  22)						_hx_tmp = hx::IsEq( token->getContent(),content );
            					}
            					else {
HXLINE(  22)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(  22)					_hx_tmp = false;
            				}
HXDLIN(  22)				if (_hx_tmp) {
HXLINE(  23)					bool _hx_tmp1;
HXDLIN(  23)					if (!(!(singular))) {
HXLINE(  23)						if (singular) {
HXLINE(  23)							_hx_tmp1 = (arr->length == (int)1);
            						}
            						else {
HXLINE(  23)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE(  23)						_hx_tmp1 = true;
            					}
HXDLIN(  23)					if (_hx_tmp1) {
HXLINE(  24)						result->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,arr));
HXLINE(  25)						arr = ::Array_obj< ::Dynamic>::__new();
            					}
            					else {
HXLINE(  26)						HX_STACK_DO_THROW((HX_("Invalid number of tokens, expected 1 per split, found ",db,19,23,42) + arr->length));
            					}
            				}
            				else {
HXLINE(  28)					arr->push(token);
            				}
            			}
            		}
HXLINE(  31)		result->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,arr));
HXLINE(  32)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ValueCommand_obj,splitTokens,return )

 ::src::compiler::commands::value::ValueCommand ValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_bb608a82cda12f06_36_fromTokens)
HXLINE(  37)		if ((tokens->length == (int)0)) {
HXLINE(  37)			HX_STACK_DO_THROW(HX_("Empty value command",a9,28,45,af));
            		}
HXLINE(  38)		if ((tokens->length == (int)1)) {
HXLINE(  39)			return ::src::compiler::commands::value::ValueCommand_obj::fromToken(scope,tokens->__get((int)0).StaticCast<  ::src::ast::Token >());
            		}
            		else {
HXLINE(  42)			bool _hx_tmp;
HXDLIN(  42)			bool _hx_tmp1;
HXDLIN(  42)			bool _hx_tmp2;
HXDLIN(  42)			if ((tokens->length == (int)2)) {
HXLINE(  42)				_hx_tmp2 = (tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("VariableToken",fd,96,04,01));
            			}
            			else {
HXLINE(  42)				_hx_tmp2 = false;
            			}
HXDLIN(  42)			if (!(_hx_tmp2)) {
HXLINE(  42)				_hx_tmp1 = ::src::compiler::commands::Command_obj::contains(tokens,HX_("AccessToken",95,02,10,8a));
            			}
            			else {
HXLINE(  42)				_hx_tmp1 = true;
            			}
HXDLIN(  42)			if (_hx_tmp1) {
HXLINE(  42)				_hx_tmp = (tokens->__get((tokens->length - (int)1)).StaticCast<  ::src::ast::Token >()->getName() == HX_("BracketToken",d1,67,c5,1e));
            			}
            			else {
HXLINE(  42)				_hx_tmp = false;
            			}
HXDLIN(  42)			if (_hx_tmp) {
HXLINE(  43)				::Array< ::Dynamic> _hx_tmp3 = tokens->splice((int)0,(tokens->length - (int)1));
HXDLIN(  43)				return ::src::compiler::commands::value::FunctionCallValueCommand_obj::fromTokens(scope,_hx_tmp3,tokens->pop().StaticCast<  ::src::ast::Token >());
            			}
HXLINE(  46)			bool _hx_tmp4;
HXDLIN(  46)			if ((tokens->length == (int)2)) {
HXLINE(  46)				_hx_tmp4 = (tokens->__get((int)1).StaticCast<  ::src::ast::Token >()->getName() == HX_("ListToken",9b,21,3f,cc));
            			}
            			else {
HXLINE(  46)				_hx_tmp4 = false;
            			}
HXDLIN(  46)			if (_hx_tmp4) {
HXLINE(  47)				return ::src::compiler::commands::value::ObjectArrayAccessValueCommand_obj::fromTokens(scope,tokens);
            			}
HXLINE(  50)			bool isFunc = false;
HXLINE(  51)			bool isIn = false;
HXLINE(  52)			bool isTuple = false;
HXLINE(  53)			bool isBool = false;
HXLINE(  54)			bool isEquality = false;
HXLINE(  55)			bool isVarAccess = false;
HXLINE(  56)			bool isMathsExpression = false;
HXLINE(  57)			bool isBinaryExpression = false;
HXLINE(  59)			{
HXLINE(  59)				int _g = (int)0;
HXDLIN(  59)				while((_g < tokens->length)){
HXLINE(  59)					 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  59)					_g = (_g + (int)1);
HXLINE(  60)					bool _hx_tmp5;
HXDLIN(  60)					if ((token->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  60)						_hx_tmp5 = hx::IsEq( token->getContent(),HX_("in",e5,5b,00,00) );
            					}
            					else {
HXLINE(  60)						_hx_tmp5 = false;
            					}
HXDLIN(  60)					if (_hx_tmp5) {
HXLINE(  60)						isIn = true;
            					}
HXLINE(  61)					bool _hx_tmp6;
HXDLIN(  61)					if ((token->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  61)						_hx_tmp6 = hx::IsEq( token->getContent(),HX_("func",44,eb,c4,43) );
            					}
            					else {
HXLINE(  61)						_hx_tmp6 = false;
            					}
HXDLIN(  61)					if (_hx_tmp6) {
HXLINE(  61)						isFunc = true;
            					}
HXLINE(  62)					if ((token->getName() == HX_("CommaToken",04,01,3f,49))) {
HXLINE(  62)						isTuple = true;
            					}
HXLINE(  63)					if ((token->getName() == HX_("BooleanOperatorToken",0d,6d,dc,5d))) {
HXLINE(  63)						isBool = true;
            					}
HXLINE(  64)					if ((token->getName() == HX_("EqualityOperatorToken",3b,c5,40,33))) {
HXLINE(  64)						isEquality = true;
            					}
HXLINE(  65)					if ((token->getName() == HX_("AccessToken",95,02,10,8a))) {
HXLINE(  65)						isVarAccess = true;
            					}
HXLINE(  66)					if ((token->getName() == HX_("MathsOperatorToken",2a,dc,94,41))) {
HXLINE(  66)						isMathsExpression = true;
            					}
HXLINE(  67)					if ((token->getName() == HX_("BinaryOperatorToken",d4,03,95,d1))) {
HXLINE(  67)						isBinaryExpression = true;
            					}
            				}
            			}
HXLINE(  70)			if (isTuple) {
HXLINE(  71)				return ::src::compiler::commands::value::TupleValueCommand_obj::fromTokens(scope,tokens);
            			}
            			else {
HXLINE(  72)				if (isEquality) {
HXLINE(  73)					return ::src::compiler::commands::value::EqualityValueCommand_obj::fromTokens(scope,tokens);
            				}
            				else {
HXLINE(  74)					if (isBool) {
HXLINE(  75)						return ::src::compiler::commands::value::BoolExpressionValueCommand_obj::fromTokens(scope,tokens);
            					}
            					else {
HXLINE(  76)						if (isIn) {
HXLINE(  77)							return ::src::compiler::commands::value::ContainsValueCommand_obj::fromTokens(scope,tokens);
            						}
            						else {
HXLINE(  78)							if (isFunc) {
HXLINE(  79)								return ::src::compiler::commands::FunctionDefinitionCommand_obj::fromTokens(scope,tokens);
            							}
            							else {
HXLINE(  80)								if (isBinaryExpression) {
HXLINE(  81)									return ::src::compiler::commands::value::BinaryExpressionValueCommand_obj::fromTokens(scope,tokens);
            								}
            								else {
HXLINE(  82)									if (isMathsExpression) {
HXLINE(  83)										return ::src::compiler::commands::value::MathsExpressionValueCommand_obj::fromTokens(scope,tokens);
            									}
            									else {
HXLINE(  84)										if (isVarAccess) {
HXLINE(  85)											return ::src::compiler::commands::value::VariableValueCommand_obj::fromTokens(scope,tokens);
            										}
            										else {
HXLINE(  87)											HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,(HX_("Invalid value command ",2d,1a,e1,9a) + ::Std_obj::string(tokens))));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  38)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::ValueCommand ValueCommand_obj::fromToken( ::src::compiler::Scope scope, ::src::ast::Token token){
            	HX_GC_STACKFRAME(&_hx_pos_bb608a82cda12f06_93_fromToken)
HXLINE(  94)		::String name = token->getName();
HXLINE(  95)		if ((name == HX_("VariableToken",fd,96,04,01))) {
HXLINE(  96)			return ::src::compiler::commands::value::VariableValueCommand_obj::fromTokens(scope,::Array_obj< ::Dynamic>::__new(1)->init(0,token));
            		}
            		else {
HXLINE(  97)			if ((name == HX_("ListToken",9b,21,3f,cc))) {
HXLINE(  98)				return ::src::compiler::commands::value::ListValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
            			}
            			else {
HXLINE(  99)				if ((name == HX_("BlockToken",8c,2a,40,e2))) {
HXLINE( 100)					return ::src::compiler::commands::value::MapValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
            				}
            				else {
HXLINE( 101)					if ((name == HX_("BracketToken",d1,67,c5,1e))) {
HXLINE( 102)						return ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
            					}
            					else {
HXLINE( 103)						if ((name == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE( 104)							::String content = ( (::String)(token->getContent()) );
HXLINE( 105)							if ((content == HX_("true",4e,a7,03,4d))) {
HXLINE( 106)								return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,true,HX_("BoolType",24,bc,95,8f));
            							}
            							else {
HXLINE( 107)								if ((content == HX_("false",a3,35,4f,fb))) {
HXLINE( 108)									return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,false,HX_("BoolType",24,bc,95,8f));
            								}
            								else {
HXLINE( 109)									if ((content == HX_("none",b8,12,0a,49))) {
HXLINE( 110)										return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,null(),HX_("NoneType",b2,a9,c9,cf));
            									}
            									else {
HXLINE( 112)										HX_STACK_DO_THROW((HX_("Keyword token being used as a value, ",5c,6f,36,ee) + content));
            									}
            								}
            							}
            						}
            						else {
HXLINE( 114)							bool _hx_tmp;
HXDLIN( 114)							if ((name != HX_("IntegerToken",7b,f0,70,21))) {
HXLINE( 114)								_hx_tmp = (name == HX_("HexToken",3e,32,54,20));
            							}
            							else {
HXLINE( 114)								_hx_tmp = true;
            							}
HXDLIN( 114)							if (_hx_tmp) {
HXLINE( 115)								return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,::Std_obj::parseInt(( (::String)(token->getContent()) )),HX_("IntType",29,f7,3d,d9));
            							}
            							else {
HXLINE( 116)								if ((name == HX_("FloatToken",dd,5b,75,29))) {
HXLINE( 117)									return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,::Std_obj::parseFloat(( (::String)(token->getContent()) )),HX_("FloatType",56,c2,14,a2));
            								}
            								else {
HXLINE( 118)									if ((name == HX_("StringToken",48,cc,60,03))) {
HXLINE( 119)										return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,token->getContent(),HX_("StringType",4b,88,b6,f5));
            									}
            									else {
HXLINE( 121)										HX_STACK_DO_THROW((HX_("Invalid value token ",bf,22,ce,5d) + name));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  95)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ValueCommand_obj,fromToken,return )


hx::ObjectPtr< ValueCommand_obj > ValueCommand_obj::__new( ::src::compiler::Scope scope) {
	hx::ObjectPtr< ValueCommand_obj > __this = new ValueCommand_obj();
	__this->__construct(scope);
	return __this;
}

hx::ObjectPtr< ValueCommand_obj > ValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope) {
	ValueCommand_obj *__this = (ValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ValueCommand_obj), true, "src.compiler.commands.value.ValueCommand"));
	*(void **)__this = ValueCommand_obj::_hx_vtable;
	__this->__construct(scope);
	return __this;
}

ValueCommand_obj::ValueCommand_obj()
{
}

hx::Val ValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromToken") ) { outValue = fromToken_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"splitTokens") ) { outValue = splitTokens_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ValueCommand_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String ValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	::String(null()) };

static void ValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class ValueCommand_obj::__mClass;

static ::String ValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("splitTokens","\xd4","\x15","\x3d","\x16"),
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromToken","\x2f","\x6d","\xb4","\xc8"),
	::String(null())
};

void ValueCommand_obj::__register()
{
	hx::Object *dummy = new ValueCommand_obj;
	ValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.ValueCommand","\x78","\x9d","\xfc","\x88");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
