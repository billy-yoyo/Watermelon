// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_StringToken
#include <src/ast/base/StringToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_HexToken
#include <src/ast/maths/HexToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_IntegerToken
#include <src/ast/maths/IntegerToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_FunctionDefinitionCommand
#include <src/compiler/commands/FunctionDefinitionCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_BinaryExpressionValueCommand
#include <src/compiler/commands/value/BinaryExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_BoolExpressionValueCommand
#include <src/compiler/commands/value/BoolExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ContainsValueCommand
#include <src/compiler/commands/value/ContainsValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_EqualityValueCommand
#include <src/compiler/commands/value/EqualityValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_FunctionCallValueCommand
#include <src/compiler/commands/value/FunctionCallValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ListValueCommand
#include <src/compiler/commands/value/ListValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_MapValueCommand
#include <src/compiler/commands/value/MapValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_MathsExpressionValueCommand
#include <src/compiler/commands/value/MathsExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_NegationValueCommand
#include <src/compiler/commands/value/NegationValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ObjectArrayAccessValueCommand
#include <src/compiler/commands/value/ObjectArrayAccessValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ObjectValueCommand
#include <src/compiler/commands/value/ObjectValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_SpliceValueCommand
#include <src/compiler/commands/value/SpliceValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_StringFormatValueCommand
#include <src/compiler/commands/value/StringFormatValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_TupleValueCommand
#include <src/compiler/commands/value/TupleValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_VariableValueCommand
#include <src/compiler/commands/value/VariableValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb608a82cda12f06_18_new,"src.compiler.commands.value.ValueCommand","new",0xd6e05a6a,"src.compiler.commands.value.ValueCommand.new","src/compiler/commands/value/ValueCommand.hx",18,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_173_getName,"src.compiler.commands.value.ValueCommand","getName",0x361d790b,"src.compiler.commands.value.ValueCommand.getName","src/compiler/commands/value/ValueCommand.hx",173,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_178_getFriendlyName,"src.compiler.commands.value.ValueCommand","getFriendlyName",0xa5ad0316,"src.compiler.commands.value.ValueCommand.getFriendlyName","src/compiler/commands/value/ValueCommand.hx",178,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_22_processStringEscapes,"src.compiler.commands.value.ValueCommand","processStringEscapes",0x053517c8,"src.compiler.commands.value.ValueCommand.processStringEscapes","src/compiler/commands/value/ValueCommand.hx",22,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_26_splitTokens,"src.compiler.commands.value.ValueCommand","splitTokens",0xb8d1b9de,"src.compiler.commands.value.ValueCommand.splitTokens","src/compiler/commands/value/ValueCommand.hx",26,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_45_fromTokens,"src.compiler.commands.value.ValueCommand","fromTokens",0x959c479a,"src.compiler.commands.value.ValueCommand.fromTokens","src/compiler/commands/value/ValueCommand.hx",45,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_110_fromToken,"src.compiler.commands.value.ValueCommand","fromToken",0x421b1ab9,"src.compiler.commands.value.ValueCommand.fromToken","src/compiler/commands/value/ValueCommand.hx",110,0x19b513a4)
HX_LOCAL_STACK_FRAME(_hx_pos_bb608a82cda12f06_165_copyArray,"src.compiler.commands.value.ValueCommand","copyArray",0x24f13f2e,"src.compiler.commands.value.ValueCommand.copyArray","src/compiler/commands/value/ValueCommand.hx",165,0x19b513a4)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void ValueCommand_obj::__construct( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_18_new)
HXDLIN(  18)		super::__construct(scope);
            	}

Dynamic ValueCommand_obj::__CreateEmpty() { return new ValueCommand_obj; }

void *ValueCommand_obj::_hx_vtable = 0;

Dynamic ValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ValueCommand_obj > _hx_result = new ValueCommand_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1020cfc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
	} else {
		return inClassId==(int)0x20538180;
	}
}

::String ValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_173_getName)
HXDLIN( 173)		return HX_("ValueCommand",fa,a5,fa,51);
            	}


::String ValueCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_178_getFriendlyName)
HXDLIN( 178)		return HX_("value",71,7f,b8,31);
            	}


::String ValueCommand_obj::processStringEscapes(::String content){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_22_processStringEscapes)
HXDLIN(  22)		return content;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ValueCommand_obj,processStringEscapes,return )

::Array< ::Dynamic> ValueCommand_obj::splitTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens,::String splitToken, ::Dynamic singular,::String content){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_26_splitTokens)
HXLINE(  27)		if (hx::IsNull( singular )) {
HXLINE(  27)			singular = false;
            		}
HXLINE(  28)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE(  29)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new();
HXLINE(  30)		{
HXLINE(  30)			int _g = (int)0;
HXDLIN(  30)			while((_g < tokens->length)){
HXLINE(  30)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  30)				_g = (_g + (int)1);
HXLINE(  31)				bool _hx_tmp;
HXDLIN(  31)				if ((token->getName() == splitToken)) {
HXLINE(  31)					if (hx::IsNotNull( content )) {
HXLINE(  31)						_hx_tmp = hx::IsEq( token->getContent(),content );
            					}
            					else {
HXLINE(  31)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(  31)					_hx_tmp = false;
            				}
HXDLIN(  31)				if (_hx_tmp) {
HXLINE(  32)					bool _hx_tmp1;
HXDLIN(  32)					if (!(!(singular))) {
HXLINE(  32)						if (singular) {
HXLINE(  32)							_hx_tmp1 = (arr->length == (int)1);
            						}
            						else {
HXLINE(  32)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE(  32)						_hx_tmp1 = true;
            					}
HXDLIN(  32)					if (_hx_tmp1) {
HXLINE(  33)						result->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,arr));
HXLINE(  34)						arr = ::Array_obj< ::Dynamic>::__new();
            					}
            					else {
HXLINE(  35)						HX_STACK_DO_THROW((HX_("Invalid number of tokens, expected 1 per split, found ",db,19,23,42) + arr->length));
            					}
            				}
            				else {
HXLINE(  37)					arr->push(token);
            				}
            			}
            		}
HXLINE(  40)		result->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,arr));
HXLINE(  41)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ValueCommand_obj,splitTokens,return )

 ::src::compiler::commands::value::ValueCommand ValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_bb608a82cda12f06_45_fromTokens)
HXLINE(  46)		if ((tokens->length == (int)0)) {
HXLINE(  46)			HX_STACK_DO_THROW(HX_("Empty value command",a9,28,45,af));
            		}
HXLINE(  47)		if ((tokens->length == (int)1)) {
HXLINE(  48)			return ::src::compiler::commands::value::ValueCommand_obj::fromToken(scope,tokens->__get((int)0).StaticCast<  ::src::ast::Token >());
            		}
            		else {
HXLINE(  51)			bool _hx_tmp;
HXDLIN(  51)			bool _hx_tmp1;
HXDLIN(  51)			bool _hx_tmp2;
HXDLIN(  51)			if ((tokens->length == (int)2)) {
HXLINE(  51)				_hx_tmp2 = (tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("VariableToken",fd,96,04,01));
            			}
            			else {
HXLINE(  51)				_hx_tmp2 = false;
            			}
HXDLIN(  51)			if (!(_hx_tmp2)) {
HXLINE(  51)				_hx_tmp1 = ::src::compiler::commands::Command_obj::contains(tokens,HX_("AccessToken",95,02,10,8a));
            			}
            			else {
HXLINE(  51)				_hx_tmp1 = true;
            			}
HXDLIN(  51)			if (_hx_tmp1) {
HXLINE(  51)				_hx_tmp = (tokens->__get((tokens->length - (int)1)).StaticCast<  ::src::ast::Token >()->getName() == HX_("BracketToken",d1,67,c5,1e));
            			}
            			else {
HXLINE(  51)				_hx_tmp = false;
            			}
HXDLIN(  51)			if (_hx_tmp) {
HXLINE(  52)				::Array< ::Dynamic> _hx_tmp3 = tokens->splice((int)0,(tokens->length - (int)1));
HXDLIN(  52)				return ::src::compiler::commands::value::FunctionCallValueCommand_obj::fromTokens(scope,_hx_tmp3,tokens->pop().StaticCast<  ::src::ast::Token >());
            			}
HXLINE(  55)			bool _hx_tmp4;
HXDLIN(  55)			if ((tokens->length == (int)2)) {
HXLINE(  55)				_hx_tmp4 = (tokens->__get((int)1).StaticCast<  ::src::ast::Token >()->getName() == HX_("ListToken",9b,21,3f,cc));
            			}
            			else {
HXLINE(  55)				_hx_tmp4 = false;
            			}
HXDLIN(  55)			if (_hx_tmp4) {
HXLINE(  56)				return ::src::compiler::commands::value::ObjectArrayAccessValueCommand_obj::fromTokens(scope,tokens);
            			}
HXLINE(  59)			bool _hx_tmp5;
HXDLIN(  59)			bool _hx_tmp6;
HXDLIN(  59)			if ((tokens->length > (int)1)) {
HXLINE(  59)				_hx_tmp6 = (tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("MathsOperatorToken",2a,dc,94,41));
            			}
            			else {
HXLINE(  59)				_hx_tmp6 = false;
            			}
HXDLIN(  59)			if (_hx_tmp6) {
HXLINE(  59)				_hx_tmp5 = hx::IsEq( tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent(),HX_("-",2d,00,00,00) );
            			}
            			else {
HXLINE(  59)				_hx_tmp5 = false;
            			}
HXDLIN(  59)			if (_hx_tmp5) {
HXLINE(  60)				return ::src::compiler::commands::value::NegationValueCommand_obj::fromTokens(scope,tokens);
            			}
HXLINE(  63)			bool isFunc = false;
HXLINE(  64)			bool isIn = false;
HXLINE(  65)			bool isTuple = false;
HXLINE(  66)			bool isBool = false;
HXLINE(  67)			bool isEquality = false;
HXLINE(  68)			bool isVarAccess = false;
HXLINE(  69)			bool isMathsExpression = false;
HXLINE(  70)			bool isBinaryExpression = false;
HXLINE(  71)			bool isSplice = false;
HXLINE(  73)			{
HXLINE(  73)				int _g = (int)0;
HXDLIN(  73)				while((_g < tokens->length)){
HXLINE(  73)					 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  73)					_g = (_g + (int)1);
HXLINE(  74)					bool _hx_tmp7;
HXDLIN(  74)					if ((token->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  74)						_hx_tmp7 = hx::IsEq( token->getContent(),HX_("in",e5,5b,00,00) );
            					}
            					else {
HXLINE(  74)						_hx_tmp7 = false;
            					}
HXDLIN(  74)					if (_hx_tmp7) {
HXLINE(  74)						isIn = true;
            					}
HXLINE(  75)					bool _hx_tmp8;
HXDLIN(  75)					if ((token->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  75)						_hx_tmp8 = hx::IsEq( token->getContent(),HX_("func",44,eb,c4,43) );
            					}
            					else {
HXLINE(  75)						_hx_tmp8 = false;
            					}
HXDLIN(  75)					if (_hx_tmp8) {
HXLINE(  75)						isFunc = true;
            					}
HXLINE(  76)					if ((token->getName() == HX_("CommaToken",04,01,3f,49))) {
HXLINE(  76)						isTuple = true;
            					}
HXLINE(  77)					if ((token->getName() == HX_("BooleanOperatorToken",0d,6d,dc,5d))) {
HXLINE(  77)						isBool = true;
            					}
HXLINE(  78)					if ((token->getName() == HX_("EqualityOperatorToken",3b,c5,40,33))) {
HXLINE(  78)						isEquality = true;
            					}
HXLINE(  79)					if ((token->getName() == HX_("AccessToken",95,02,10,8a))) {
HXLINE(  79)						isVarAccess = true;
            					}
HXLINE(  80)					if ((token->getName() == HX_("MathsOperatorToken",2a,dc,94,41))) {
HXLINE(  80)						isMathsExpression = true;
            					}
HXLINE(  81)					if ((token->getName() == HX_("BinaryOperatorToken",d4,03,95,d1))) {
HXLINE(  81)						isBinaryExpression = true;
            					}
HXLINE(  82)					if ((token->getName() == HX_("SpliceToken",bd,a3,6b,7a))) {
HXLINE(  82)						isSplice = true;
            					}
            				}
            			}
HXLINE(  85)			if (isTuple) {
HXLINE(  86)				return ::src::compiler::commands::value::TupleValueCommand_obj::fromTokens(scope,tokens);
            			}
            			else {
HXLINE(  87)				if (isSplice) {
HXLINE(  88)					return ::src::compiler::commands::value::SpliceValueCommand_obj::fromTokens(scope,tokens);
            				}
            				else {
HXLINE(  89)					if (isEquality) {
HXLINE(  90)						return ::src::compiler::commands::value::EqualityValueCommand_obj::fromTokens(scope,tokens);
            					}
            					else {
HXLINE(  91)						if (isBool) {
HXLINE(  92)							return ::src::compiler::commands::value::BoolExpressionValueCommand_obj::fromTokens(scope,tokens);
            						}
            						else {
HXLINE(  93)							if (isIn) {
HXLINE(  94)								return ::src::compiler::commands::value::ContainsValueCommand_obj::fromTokens(scope,tokens);
            							}
            							else {
HXLINE(  95)								if (isFunc) {
HXLINE(  96)									return ::src::compiler::commands::FunctionDefinitionCommand_obj::fromTokens(scope,tokens);
            								}
            								else {
HXLINE(  97)									if (isBinaryExpression) {
HXLINE(  98)										return ::src::compiler::commands::value::BinaryExpressionValueCommand_obj::fromTokens(scope,tokens);
            									}
            									else {
HXLINE(  99)										if (isMathsExpression) {
HXLINE( 100)											return ::src::compiler::commands::value::MathsExpressionValueCommand_obj::fromTokens(scope,tokens);
            										}
            										else {
HXLINE( 101)											if (isVarAccess) {
HXLINE( 102)												return ::src::compiler::commands::value::VariableValueCommand_obj::fromTokens(scope,tokens);
            											}
            											else {
HXLINE( 104)												HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,(HX_("Invalid value command ",2d,1a,e1,9a) + ::Std_obj::string(tokens))));
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  47)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::ValueCommand ValueCommand_obj::fromToken( ::src::compiler::Scope scope, ::src::ast::Token token){
            	HX_GC_STACKFRAME(&_hx_pos_bb608a82cda12f06_110_fromToken)
HXLINE( 111)		::String name = token->getName();
HXLINE( 112)		if ((name == HX_("VariableToken",fd,96,04,01))) {
HXLINE( 113)			return ::src::compiler::commands::value::VariableValueCommand_obj::fromTokens(scope,::Array_obj< ::Dynamic>::__new(1)->init(0,token));
            		}
            		else {
HXLINE( 114)			if ((name == HX_("ListToken",9b,21,3f,cc))) {
HXLINE( 115)				return ::src::compiler::commands::value::ListValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
            			}
            			else {
HXLINE( 116)				if ((name == HX_("BlockToken",8c,2a,40,e2))) {
HXLINE( 117)					return ::src::compiler::commands::value::MapValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
            				}
            				else {
HXLINE( 118)					if ((name == HX_("BracketToken",d1,67,c5,1e))) {
HXLINE( 119)						return ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(token->getContent()) ));
            					}
            					else {
HXLINE( 120)						if ((name == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE( 121)							::String content = ( (::String)(token->getContent()) );
HXLINE( 122)							if ((content == HX_("true",4e,a7,03,4d))) {
HXLINE( 123)								return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,true,HX_("BoolType",24,bc,95,8f));
            							}
            							else {
HXLINE( 124)								if ((content == HX_("false",a3,35,4f,fb))) {
HXLINE( 125)									return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,false,HX_("BoolType",24,bc,95,8f));
            								}
            								else {
HXLINE( 126)									if ((content == HX_("none",b8,12,0a,49))) {
HXLINE( 127)										return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,null(),HX_("NoneType",b2,a9,c9,cf));
            									}
            									else {
HXLINE( 129)										HX_STACK_DO_THROW((HX_("Keyword token being used as a value, ",5c,6f,36,ee) + content));
            									}
            								}
            							}
            						}
            						else {
HXLINE( 131)							bool _hx_tmp;
HXDLIN( 131)							if ((name != HX_("IntegerToken",7b,f0,70,21))) {
HXLINE( 131)								_hx_tmp = (name == HX_("HexToken",3e,32,54,20));
            							}
            							else {
HXLINE( 131)								_hx_tmp = true;
            							}
HXDLIN( 131)							if (_hx_tmp) {
HXLINE( 132)								int value = ::Std_obj::parseInt(( (::String)(token->getContent()) ));
HXLINE( 133)								bool _hx_tmp1;
HXDLIN( 133)								bool _hx_tmp2;
HXDLIN( 133)								if ((name == HX_("IntegerToken",7b,f0,70,21))) {
HXLINE( 133)									_hx_tmp2 = hx::TCast<  ::src::ast::maths::IntegerToken >::cast(token)->isBytes;
            								}
            								else {
HXLINE( 133)									_hx_tmp2 = false;
            								}
HXDLIN( 133)								if (!(_hx_tmp2)) {
HXLINE( 133)									if ((name == HX_("BytesToken",ae,8a,84,3c))) {
HXLINE( 133)										_hx_tmp1 = hx::TCast<  ::src::ast::maths::HexToken >::cast(token)->isBytes;
            									}
            									else {
HXLINE( 133)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE( 133)									_hx_tmp1 = true;
            								}
HXDLIN( 133)								if (_hx_tmp1) {
HXLINE( 134)									int value1 = ::Std_obj::parseInt(( (::String)(token->getContent()) ));
HXLINE( 135)									 ::haxe::io::BytesBuffer buffer =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE( 136)									if ((value1 < (int)255)) {
HXLINE( 136)										buffer->b->push(value1);
            									}
            									else {
HXLINE( 137)										if ((value1 < (int)1)) {
HXLINE( 137)											buffer->addInt32(value1);
            										}
            										else {
HXLINE( 138)											buffer->addInt64(( ::cpp::Int64Struct(value1)));
            										}
            									}
HXLINE( 139)									return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,buffer->getBytes(),HX_("BytesType",a5,18,d1,13));
            								}
            								else {
HXLINE( 141)									return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,::Std_obj::parseInt(( (::String)(token->getContent()) )),HX_("IntType",29,f7,3d,d9));
            								}
            							}
            							else {
HXLINE( 143)								if ((name == HX_("FloatToken",dd,5b,75,29))) {
HXLINE( 144)									return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,::Std_obj::parseFloat(( (::String)(token->getContent()) )),HX_("FloatType",56,c2,14,a2));
            								}
            								else {
HXLINE( 145)									if ((name == HX_("StringToken",48,cc,60,03))) {
HXLINE( 146)										::String flag = hx::TCast<  ::src::ast::base::StringToken >::cast(token)->flag;
HXLINE( 147)										if ((flag == HX_("",00,00,00,00))) {
HXLINE( 148)											return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,::src::compiler::commands::value::ValueCommand_obj::processStringEscapes(( (::String)(token->getContent()) )),HX_("StringType",4b,88,b6,f5));
            										}
            										else {
HXLINE( 149)											if ((flag == HX_("b",62,00,00,00))) {
HXLINE( 150)												return  ::src::compiler::commands::value::ObjectValueCommand_obj::__alloc( HX_CTX ,scope,::haxe::io::Bytes_obj::ofString(( (::String)(token->getContent()) )),HX_("BytesType",a5,18,d1,13));
            											}
            											else {
HXLINE( 151)												if ((flag == HX_("r",72,00,00,00))) {
HXLINE( 153)													HX_STACK_DO_THROW(HX_("Regex not yet supported",b0,fd,69,f5));
            												}
            												else {
HXLINE( 154)													if ((flag == HX_("f",66,00,00,00))) {
HXLINE( 155)														return  ::src::compiler::commands::value::StringFormatValueCommand_obj::__alloc( HX_CTX ,scope,token->getContent(),null());
            													}
            													else {
HXLINE( 157)														HX_STACK_DO_THROW((HX_("Invalid string flag ",4e,45,ca,8e) + flag));
            													}
            												}
            											}
            										}
            									}
            									else {
HXLINE( 160)										HX_STACK_DO_THROW((HX_("Invalid value token ",bf,22,ce,5d) + name));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 112)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ValueCommand_obj,fromToken,return )

::Array< ::Dynamic> ValueCommand_obj::copyArray( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_STACKFRAME(&_hx_pos_bb608a82cda12f06_165_copyArray)
HXLINE( 166)		::Array< ::Dynamic> newArr = ::Array_obj< ::Dynamic>::__new();
HXLINE( 167)		{
HXLINE( 167)			int _g = (int)0;
HXDLIN( 167)			while((_g < arr->length)){
HXLINE( 167)				 ::src::compiler::commands::value::ValueCommand x = arr->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN( 167)				_g = (_g + (int)1);
HXDLIN( 167)				newArr->push(x->copy(scope));
            			}
            		}
HXLINE( 168)		return newArr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ValueCommand_obj,copyArray,return )


hx::ObjectPtr< ValueCommand_obj > ValueCommand_obj::__new( ::src::compiler::Scope scope) {
	hx::ObjectPtr< ValueCommand_obj > __this = new ValueCommand_obj();
	__this->__construct(scope);
	return __this;
}

hx::ObjectPtr< ValueCommand_obj > ValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope) {
	ValueCommand_obj *__this = (ValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ValueCommand_obj), true, "src.compiler.commands.value.ValueCommand"));
	*(void **)__this = ValueCommand_obj::_hx_vtable;
	__this->__construct(scope);
	return __this;
}

ValueCommand_obj::ValueCommand_obj()
{
}

hx::Val ValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromToken") ) { outValue = fromToken_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyArray") ) { outValue = copyArray_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"splitTokens") ) { outValue = splitTokens_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"processStringEscapes") ) { outValue = processStringEscapes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ValueCommand_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String ValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	::String(null()) };

static void ValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class ValueCommand_obj::__mClass;

static ::String ValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("processStringEscapes","\x12","\x8d","\x95","\x62"),
	HX_HCSTRING("splitTokens","\xd4","\x15","\x3d","\x16"),
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromToken","\x2f","\x6d","\xb4","\xc8"),
	HX_HCSTRING("copyArray","\xa4","\x91","\x8a","\xab"),
	::String(null())
};

void ValueCommand_obj::__register()
{
	hx::Object *dummy = new ValueCommand_obj;
	ValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.ValueCommand","\x78","\x9d","\xfc","\x88");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
