// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_script_BooleanOperatorToken
#include <src/ast/script/BooleanOperatorToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_BoolExpressionValueCommand
#include <src/compiler/commands/value/BoolExpressionValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_888100616a7c3ce3_57_new,"src.compiler.commands.value.BoolExpressionValueCommand","new",0x3a5de56c,"src.compiler.commands.value.BoolExpressionValueCommand.new","src/compiler/commands/value/BoolExpressionValueCommand.hx",57,0x48114762)
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_64_walk,"src.compiler.commands.value.BoolExpressionValueCommand","walk",0xddbab27d,"src.compiler.commands.value.BoolExpressionValueCommand.walk","src/compiler/commands/value/BoolExpressionValueCommand.hx",64,0x48114762)
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_71_run,"src.compiler.commands.value.BoolExpressionValueCommand","run",0x3a60fc57,"src.compiler.commands.value.BoolExpressionValueCommand.run","src/compiler/commands/value/BoolExpressionValueCommand.hx",71,0x48114762)
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_90_getName,"src.compiler.commands.value.BoolExpressionValueCommand","getName",0x7589ad0d,"src.compiler.commands.value.BoolExpressionValueCommand.getName","src/compiler/commands/value/BoolExpressionValueCommand.hx",90,0x48114762)
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_94_getBytecode,"src.compiler.commands.value.BoolExpressionValueCommand","getBytecode",0x8283b7f7,"src.compiler.commands.value.BoolExpressionValueCommand.getBytecode","src/compiler/commands/value/BoolExpressionValueCommand.hx",94,0x48114762)
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_102_reconstruct,"src.compiler.commands.value.BoolExpressionValueCommand","reconstruct",0x95126710,"src.compiler.commands.value.BoolExpressionValueCommand.reconstruct","src/compiler/commands/value/BoolExpressionValueCommand.hx",102,0x48114762)
static const ::String _hx_array_data_0953ff7a_9[] = {
	HX_("&&",40,21,00,00),HX_("||",80,6c,00,00),HX_("!",21,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_17_fromTokens,"src.compiler.commands.value.BoolExpressionValueCommand","fromTokens",0x221b00d8,"src.compiler.commands.value.BoolExpressionValueCommand.fromTokens","src/compiler/commands/value/BoolExpressionValueCommand.hx",17,0x48114762)
HX_LOCAL_STACK_FRAME(_hx_pos_888100616a7c3ce3_47_fromBytecode,"src.compiler.commands.value.BoolExpressionValueCommand","fromBytecode",0x4bb7b933,"src.compiler.commands.value.BoolExpressionValueCommand.fromBytecode","src/compiler/commands/value/BoolExpressionValueCommand.hx",47,0x48114762)
namespace src{
namespace compiler{
namespace commands{
namespace value{

void BoolExpressionValueCommand_obj::__construct( ::src::compiler::Scope scope,int _hx_operator,::Array< ::Dynamic> values){
            	HX_STACKFRAME(&_hx_pos_888100616a7c3ce3_57_new)
HXLINE(  58)		super::__construct(scope);
HXLINE(  59)		this->_hx_operator = _hx_operator;
HXLINE(  60)		this->values = values;
            	}

Dynamic BoolExpressionValueCommand_obj::__CreateEmpty() { return new BoolExpressionValueCommand_obj; }

void *BoolExpressionValueCommand_obj::_hx_vtable = 0;

Dynamic BoolExpressionValueCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BoolExpressionValueCommand_obj > _hx_result = new BoolExpressionValueCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BoolExpressionValueCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		if (inClassId<=(int)0x1020cfc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1020cfc0;
		} else {
			return inClassId==(int)0x20538180;
		}
	} else {
		return inClassId==(int)0x53709fc2;
	}
}

::Array< ::Dynamic> BoolExpressionValueCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_888100616a7c3ce3_64_walk)
HXLINE(  65)		::Array< ::Dynamic> cmds = ::Array_obj< ::Dynamic>::__new();
HXLINE(  66)		{
HXLINE(  66)			int _g = (int)0;
HXDLIN(  66)			::Array< ::Dynamic> _g1 = this->values;
HXDLIN(  66)			while((_g < _g1->length)){
HXLINE(  66)				 ::src::compiler::commands::value::ValueCommand x = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  66)				_g = (_g + (int)1);
HXDLIN(  66)				cmds->push(x);
            			}
            		}
HXLINE(  67)		return cmds;
            	}


 ::src::compiler::object::Object BoolExpressionValueCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_888100616a7c3ce3_71_run)
HXLINE(  72)		if ((this->_hx_operator == (int)0)) {
HXLINE(  73)			{
HXLINE(  73)				int _g = (int)0;
HXDLIN(  73)				::Array< ::Dynamic> _g1 = this->values;
HXDLIN(  73)				while((_g < _g1->length)){
HXLINE(  73)					 ::src::compiler::commands::value::ValueCommand value = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  73)					_g = (_g + (int)1);
HXLINE(  74)					if (!(value->run()->rawBool())) {
HXLINE(  74)						return this->scope->getType(HX_("BoolType",24,bc,95,8f),null())->createValue(false,null());
            					}
            				}
            			}
HXLINE(  76)			return this->scope->getType(HX_("BoolType",24,bc,95,8f),null())->createValue(true,null());
            		}
            		else {
HXLINE(  77)			if ((this->_hx_operator == (int)1)) {
HXLINE(  78)				{
HXLINE(  78)					int _g2 = (int)0;
HXDLIN(  78)					::Array< ::Dynamic> _g11 = this->values;
HXDLIN(  78)					while((_g2 < _g11->length)){
HXLINE(  78)						 ::src::compiler::commands::value::ValueCommand value1 = _g11->__get(_g2).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN(  78)						_g2 = (_g2 + (int)1);
HXLINE(  79)						if (value1->run()->rawBool()) {
HXLINE(  79)							return this->scope->getType(HX_("BoolType",24,bc,95,8f),null())->createValue(true,null());
            						}
            					}
            				}
HXLINE(  81)				return this->scope->getType(HX_("BoolType",24,bc,95,8f),null())->createValue(false,null());
            			}
            			else {
HXLINE(  82)				if ((this->_hx_operator == (int)2)) {
HXLINE(  83)					return this->values->__get((int)0).StaticCast<  ::src::compiler::commands::value::ValueCommand >()->run()->_hx_not();
            				}
            			}
            		}
HXLINE(  85)		return null();
            	}


::String BoolExpressionValueCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_888100616a7c3ce3_90_getName)
HXDLIN(  90)		return HX_("BoolExpressionValueCommand",7c,27,97,d7);
            	}


 ::src::compiler::bytecode::Bytecode BoolExpressionValueCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_888100616a7c3ce3_94_getBytecode)
HXLINE(  95)		 ::src::compiler::bytecode::Bytecode op = ::src::compiler::bytecode::Bytecode_obj::fromInt(this->_hx_operator,null());
HXLINE(  96)		::cpp::VirtualArray arr = this->values;
HXLINE(  97)		arr->insert((int)0,op);
HXLINE(  98)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(arr,this->getCodeID());
            	}


::Array< ::Dynamic> BoolExpressionValueCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_888100616a7c3ce3_102_reconstruct)
HXLINE( 103)		::String op = ::Array_obj< ::String >::fromData( _hx_array_data_0953ff7a_9,3)->__get(this->_hx_operator);
HXLINE( 104)		 ::src::ast::script::BooleanOperatorToken _hx_tmp =  ::src::ast::script::BooleanOperatorToken_obj::__alloc( HX_CTX ,op);
HXDLIN( 104)		return _hx_tmp->join(::src::compiler::commands::Command_obj::reconstructCommands(this->values),null());
            	}


 ::src::compiler::commands::value::BoolExpressionValueCommand BoolExpressionValueCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_888100616a7c3ce3_17_fromTokens)
HXLINE(  18)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("BooleanOperatorToken",0d,6d,dc,5d),HX_("||",80,6c,00,00),null());
HXLINE(  19)		if ((spl->length > (int)1)) {
HXLINE(  21)			::Array< ::Dynamic> values = ::Array_obj< ::Dynamic>::__new();
HXLINE(  22)			{
HXLINE(  22)				int _g = (int)0;
HXDLIN(  22)				while((_g < spl->length)){
HXLINE(  22)					::Array< ::Dynamic> tokens1 = spl->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  22)					_g = (_g + (int)1);
HXLINE(  23)					values->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,tokens1));
            				}
            			}
HXLINE(  25)			return  ::src::compiler::commands::value::BoolExpressionValueCommand_obj::__alloc( HX_CTX ,scope,(int)1,values);
            		}
            		else {
HXLINE(  26)			if ((spl->length == (int)0)) {
HXLINE(  26)				HX_STACK_DO_THROW(HX_("Empty boolean expression",e3,f5,28,3e));
            			}
            			else {
HXLINE(  28)				spl = ::src::compiler::commands::Command_obj::splitTokens(spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >(),HX_("BooleanOperatorToken",0d,6d,dc,5d),HX_("&&",40,21,00,00),null());
HXLINE(  29)				if ((spl->length > (int)1)) {
HXLINE(  31)					::Array< ::Dynamic> values1 = ::Array_obj< ::Dynamic>::__new();
HXLINE(  32)					{
HXLINE(  32)						int _g1 = (int)0;
HXDLIN(  32)						while((_g1 < spl->length)){
HXLINE(  32)							::Array< ::Dynamic> tokens2 = spl->__get(_g1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  32)							_g1 = (_g1 + (int)1);
HXLINE(  33)							values1->push(::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,tokens2));
            						}
            					}
HXLINE(  35)					return  ::src::compiler::commands::value::BoolExpressionValueCommand_obj::__alloc( HX_CTX ,scope,(int)0,values1);
            				}
            				else {
HXLINE(  36)					if ((spl->length == (int)0)) {
HXLINE(  36)						HX_STACK_DO_THROW(HX_("Empty boolean expression",e3,f5,28,3e));
            					}
            					else {
HXLINE(  38)						tokens = spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  39)						bool _hx_tmp;
HXDLIN(  39)						if ((tokens->length == (int)2)) {
HXLINE(  39)							_hx_tmp = (tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("BooleanOperatorToken",0d,6d,dc,5d));
            						}
            						else {
HXLINE(  39)							_hx_tmp = false;
            						}
HXDLIN(  39)						if (_hx_tmp) {
HXLINE(  40)							return  ::src::compiler::commands::value::BoolExpressionValueCommand_obj::__alloc( HX_CTX ,scope,(int)2,::Array_obj< ::Dynamic>::__new(1)->init(0,::src::compiler::commands::value::ValueCommand_obj::fromToken(scope,tokens->__get((int)1).StaticCast<  ::src::ast::Token >())));
            						}
            						else {
HXLINE(  41)							HX_STACK_DO_THROW(HX_("Invalid negation expression",aa,45,12,e0));
            						}
            					}
            				}
            			}
            		}
HXLINE(  19)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BoolExpressionValueCommand_obj,fromTokens,return )

 ::src::compiler::commands::value::BoolExpressionValueCommand BoolExpressionValueCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_888100616a7c3ce3_47_fromBytecode)
HXLINE(  48)		int op = ( (int)(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope)) );
HXLINE(  49)		::Array< ::Dynamic> values = ::Array_obj< ::Dynamic>::__new();
HXLINE(  50)		while((arr->length > (int)0)){
HXLINE(  50)			values->push(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            		}
HXLINE(  51)		return  ::src::compiler::commands::value::BoolExpressionValueCommand_obj::__alloc( HX_CTX ,scope,op,values);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BoolExpressionValueCommand_obj,fromBytecode,return )


hx::ObjectPtr< BoolExpressionValueCommand_obj > BoolExpressionValueCommand_obj::__new( ::src::compiler::Scope scope,int _hx_operator,::Array< ::Dynamic> values) {
	hx::ObjectPtr< BoolExpressionValueCommand_obj > __this = new BoolExpressionValueCommand_obj();
	__this->__construct(scope,_hx_operator,values);
	return __this;
}

hx::ObjectPtr< BoolExpressionValueCommand_obj > BoolExpressionValueCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,int _hx_operator,::Array< ::Dynamic> values) {
	BoolExpressionValueCommand_obj *__this = (BoolExpressionValueCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BoolExpressionValueCommand_obj), true, "src.compiler.commands.value.BoolExpressionValueCommand"));
	*(void **)__this = BoolExpressionValueCommand_obj::_hx_vtable;
	__this->__construct(scope,_hx_operator,values);
	return __this;
}

BoolExpressionValueCommand_obj::BoolExpressionValueCommand_obj()
{
}

void BoolExpressionValueCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BoolExpressionValueCommand);
	HX_MARK_MEMBER_NAME(_hx_operator,"operator");
	HX_MARK_MEMBER_NAME(values,"values");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BoolExpressionValueCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx_operator,"operator");
	HX_VISIT_MEMBER_NAME(values,"values");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BoolExpressionValueCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"operator") ) { return hx::Val( _hx_operator ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BoolExpressionValueCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val BoolExpressionValueCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"operator") ) { _hx_operator=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BoolExpressionValueCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("operator","\xa4","\x1b","\x73","\x44"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BoolExpressionValueCommand_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BoolExpressionValueCommand_obj,_hx_operator),HX_HCSTRING("operator","\xa4","\x1b","\x73","\x44")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoolExpressionValueCommand_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BoolExpressionValueCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String BoolExpressionValueCommand_obj_sMemberFields[] = {
	HX_HCSTRING("operator","\xa4","\x1b","\x73","\x44"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void BoolExpressionValueCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BoolExpressionValueCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BoolExpressionValueCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BoolExpressionValueCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class BoolExpressionValueCommand_obj::__mClass;

static ::String BoolExpressionValueCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void BoolExpressionValueCommand_obj::__register()
{
	hx::Object *dummy = new BoolExpressionValueCommand_obj;
	BoolExpressionValueCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.value.BoolExpressionValueCommand","\x7a","\xff","\x53","\x09");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BoolExpressionValueCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BoolExpressionValueCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BoolExpressionValueCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BoolExpressionValueCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BoolExpressionValueCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BoolExpressionValueCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoolExpressionValueCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoolExpressionValueCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace value
