// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_VariableToken
#include <src/ast/base/VariableToken.h>
#endif
#ifndef INCLUDED_src_ast_maths_MathsOperatorToken
#include <src/ast/maths/MathsOperatorToken.h>
#endif
#ifndef INCLUDED_src_ast_script_AssignmentToken
#include <src/ast/script/AssignmentToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_FunctionArgumentCommand
#include <src/compiler/commands/FunctionArgumentCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_FunctionArgument
#include <src/compiler/object/builtin/FunctionArgument.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6821ca30098c7647_28_new,"src.compiler.commands.FunctionArgumentCommand","new",0xc67b6767,"src.compiler.commands.FunctionArgumentCommand.new","src/compiler/commands/FunctionArgumentCommand.hx",28,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_38_copy,"src.compiler.commands.FunctionArgumentCommand","copy",0xde414ace,"src.compiler.commands.FunctionArgumentCommand.copy","src/compiler/commands/FunctionArgumentCommand.hx",38,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_42_setScope,"src.compiler.commands.FunctionArgumentCommand","setScope",0xc3826a2b,"src.compiler.commands.FunctionArgumentCommand.setScope","src/compiler/commands/FunctionArgumentCommand.hx",42,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_49_getFuncArg,"src.compiler.commands.FunctionArgumentCommand","getFuncArg",0xeed01b55,"src.compiler.commands.FunctionArgumentCommand.getFuncArg","src/compiler/commands/FunctionArgumentCommand.hx",49,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_55_getName,"src.compiler.commands.FunctionArgumentCommand","getName",0x0a8f4888,"src.compiler.commands.FunctionArgumentCommand.getName","src/compiler/commands/FunctionArgumentCommand.hx",55,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_60_getFriendlyName,"src.compiler.commands.FunctionArgumentCommand","getFriendlyName",0x06e61793,"src.compiler.commands.FunctionArgumentCommand.getFriendlyName","src/compiler/commands/FunctionArgumentCommand.hx",60,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_65_getBytecode,"src.compiler.commands.FunctionArgumentCommand","getBytecode",0x6c3c2cf2,"src.compiler.commands.FunctionArgumentCommand.getBytecode","src/compiler/commands/FunctionArgumentCommand.hx",65,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_70_reconstruct,"src.compiler.commands.FunctionArgumentCommand","reconstruct",0x7ecadc0b,"src.compiler.commands.FunctionArgumentCommand.reconstruct","src/compiler/commands/FunctionArgumentCommand.hx",70,0x32adb34a)
HX_LOCAL_STACK_FRAME(_hx_pos_6821ca30098c7647_20_fromBytecode,"src.compiler.commands.FunctionArgumentCommand","fromBytecode",0xe3659fd8,"src.compiler.commands.FunctionArgumentCommand.fromBytecode","src/compiler/commands/FunctionArgumentCommand.hx",20,0x32adb34a)
namespace src{
namespace compiler{
namespace commands{

void FunctionArgumentCommand_obj::__construct(::String name,bool kwd,bool collector, ::src::compiler::commands::value::ValueCommand _default){
            	HX_STACKFRAME(&_hx_pos_6821ca30098c7647_28_new)
HXLINE(  29)		super::__construct(null());
HXLINE(  30)		this->name = name;
HXLINE(  31)		this->kwd = kwd;
HXLINE(  32)		this->collector = collector;
HXLINE(  33)		this->_default = _default;
            	}

Dynamic FunctionArgumentCommand_obj::__CreateEmpty() { return new FunctionArgumentCommand_obj; }

void *FunctionArgumentCommand_obj::_hx_vtable = 0;

Dynamic FunctionArgumentCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FunctionArgumentCommand_obj > _hx_result = new FunctionArgumentCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FunctionArgumentCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x4fd6c64b;
	}
}

 ::src::compiler::commands::Command FunctionArgumentCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_6821ca30098c7647_38_copy)
HXDLIN(  38)		::String _hx_tmp = this->name;
HXDLIN(  38)		bool _hx_tmp1 = this->kwd;
HXDLIN(  38)		bool _hx_tmp2 = this->collector;
HXDLIN(  38)		 ::src::compiler::commands::value::ValueCommand _hx_tmp3;
HXDLIN(  38)		if (hx::IsNull( this->_default )) {
HXDLIN(  38)			_hx_tmp3 = null();
            		}
            		else {
HXDLIN(  38)			_hx_tmp3 = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->_default->copy(scope));
            		}
HXDLIN(  38)		return  ::src::compiler::commands::FunctionArgumentCommand_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
            	}


void FunctionArgumentCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_6821ca30098c7647_42_setScope)
HXLINE(  43)		this->super::setScope(scope);
HXLINE(  44)		if (hx::IsNotNull( this->_default )) {
HXLINE(  44)			this->_default->setScope(scope);
            		}
            	}


 ::src::compiler::object::builtin::FunctionArgument FunctionArgumentCommand_obj::getFuncArg(){
            	HX_GC_STACKFRAME(&_hx_pos_6821ca30098c7647_49_getFuncArg)
HXDLIN(  49)		if (hx::IsNull( this->_default )) {
HXDLIN(  49)			return  ::src::compiler::object::builtin::FunctionArgument_obj::__alloc( HX_CTX ,this->name,this->kwd,this->collector,null());
            		}
            		else {
HXLINE(  50)			::String _hx_tmp = this->name;
HXDLIN(  50)			bool _hx_tmp1 = this->kwd;
HXDLIN(  50)			bool _hx_tmp2 = this->collector;
HXDLIN(  50)			return  ::src::compiler::object::builtin::FunctionArgument_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->_default->run());
            		}
HXLINE(  49)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionArgumentCommand_obj,getFuncArg,return )

::String FunctionArgumentCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_6821ca30098c7647_55_getName)
HXDLIN(  55)		return HX_("FunctionArgumentCommand",f6,23,fd,a4);
            	}


::String FunctionArgumentCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_6821ca30098c7647_60_getFriendlyName)
HXDLIN(  60)		return HX_("function argument",85,c0,51,fa);
            	}


 ::src::compiler::bytecode::Bytecode FunctionArgumentCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_6821ca30098c7647_65_getBytecode)
HXDLIN(  65)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(4)->init(0,this->name)->init(1,this->kwd)->init(2,this->collector)->init(3,this->_default);
HXDLIN(  65)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> FunctionArgumentCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_6821ca30098c7647_70_reconstruct)
HXDLIN(  70)		if (this->kwd) {
HXLINE(  71)			if (this->collector) {
HXLINE(  72)				 ::src::ast::maths::MathsOperatorToken _hx_tmp =  ::src::ast::maths::MathsOperatorToken_obj::__alloc( HX_CTX ,HX_("**",c0,24,00,00));
HXDLIN(  72)				 ::src::ast::base::VariableToken _hx_tmp1 =  ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,this->name);
HXDLIN(  72)				 ::src::ast::script::AssignmentToken _hx_tmp2 =  ::src::ast::script::AssignmentToken_obj::__alloc( HX_CTX ,HX_("=",3d,00,00,00));
HXDLIN(  72)				return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,this->_default->reconstruct()));
            			}
            			else {
HXLINE(  74)				 ::src::ast::base::VariableToken _hx_tmp3 =  ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,this->name);
HXDLIN(  74)				 ::src::ast::script::AssignmentToken _hx_tmp4 =  ::src::ast::script::AssignmentToken_obj::__alloc( HX_CTX ,HX_("=",3d,00,00,00));
HXDLIN(  74)				return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(3)->init(0,_hx_tmp3)->init(1,_hx_tmp4)->init(2,this->_default->reconstruct()));
            			}
            		}
            		else {
HXLINE(  77)			if (this->collector) {
HXLINE(  78)				 ::src::ast::maths::MathsOperatorToken _hx_tmp5 =  ::src::ast::maths::MathsOperatorToken_obj::__alloc( HX_CTX ,HX_("*",2a,00,00,00));
HXDLIN(  78)				return ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp5)->init(1, ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,this->name));
            			}
            			else {
HXLINE(  80)				return ::Array_obj< ::Dynamic>::__new(1)->init(0, ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,this->name));
            			}
            		}
HXLINE(  70)		return null();
            	}


 ::src::compiler::commands::FunctionArgumentCommand FunctionArgumentCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_6821ca30098c7647_20_fromBytecode)
HXDLIN(  20)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  20)		 ::Dynamic _hx_tmp1 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  20)		 ::Dynamic _hx_tmp2 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  20)		return  ::src::compiler::commands::FunctionArgumentCommand_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunctionArgumentCommand_obj,fromBytecode,return )


hx::ObjectPtr< FunctionArgumentCommand_obj > FunctionArgumentCommand_obj::__new(::String name,bool kwd,bool collector, ::src::compiler::commands::value::ValueCommand _default) {
	hx::ObjectPtr< FunctionArgumentCommand_obj > __this = new FunctionArgumentCommand_obj();
	__this->__construct(name,kwd,collector,_default);
	return __this;
}

hx::ObjectPtr< FunctionArgumentCommand_obj > FunctionArgumentCommand_obj::__alloc(hx::Ctx *_hx_ctx,::String name,bool kwd,bool collector, ::src::compiler::commands::value::ValueCommand _default) {
	FunctionArgumentCommand_obj *__this = (FunctionArgumentCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FunctionArgumentCommand_obj), true, "src.compiler.commands.FunctionArgumentCommand"));
	*(void **)__this = FunctionArgumentCommand_obj::_hx_vtable;
	__this->__construct(name,kwd,collector,_default);
	return __this;
}

FunctionArgumentCommand_obj::FunctionArgumentCommand_obj()
{
}

void FunctionArgumentCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionArgumentCommand);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(kwd,"kwd");
	HX_MARK_MEMBER_NAME(collector,"collector");
	HX_MARK_MEMBER_NAME(_default,"_default");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FunctionArgumentCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(kwd,"kwd");
	HX_VISIT_MEMBER_NAME(collector,"collector");
	HX_VISIT_MEMBER_NAME(_default,"_default");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FunctionArgumentCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"kwd") ) { return hx::Val( kwd ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_default") ) { return hx::Val( _default ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"collector") ) { return hx::Val( collector ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getFuncArg") ) { return hx::Val( getFuncArg_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunctionArgumentCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val FunctionArgumentCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"kwd") ) { kwd=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_default") ) { _default=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"collector") ) { collector=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionArgumentCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("kwd","\x38","\x99","\x51","\x00"));
	outFields->push(HX_HCSTRING("collector","\x4d","\x45","\x15","\x83"));
	outFields->push(HX_HCSTRING("_default","\x42","\x32","\x7c","\xd5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FunctionArgumentCommand_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FunctionArgumentCommand_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsBool,(int)offsetof(FunctionArgumentCommand_obj,kwd),HX_HCSTRING("kwd","\x38","\x99","\x51","\x00")},
	{hx::fsBool,(int)offsetof(FunctionArgumentCommand_obj,collector),HX_HCSTRING("collector","\x4d","\x45","\x15","\x83")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(FunctionArgumentCommand_obj,_default),HX_HCSTRING("_default","\x42","\x32","\x7c","\xd5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FunctionArgumentCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionArgumentCommand_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("kwd","\x38","\x99","\x51","\x00"),
	HX_HCSTRING("collector","\x4d","\x45","\x15","\x83"),
	HX_HCSTRING("_default","\x42","\x32","\x7c","\xd5"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("getFuncArg","\x7c","\xb3","\x65","\x40"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void FunctionArgumentCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunctionArgumentCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunctionArgumentCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunctionArgumentCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class FunctionArgumentCommand_obj::__mClass;

static ::String FunctionArgumentCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void FunctionArgumentCommand_obj::__register()
{
	hx::Object *dummy = new FunctionArgumentCommand_obj;
	FunctionArgumentCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.FunctionArgumentCommand","\xf5","\x27","\xf4","\xeb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunctionArgumentCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FunctionArgumentCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FunctionArgumentCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FunctionArgumentCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FunctionArgumentCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunctionArgumentCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionArgumentCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionArgumentCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
