// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_BlockToken
#include <src/ast/base/BlockToken.h>
#endif
#ifndef INCLUDED_src_ast_base_BracketToken
#include <src/ast/base/BracketToken.h>
#endif
#ifndef INCLUDED_src_ast_base_KwdToken
#include <src/ast/base/KwdToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_ForLoopComand
#include <src/compiler/commands/ForLoopComand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_IteratorCommand
#include <src/compiler/commands/IteratorCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_LoopCodeCommand
#include <src/compiler/commands/LoopCodeCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_IteratorExitSignal
#include <src/compiler/signals/IteratorExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_LoopBreakSignal
#include <src/compiler/signals/LoopBreakSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_LoopContinueSignal
#include <src/compiler/signals/LoopContinueSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_50_new,"src.compiler.commands.ForLoopComand","new",0xb0d2c034,"src.compiler.commands.ForLoopComand.new","src/compiler/commands/ForLoopComand.hx",50,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_58_copy,"src.compiler.commands.ForLoopComand","copy",0x0057a561,"src.compiler.commands.ForLoopComand.copy","src/compiler/commands/ForLoopComand.hx",58,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_62_setScope,"src.compiler.commands.ForLoopComand","setScope",0x5cb50a3e,"src.compiler.commands.ForLoopComand.setScope","src/compiler/commands/ForLoopComand.hx",62,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_70_walk,"src.compiler.commands.ForLoopComand","walk",0x0d8546b5,"src.compiler.commands.ForLoopComand.walk","src/compiler/commands/ForLoopComand.hx",70,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_74_run,"src.compiler.commands.ForLoopComand","run",0xb0d5d71f,"src.compiler.commands.ForLoopComand.run","src/compiler/commands/ForLoopComand.hx",74,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_94_getName,"src.compiler.commands.ForLoopComand","getName",0xb8978bd5,"src.compiler.commands.ForLoopComand.getName","src/compiler/commands/ForLoopComand.hx",94,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_99_getFriendlyName,"src.compiler.commands.ForLoopComand","getFriendlyName",0x9e05efe0,"src.compiler.commands.ForLoopComand.getFriendlyName","src/compiler/commands/ForLoopComand.hx",99,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_104_getBytecode,"src.compiler.commands.ForLoopComand","getBytecode",0xecfc9abf,"src.compiler.commands.ForLoopComand.getBytecode","src/compiler/commands/ForLoopComand.hx",104,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_109_reconstruct,"src.compiler.commands.ForLoopComand","reconstruct",0xff8b49d8,"src.compiler.commands.ForLoopComand.reconstruct","src/compiler/commands/ForLoopComand.hx",109,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_23_fromTokens,"src.compiler.commands.ForLoopComand","fromTokens",0xc6be8f10,"src.compiler.commands.ForLoopComand.fromTokens","src/compiler/commands/ForLoopComand.hx",23,0x94a8dfdd)
HX_LOCAL_STACK_FRAME(_hx_pos_e62140f5b2aa2f61_43_fromBytecode,"src.compiler.commands.ForLoopComand","fromBytecode",0x0b05456b,"src.compiler.commands.ForLoopComand.fromBytecode","src/compiler/commands/ForLoopComand.hx",43,0x94a8dfdd)
namespace src{
namespace compiler{
namespace commands{

void ForLoopComand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::Command iterator, ::src::compiler::commands::Command code){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_50_new)
HXLINE(  51)		super::__construct(scope);
HXLINE(  52)		this->iterator = iterator;
HXLINE(  53)		this->code = code;
            	}

Dynamic ForLoopComand_obj::__CreateEmpty() { return new ForLoopComand_obj; }

void *ForLoopComand_obj::_hx_vtable = 0;

Dynamic ForLoopComand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ForLoopComand_obj > _hx_result = new ForLoopComand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ForLoopComand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x58fc33e0;
	}
}

 ::src::compiler::commands::Command ForLoopComand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_58_copy)
HXDLIN(  58)		 ::src::compiler::commands::Command _hx_tmp = this->iterator->copy(scope);
HXDLIN(  58)		return  ::src::compiler::commands::ForLoopComand_obj::__alloc( HX_CTX ,scope,_hx_tmp,this->code->copy(scope));
            	}


void ForLoopComand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_62_setScope)
HXLINE(  63)		this->super::setScope(scope);
HXLINE(  64)		this->iterator->setScope(scope);
HXLINE(  65)		this->code->setScope(scope);
            	}


::Array< ::Dynamic> ForLoopComand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_70_walk)
HXDLIN(  70)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,this->iterator)->init(1,this->code);
            	}


 ::src::compiler::object::Object ForLoopComand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_74_run)
HXLINE(  75)		while(true){
HXLINE(  76)			try {
            				HX_STACK_CATCHABLE( ::src::compiler::signals::IteratorExitSignal, 0);
            				HX_STACK_CATCHABLE( ::src::compiler::signals::LoopBreakSignal, 1);
            				HX_STACK_CATCHABLE( ::src::compiler::signals::LoopContinueSignal, 2);
HXLINE(  77)				if (this->completedLoop) {
HXLINE(  77)					this->iterator->run();
            				}
HXLINE(  78)				this->completedLoop = false;
HXLINE(  79)				this->code->run();
HXLINE(  80)				this->completedLoop = true;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::src::compiler::signals::IteratorExitSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::IteratorExitSignal itexit = _hx_e;
HXLINE(  82)					goto _hx_goto_4;
            				}
            				else if (_hx_e.IsClass<  ::src::compiler::signals::LoopBreakSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::LoopBreakSignal lpbreak = _hx_e;
HXLINE(  84)					goto _hx_goto_4;
            				}
            				else if (_hx_e.IsClass<  ::src::compiler::signals::LoopContinueSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::LoopContinueSignal lpcont = _hx_e;
HXLINE(  86)					this->completedLoop = true;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_4:;
HXLINE(  89)		return null();
            	}


::String ForLoopComand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_94_getName)
HXDLIN(  94)		return HX_("ForLoopCommand",de,e6,e8,2e);
            	}


::String ForLoopComand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_99_getFriendlyName)
HXDLIN(  99)		return HX_("for loop",db,4e,21,1b);
            	}


 ::src::compiler::bytecode::Bytecode ForLoopComand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_104_getBytecode)
HXDLIN( 104)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(2)->init(0,this->iterator)->init(1,this->code);
HXDLIN( 104)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> ForLoopComand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_109_reconstruct)
HXDLIN( 109)		 ::src::ast::base::KwdToken _hx_tmp =  ::src::ast::base::KwdToken_obj::__alloc( HX_CTX ,HX_("for",09,c7,4d,00));
HXDLIN( 109)		 ::src::ast::base::BracketToken _hx_tmp1 = ::src::ast::base::BracketToken_obj::fromRaw(this->iterator->reconstruct());
HXDLIN( 109)		return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,::src::ast::base::BlockToken_obj::fromRaw(this->code->reconstruct())));
            	}


 ::src::compiler::commands::ForLoopComand ForLoopComand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_23_fromTokens)
HXLINE(  24)		if ((tokens->length == (int)0)) {
HXLINE(  24)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Empty command",98,14,47,aa)));
            		}
HXLINE(  26)		 ::src::ast::Token start = tokens->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  27)		bool _hx_tmp;
HXDLIN(  27)		if ((start->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  27)			_hx_tmp = hx::IsNotEq( start->getContent(),HX_("for",09,c7,4d,00) );
            		}
            		else {
HXLINE(  27)			_hx_tmp = true;
            		}
HXDLIN(  27)		if (_hx_tmp) {
HXLINE(  27)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid for loop command, for keyword must be at the start",1d,e9,66,1a)));
            		}
HXLINE(  29)		 ::src::ast::Token iterToken = tokens->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  30)		if ((iterToken->getName() != HX_("BracketToken",d1,67,c5,1e))) {
HXLINE(  30)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,(HX_("Invalid for loop command, expected bracket found ",fb,50,38,5d) + iterToken->getName())));
            		}
HXLINE(  31)		 ::src::compiler::commands::Command iter = ::src::compiler::commands::IteratorCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(iterToken->getContent()) ));
HXLINE(  33)		 ::src::compiler::commands::Command command;
HXLINE(  34)		bool _hx_tmp1;
HXDLIN(  34)		if ((tokens->length == (int)1)) {
HXLINE(  34)			_hx_tmp1 = (tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("BlockToken",8c,2a,40,e2));
            		}
            		else {
HXLINE(  34)			_hx_tmp1 = false;
            		}
HXDLIN(  34)		if (_hx_tmp1) {
HXLINE(  35)			return  ::src::compiler::commands::ForLoopComand_obj::__alloc( HX_CTX ,scope,iter,::src::compiler::commands::LoopCodeCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent()) )));
            		}
            		else {
HXLINE(  36)			if ((tokens->__get((tokens->length - (int)1)).StaticCast<  ::src::ast::Token >()->getName() == HX_("EndLineToken",2a,db,3a,32))) {
HXLINE(  37)				return  ::src::compiler::commands::ForLoopComand_obj::__alloc( HX_CTX ,scope,iter,::src::compiler::commands::LoopCodeCommand_obj::fromTokens(scope,tokens));
            			}
            			else {
HXLINE(  38)				HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid for loop syntax",bf,f1,36,bd)));
            			}
            		}
HXLINE(  34)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ForLoopComand_obj,fromTokens,return )

 ::src::compiler::commands::ForLoopComand ForLoopComand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_e62140f5b2aa2f61_43_fromBytecode)
HXDLIN(  43)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  43)		return  ::src::compiler::commands::ForLoopComand_obj::__alloc( HX_CTX ,scope,_hx_tmp,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ForLoopComand_obj,fromBytecode,return )


hx::ObjectPtr< ForLoopComand_obj > ForLoopComand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::Command iterator, ::src::compiler::commands::Command code) {
	hx::ObjectPtr< ForLoopComand_obj > __this = new ForLoopComand_obj();
	__this->__construct(scope,iterator,code);
	return __this;
}

hx::ObjectPtr< ForLoopComand_obj > ForLoopComand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::Command iterator, ::src::compiler::commands::Command code) {
	ForLoopComand_obj *__this = (ForLoopComand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ForLoopComand_obj), true, "src.compiler.commands.ForLoopComand"));
	*(void **)__this = ForLoopComand_obj::_hx_vtable;
	__this->__construct(scope,iterator,code);
	return __this;
}

ForLoopComand_obj::ForLoopComand_obj()
{
}

void ForLoopComand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ForLoopComand);
	HX_MARK_MEMBER_NAME(iterator,"iterator");
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(completedLoop,"completedLoop");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ForLoopComand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iterator,"iterator");
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(completedLoop,"completedLoop");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ForLoopComand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"completedLoop") ) { return hx::Val( completedLoop ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ForLoopComand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val ForLoopComand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast<  ::src::compiler::commands::Command >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { iterator=inValue.Cast<  ::src::compiler::commands::Command >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"completedLoop") ) { completedLoop=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ForLoopComand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"));
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	outFields->push(HX_HCSTRING("completedLoop","\x8f","\x95","\xe0","\x09"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ForLoopComand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::Command*/ ,(int)offsetof(ForLoopComand_obj,iterator),HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93")},
	{hx::fsObject /*::src::compiler::commands::Command*/ ,(int)offsetof(ForLoopComand_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{hx::fsBool,(int)offsetof(ForLoopComand_obj,completedLoop),HX_HCSTRING("completedLoop","\x8f","\x95","\xe0","\x09")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ForLoopComand_obj_sStaticStorageInfo = 0;
#endif

static ::String ForLoopComand_obj_sMemberFields[] = {
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("completedLoop","\x8f","\x95","\xe0","\x09"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void ForLoopComand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ForLoopComand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ForLoopComand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ForLoopComand_obj::__mClass,"__mClass");
};

#endif

hx::Class ForLoopComand_obj::__mClass;

static ::String ForLoopComand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void ForLoopComand_obj::__register()
{
	hx::Object *dummy = new ForLoopComand_obj;
	ForLoopComand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.ForLoopComand","\x42","\xd6","\x01","\xbd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ForLoopComand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ForLoopComand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ForLoopComand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ForLoopComand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ForLoopComand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ForLoopComand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ForLoopComand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ForLoopComand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
