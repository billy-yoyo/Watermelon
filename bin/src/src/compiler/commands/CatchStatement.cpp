// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_commands_CatchStatement
#include <src/compiler/commands/CatchStatement.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_Signal
#include <src/compiler/object/builtin/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_30b00de304cb3611_218_new,"src.compiler.commands.CatchStatement","new",0x4aafa7e7,"src.compiler.commands.CatchStatement.new","src/compiler/commands/TryCatchCommand.hx",218,0x3a9aac55)
HX_LOCAL_STACK_FRAME(_hx_pos_30b00de304cb3611_235_copy,"src.compiler.commands.CatchStatement","copy",0x07c57a4e,"src.compiler.commands.CatchStatement.copy","src/compiler/commands/TryCatchCommand.hx",235,0x3a9aac55)
HX_LOCAL_STACK_FRAME(_hx_pos_30b00de304cb3611_238_run,"src.compiler.commands.CatchStatement","run",0x4ab2bed2,"src.compiler.commands.CatchStatement.run","src/compiler/commands/TryCatchCommand.hx",238,0x3a9aac55)
HX_LOCAL_STACK_FRAME(_hx_pos_30b00de304cb3611_257_checkType,"src.compiler.commands.CatchStatement","checkType",0x16117269,"src.compiler.commands.CatchStatement.checkType","src/compiler/commands/TryCatchCommand.hx",257,0x3a9aac55)
namespace src{
namespace compiler{
namespace commands{

void CatchStatement_obj::__construct(::String name,::Array< ::String > types,::Array< ::Dynamic> code){
            	HX_STACKFRAME(&_hx_pos_30b00de304cb3611_218_new)
HXLINE( 225)		this->valueSet = false;
HXLINE( 224)		this->progress = (int)0;
HXLINE( 228)		this->name = name;
HXLINE( 229)		this->types = types;
HXLINE( 230)		this->code = code;
            	}

Dynamic CatchStatement_obj::__CreateEmpty() { return new CatchStatement_obj; }

void *CatchStatement_obj::_hx_vtable = 0;

Dynamic CatchStatement_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CatchStatement_obj > _hx_result = new CatchStatement_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CatchStatement_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0060acdf;
}

 ::src::compiler::commands::CatchStatement CatchStatement_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_30b00de304cb3611_235_copy)
HXDLIN( 235)		::String _hx_tmp = this->name;
HXDLIN( 235)		::Array< ::String > _hx_tmp1 = this->types->copy();
HXDLIN( 235)		return  ::src::compiler::commands::CatchStatement_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::src::compiler::commands::Command_obj::copyArray(scope,this->code));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CatchStatement_obj,copy,return )

void CatchStatement_obj::run( ::src::compiler::Scope scope,::String type, ::Dynamic source){
            	HX_GC_STACKFRAME(&_hx_pos_30b00de304cb3611_238_run)
HXLINE( 239)		if (!(this->valueSet)) {
HXLINE( 240)			::String _hx_tmp = this->name;
HXDLIN( 240)			 ::src::compiler::object::ObjectType _hx_tmp1 = scope->getType(HX_("SignalType",62,a5,74,ee),null());
HXDLIN( 240)			scope->setVariable(_hx_tmp,_hx_tmp1->createValue( ::src::compiler::object::builtin::Signal_obj::__alloc( HX_CTX ,type,source),scope,null()));
HXLINE( 241)			this->valueSet = true;
            		}
HXLINE( 243)		 ::src::compiler::commands::Command cmd;
HXLINE( 244)		while((this->progress < this->code->length)){
HXLINE( 245)			cmd = this->code->__get(this->progress).StaticCast<  ::src::compiler::commands::Command >();
HXLINE( 246)			bool _hx_tmp2;
HXDLIN( 246)			if ((cmd->getName() != HX_("PipeReadCommand",e7,e2,01,95))) {
HXLINE( 246)				_hx_tmp2 = (cmd->getName() == HX_("PipeWriteCommand",9a,bf,b5,19));
            			}
            			else {
HXLINE( 246)				_hx_tmp2 = true;
            			}
HXDLIN( 246)			if (_hx_tmp2) {
HXLINE( 247)				this->progress++;
HXLINE( 248)				cmd->run();
            			}
            			else {
HXLINE( 250)				cmd->run();
HXLINE( 251)				this->progress++;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(CatchStatement_obj,run,(void))

bool CatchStatement_obj::checkType(::String type){
            	HX_STACKFRAME(&_hx_pos_30b00de304cb3611_257_checkType)
HXLINE( 258)		{
HXLINE( 258)			int _g = (int)0;
HXDLIN( 258)			::Array< ::String > _g1 = this->types;
HXDLIN( 258)			while((_g < _g1->length)){
HXLINE( 258)				::String x = _g1->__get(_g);
HXDLIN( 258)				_g = (_g + (int)1);
HXLINE( 259)				if ((x == type)) {
HXLINE( 259)					return true;
            				}
            			}
            		}
HXLINE( 261)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CatchStatement_obj,checkType,return )


hx::ObjectPtr< CatchStatement_obj > CatchStatement_obj::__new(::String name,::Array< ::String > types,::Array< ::Dynamic> code) {
	hx::ObjectPtr< CatchStatement_obj > __this = new CatchStatement_obj();
	__this->__construct(name,types,code);
	return __this;
}

hx::ObjectPtr< CatchStatement_obj > CatchStatement_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::String > types,::Array< ::Dynamic> code) {
	CatchStatement_obj *__this = (CatchStatement_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CatchStatement_obj), true, "src.compiler.commands.CatchStatement"));
	*(void **)__this = CatchStatement_obj::_hx_vtable;
	__this->__construct(name,types,code);
	return __this;
}

CatchStatement_obj::CatchStatement_obj()
{
}

void CatchStatement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CatchStatement);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(progress,"progress");
	HX_MARK_MEMBER_NAME(valueSet,"valueSet");
	HX_MARK_END_CLASS();
}

void CatchStatement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(types,"types");
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(progress,"progress");
	HX_VISIT_MEMBER_NAME(valueSet,"valueSet");
}

hx::Val CatchStatement_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { return hx::Val( progress ); }
		if (HX_FIELD_EQ(inName,"valueSet") ) { return hx::Val( valueSet ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"checkType") ) { return hx::Val( checkType_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CatchStatement_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { progress=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"valueSet") ) { valueSet=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CatchStatement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	outFields->push(HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"));
	outFields->push(HX_HCSTRING("valueSet","\xb1","\x50","\x51","\xee"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CatchStatement_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CatchStatement_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(CatchStatement_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CatchStatement_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{hx::fsInt,(int)offsetof(CatchStatement_obj,progress),HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86")},
	{hx::fsBool,(int)offsetof(CatchStatement_obj,valueSet),HX_HCSTRING("valueSet","\xb1","\x50","\x51","\xee")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CatchStatement_obj_sStaticStorageInfo = 0;
#endif

static ::String CatchStatement_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"),
	HX_HCSTRING("valueSet","\xb1","\x50","\x51","\xee"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("checkType","\xa2","\xbb","\xe8","\xa0"),
	::String(null()) };

static void CatchStatement_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CatchStatement_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CatchStatement_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CatchStatement_obj::__mClass,"__mClass");
};

#endif

hx::Class CatchStatement_obj::__mClass;

void CatchStatement_obj::__register()
{
	hx::Object *dummy = new CatchStatement_obj;
	CatchStatement_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.CatchStatement","\x75","\x28","\xde","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CatchStatement_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CatchStatement_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CatchStatement_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CatchStatement_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CatchStatement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CatchStatement_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
