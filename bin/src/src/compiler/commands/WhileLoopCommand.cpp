// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_BlockToken
#include <src/ast/base/BlockToken.h>
#endif
#ifndef INCLUDED_src_ast_base_BracketToken
#include <src/ast/base/BracketToken.h>
#endif
#ifndef INCLUDED_src_ast_base_KwdToken
#include <src/ast/base/KwdToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_LoopCodeCommand
#include <src/compiler/commands/LoopCodeCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_WhileLoopCommand
#include <src/compiler/commands/WhileLoopCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_LoopBreakSignal
#include <src/compiler/signals/LoopBreakSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_LoopContinueSignal
#include <src/compiler/signals/LoopContinueSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c3da1ca762f50910_48_new,"src.compiler.commands.WhileLoopCommand","new",0xf6caadc9,"src.compiler.commands.WhileLoopCommand.new","src/compiler/commands/WhileLoopCommand.hx",48,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_56_walk,"src.compiler.commands.WhileLoopCommand","walk",0x007d3b80,"src.compiler.commands.WhileLoopCommand.walk","src/compiler/commands/WhileLoopCommand.hx",56,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_60_run,"src.compiler.commands.WhileLoopCommand","run",0xf6cdc4b4,"src.compiler.commands.WhileLoopCommand.run","src/compiler/commands/WhileLoopCommand.hx",60,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_75_getName,"src.compiler.commands.WhileLoopCommand","getName",0x883e67ea,"src.compiler.commands.WhileLoopCommand.getName","src/compiler/commands/WhileLoopCommand.hx",75,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_80_getBytecode,"src.compiler.commands.WhileLoopCommand","getBytecode",0xc6aba554,"src.compiler.commands.WhileLoopCommand.getBytecode","src/compiler/commands/WhileLoopCommand.hx",80,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_85_reconstruct,"src.compiler.commands.WhileLoopCommand","reconstruct",0xd93a546d,"src.compiler.commands.WhileLoopCommand.reconstruct","src/compiler/commands/WhileLoopCommand.hx",85,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_22_fromTokens,"src.compiler.commands.WhileLoopCommand","fromTokens",0x3baaae1b,"src.compiler.commands.WhileLoopCommand.fromTokens","src/compiler/commands/WhileLoopCommand.hx",22,0xfba50a46)
HX_LOCAL_STACK_FRAME(_hx_pos_c3da1ca762f50910_42_fromBytecode,"src.compiler.commands.WhileLoopCommand","fromBytecode",0xaa7f7d36,"src.compiler.commands.WhileLoopCommand.fromBytecode","src/compiler/commands/WhileLoopCommand.hx",42,0xfba50a46)
namespace src{
namespace compiler{
namespace commands{

void WhileLoopCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand condition, ::src::compiler::commands::Command code){
            	HX_STACKFRAME(&_hx_pos_c3da1ca762f50910_48_new)
HXLINE(  49)		super::__construct(scope);
HXLINE(  50)		this->condition = condition;
HXLINE(  51)		this->code = code;
            	}

Dynamic WhileLoopCommand_obj::__CreateEmpty() { return new WhileLoopCommand_obj; }

void *WhileLoopCommand_obj::_hx_vtable = 0;

Dynamic WhileLoopCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WhileLoopCommand_obj > _hx_result = new WhileLoopCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool WhileLoopCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0788cb5d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0788cb5d;
	} else {
		return inClassId==(int)0x20538180;
	}
}

::Array< ::Dynamic> WhileLoopCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_c3da1ca762f50910_56_walk)
HXDLIN(  56)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,this->condition)->init(1,this->code);
            	}


 ::src::compiler::object::Object WhileLoopCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_c3da1ca762f50910_60_run)
HXLINE(  61)		while(this->condition->run()->rawBool()){
HXLINE(  62)			try {
            				HX_STACK_CATCHABLE( ::src::compiler::signals::LoopBreakSignal, 0);
            				HX_STACK_CATCHABLE( ::src::compiler::signals::LoopContinueSignal, 1);
HXLINE(  63)				this->code->run();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::src::compiler::signals::LoopBreakSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::LoopBreakSignal lpbreak = _hx_e;
HXLINE(  65)					goto _hx_goto_2;
            				}
            				else if (_hx_e.IsClass<  ::src::compiler::signals::LoopContinueSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::LoopContinueSignal lpcont = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_2:;
HXLINE(  70)		return null();
            	}


::String WhileLoopCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_c3da1ca762f50910_75_getName)
HXDLIN(  75)		return HX_("ForLoopCommand",de,e6,e8,2e);
            	}


 ::src::compiler::bytecode::Bytecode WhileLoopCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_c3da1ca762f50910_80_getBytecode)
HXDLIN(  80)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(2)->init(0,this->condition)->init(1,this->code);
HXDLIN(  80)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> WhileLoopCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_c3da1ca762f50910_85_reconstruct)
HXDLIN(  85)		 ::src::ast::base::KwdToken _hx_tmp =  ::src::ast::base::KwdToken_obj::__alloc( HX_CTX ,HX_("while",b1,43,bd,c9));
HXDLIN(  85)		 ::src::ast::base::BracketToken _hx_tmp1 = ::src::ast::base::BracketToken_obj::fromRaw(this->condition->reconstruct());
HXDLIN(  85)		return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,::src::ast::base::BlockToken_obj::fromRaw(this->code->reconstruct())));
            	}


 ::src::compiler::commands::WhileLoopCommand WhileLoopCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_c3da1ca762f50910_22_fromTokens)
HXLINE(  23)		if ((tokens->length == (int)0)) {
HXLINE(  23)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Empty command",98,14,47,aa)));
            		}
HXLINE(  25)		 ::src::ast::Token start = tokens->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  26)		bool _hx_tmp;
HXDLIN(  26)		if ((start->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  26)			_hx_tmp = hx::IsNotEq( start->getContent(),HX_("while",b1,43,bd,c9) );
            		}
            		else {
HXLINE(  26)			_hx_tmp = true;
            		}
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  26)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid for while command, for keyword must be at the start",ea,ca,47,9f)));
            		}
HXLINE(  28)		 ::src::ast::Token conditionToken = tokens->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  29)		if ((conditionToken->getName() != HX_("BracketToken",d1,67,c5,1e))) {
HXLINE(  29)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,(HX_("Invalid while loop command, expected bracket found ",63,e7,b5,61) + conditionToken->getName())));
            		}
HXLINE(  30)		 ::src::compiler::commands::value::ValueCommand condition = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(conditionToken->getContent()) ));
HXLINE(  32)		 ::src::compiler::commands::Command command;
HXLINE(  33)		bool _hx_tmp1;
HXDLIN(  33)		if ((tokens->length == (int)1)) {
HXLINE(  33)			_hx_tmp1 = (tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("BlockToken",8c,2a,40,e2));
            		}
            		else {
HXLINE(  33)			_hx_tmp1 = false;
            		}
HXDLIN(  33)		if (_hx_tmp1) {
HXLINE(  34)			return  ::src::compiler::commands::WhileLoopCommand_obj::__alloc( HX_CTX ,scope,condition,::src::compiler::commands::LoopCodeCommand_obj::fromTokens(scope,( (::Array< ::Dynamic>)(tokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent()) )));
            		}
            		else {
HXLINE(  35)			if ((tokens->__get((tokens->length - (int)1)).StaticCast<  ::src::ast::Token >()->getName() == HX_("EndLineToken",2a,db,3a,32))) {
HXLINE(  36)				return  ::src::compiler::commands::WhileLoopCommand_obj::__alloc( HX_CTX ,scope,condition,::src::compiler::commands::LoopCodeCommand_obj::fromTokens(scope,tokens));
            			}
            			else {
HXLINE(  37)				HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid while loop syntax",27,a6,b6,e8)));
            			}
            		}
HXLINE(  33)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(WhileLoopCommand_obj,fromTokens,return )

 ::src::compiler::commands::WhileLoopCommand WhileLoopCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_c3da1ca762f50910_42_fromBytecode)
HXDLIN(  42)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  42)		return  ::src::compiler::commands::WhileLoopCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(WhileLoopCommand_obj,fromBytecode,return )


hx::ObjectPtr< WhileLoopCommand_obj > WhileLoopCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand condition, ::src::compiler::commands::Command code) {
	hx::ObjectPtr< WhileLoopCommand_obj > __this = new WhileLoopCommand_obj();
	__this->__construct(scope,condition,code);
	return __this;
}

hx::ObjectPtr< WhileLoopCommand_obj > WhileLoopCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand condition, ::src::compiler::commands::Command code) {
	WhileLoopCommand_obj *__this = (WhileLoopCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WhileLoopCommand_obj), true, "src.compiler.commands.WhileLoopCommand"));
	*(void **)__this = WhileLoopCommand_obj::_hx_vtable;
	__this->__construct(scope,condition,code);
	return __this;
}

WhileLoopCommand_obj::WhileLoopCommand_obj()
{
}

void WhileLoopCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WhileLoopCommand);
	HX_MARK_MEMBER_NAME(condition,"condition");
	HX_MARK_MEMBER_NAME(code,"code");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WhileLoopCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(condition,"condition");
	HX_VISIT_MEMBER_NAME(code,"code");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val WhileLoopCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"condition") ) { return hx::Val( condition ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WhileLoopCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val WhileLoopCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast<  ::src::compiler::commands::Command >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"condition") ) { condition=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WhileLoopCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("condition","\x9b","\xe9","\x33","\xfc"));
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo WhileLoopCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(WhileLoopCommand_obj,condition),HX_HCSTRING("condition","\x9b","\xe9","\x33","\xfc")},
	{hx::fsObject /*::src::compiler::commands::Command*/ ,(int)offsetof(WhileLoopCommand_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *WhileLoopCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String WhileLoopCommand_obj_sMemberFields[] = {
	HX_HCSTRING("condition","\x9b","\xe9","\x33","\xfc"),
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void WhileLoopCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WhileLoopCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WhileLoopCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WhileLoopCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class WhileLoopCommand_obj::__mClass;

static ::String WhileLoopCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void WhileLoopCommand_obj::__register()
{
	hx::Object *dummy = new WhileLoopCommand_obj;
	WhileLoopCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.WhileLoopCommand","\x57","\x15","\x04","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WhileLoopCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WhileLoopCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(WhileLoopCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WhileLoopCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WhileLoopCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WhileLoopCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WhileLoopCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WhileLoopCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
