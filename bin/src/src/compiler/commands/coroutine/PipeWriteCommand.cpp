// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_BracketToken
#include <src/ast/base/BracketToken.h>
#endif
#ifndef INCLUDED_src_ast_base_CommaToken
#include <src/ast/base/CommaToken.h>
#endif
#ifndef INCLUDED_src_ast_base_VariableToken
#include <src/ast/base/VariableToken.h>
#endif
#ifndef INCLUDED_src_ast_base_WildcardToken
#include <src/ast/base/WildcardToken.h>
#endif
#ifndef INCLUDED_src_ast_script_PipeWriteToken
#include <src/ast/script/PipeWriteToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_coroutine_PipeWriteCommand
#include <src/compiler/commands/coroutine/PipeWriteCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject
#include <src/compiler/object/builtin/coroutine/CoroutineObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ValueErrorSignal
#include <src/compiler/signals/ValueErrorSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_YieldSignal
#include <src/compiler/signals/YieldSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_76_new,"src.compiler.commands.coroutine.PipeWriteCommand","new",0x3cd319c3,"src.compiler.commands.coroutine.PipeWriteCommand.new","src/compiler/commands/coroutine/PipeWriteCommand.hx",76,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_86_copy,"src.compiler.commands.coroutine.PipeWriteCommand","copy",0xf4a5a8f2,"src.compiler.commands.coroutine.PipeWriteCommand.copy","src/compiler/commands/coroutine/PipeWriteCommand.hx",86,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_90_setScope,"src.compiler.commands.coroutine.PipeWriteCommand","setScope",0x40daaa4f,"src.compiler.commands.coroutine.PipeWriteCommand.setScope","src/compiler/commands/coroutine/PipeWriteCommand.hx",90,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_98_getName,"src.compiler.commands.coroutine.PipeWriteCommand","getName",0x448558e4,"src.compiler.commands.coroutine.PipeWriteCommand.getName","src/compiler/commands/coroutine/PipeWriteCommand.hx",98,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_103_getFriendlyName,"src.compiler.commands.coroutine.PipeWriteCommand","getFriendlyName",0x0c2de3ef,"src.compiler.commands.coroutine.PipeWriteCommand.getFriendlyName","src/compiler/commands/coroutine/PipeWriteCommand.hx",103,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_107_run,"src.compiler.commands.coroutine.PipeWriteCommand","run",0x3cd630ae,"src.compiler.commands.coroutine.PipeWriteCommand.run","src/compiler/commands/coroutine/PipeWriteCommand.hx",107,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_129_getBytecode,"src.compiler.commands.coroutine.PipeWriteCommand","getBytecode",0x3b579b4e,"src.compiler.commands.coroutine.PipeWriteCommand.getBytecode","src/compiler/commands/coroutine/PipeWriteCommand.hx",129,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_133_reconstruct,"src.compiler.commands.coroutine.PipeWriteCommand","reconstruct",0x4de64a67,"src.compiler.commands.coroutine.PipeWriteCommand.reconstruct","src/compiler/commands/coroutine/PipeWriteCommand.hx",133,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_26_fromTokens,"src.compiler.commands.coroutine.PipeWriteCommand","fromTokens",0x37991561,"src.compiler.commands.coroutine.PipeWriteCommand.fromTokens","src/compiler/commands/coroutine/PipeWriteCommand.hx",26,0x926294eb)
HX_LOCAL_STACK_FRAME(_hx_pos_6b470a6a20aa21d0_68_fromBytecode,"src.compiler.commands.coroutine.PipeWriteCommand","fromBytecode",0x4c4ac1fc,"src.compiler.commands.coroutine.PipeWriteCommand.fromBytecode","src/compiler/commands/coroutine/PipeWriteCommand.hx",68,0x926294eb)
namespace src{
namespace compiler{
namespace commands{
namespace coroutine{

void PipeWriteCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand target,::Array< ::Dynamic> values,::String wildcard, ::src::compiler::commands::value::ValueCommand timeLock){
            	HX_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_76_new)
HXLINE(  77)		super::__construct(scope);
HXLINE(  78)		this->target = target;
HXLINE(  79)		this->values = values;
HXLINE(  80)		this->wildcard = wildcard;
HXLINE(  81)		this->timeLock = timeLock;
            	}

Dynamic PipeWriteCommand_obj::__CreateEmpty() { return new PipeWriteCommand_obj; }

void *PipeWriteCommand_obj::_hx_vtable = 0;

Dynamic PipeWriteCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PipeWriteCommand_obj > _hx_result = new PipeWriteCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PipeWriteCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x4a886b07;
	}
}

 ::src::compiler::commands::Command PipeWriteCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_86_copy)
HXDLIN(  86)		 ::src::compiler::commands::value::ValueCommand _hx_tmp;
HXDLIN(  86)		if (hx::IsNull( this->target )) {
HXDLIN(  86)			_hx_tmp = null();
            		}
            		else {
HXDLIN(  86)			_hx_tmp = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->target->copy(scope));
            		}
HXDLIN(  86)		::Array< ::Dynamic> _hx_tmp1 = ::src::compiler::commands::value::ValueCommand_obj::copyArray(scope,this->values);
HXDLIN(  86)		::String _hx_tmp2 = this->wildcard;
HXDLIN(  86)		 ::src::compiler::commands::value::ValueCommand _hx_tmp3;
HXDLIN(  86)		if (hx::IsNull( this->timeLock )) {
HXDLIN(  86)			_hx_tmp3 = null();
            		}
            		else {
HXDLIN(  86)			_hx_tmp3 = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->timeLock->copy(scope));
            		}
HXDLIN(  86)		return  ::src::compiler::commands::coroutine::PipeWriteCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
            	}


void PipeWriteCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_90_setScope)
HXLINE(  91)		this->super::setScope(scope);
HXLINE(  92)		if (hx::IsNotNull( this->target )) {
HXLINE(  92)			this->target->setScope(scope);
            		}
HXLINE(  93)		if (hx::IsNotNull( this->timeLock )) {
HXLINE(  93)			this->timeLock->setScope(scope);
            		}
            	}


::String PipeWriteCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_98_getName)
HXDLIN(  98)		return HX_("PipeWriteCommand",9a,bf,b5,19);
            	}


::String PipeWriteCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_103_getFriendlyName)
HXDLIN( 103)		return HX_("pipe write",6d,43,67,af);
            	}


 ::src::compiler::object::Object PipeWriteCommand_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_107_run)
HXLINE( 108)		 ::src::compiler::object::builtin::coroutine::CoroutineObject coro = this->getScope()->coroutineObject;
HXLINE( 109)		if (hx::IsNull( coro )) {
HXLINE( 109)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Pipe write command used outside of a coroutine",86,40,61,ba)));
            		}
HXLINE( 110)		::Array< ::Dynamic> stream = ::Array_obj< ::Dynamic>::__new();
HXLINE( 111)		{
HXLINE( 111)			int _g = (int)0;
HXDLIN( 111)			::Array< ::Dynamic> _g1 = this->values;
HXDLIN( 111)			while((_g < _g1->length)){
HXLINE( 111)				 ::src::compiler::commands::value::ValueCommand value = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN( 111)				_g = (_g + (int)1);
HXLINE( 112)				stream->push(value->run());
            			}
            		}
HXLINE( 115)		 ::src::compiler::object::builtin::coroutine::CoroutineObject target = null();
HXLINE( 116)		if (hx::IsNotNull( this->target )) {
HXLINE( 117)			 ::src::compiler::object::Object rawTarget = this->target->run();
HXLINE( 118)			if (!(rawTarget->isInstance(HX_("CoroutineType",92,ec,d1,42)))) {
HXLINE( 118)				HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Can only write to a coroutine",59,b4,b1,20)));
            			}
HXLINE( 119)			target = hx::TCast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >::cast(rawTarget);
HXLINE( 120)			bool _hx_tmp;
HXDLIN( 120)			if (hx::IsNotNull( this->wildcard )) {
HXLINE( 120)				_hx_tmp = !(target->isQueued());
            			}
            			else {
HXLINE( 120)				_hx_tmp = false;
            			}
HXDLIN( 120)			if (_hx_tmp) {
HXLINE( 120)				target->queue();
            			}
            		}
HXLINE( 123)		if (hx::IsNull( this->timeLock )) {
HXLINE( 123)			HX_STACK_DO_THROW(::src::compiler::signals::YieldSignal_obj::writeYield(target,stream,this->wildcard,null()));
            		}
            		else {
HXLINE( 124)			::String _hx_tmp1 = this->wildcard;
HXDLIN( 124)			HX_STACK_DO_THROW(::src::compiler::signals::YieldSignal_obj::writeYield(target,stream,_hx_tmp1,this->timeLock->run()->rawFloat()));
            		}
HXLINE( 123)		return null();
            	}


 ::src::compiler::bytecode::Bytecode PipeWriteCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_129_getBytecode)
HXDLIN( 129)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(4)->init(0,this->target)->init(1,this->values)->init(2,this->wildcard)->init(3,this->timeLock);
HXDLIN( 129)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> PipeWriteCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_133_reconstruct)
HXLINE( 134)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 135)		if (hx::IsNull( this->timeLock )) {
HXLINE( 135)			tokens->push( ::src::ast::script::PipeWriteToken_obj::__alloc( HX_CTX ,HX_("<:",7e,34,00,00)));
            		}
            		else {
HXLINE( 137)			tokens->push( ::src::ast::script::PipeWriteToken_obj::__alloc( HX_CTX ,HX_("<!",65,34,00,00)));
HXLINE( 138)			tokens->push(::src::ast::base::BracketToken_obj::fromRaw(this->timeLock->reconstruct()));
            		}
HXLINE( 141)		if (hx::IsNotNull( this->target )) {
HXLINE( 142)			tokens = this->target->reconstruct()->concat(tokens);
            		}
            		else {
HXLINE( 143)			if (hx::IsNotNull( this->wildcard )) {
HXLINE( 144)				if ((this->wildcard != HX_("",00,00,00,00))) {
HXLINE( 144)					 ::src::ast::base::WildcardToken tokens1 =  ::src::ast::base::WildcardToken_obj::__alloc( HX_CTX ,HX_("?",3f,00,00,00));
HXDLIN( 144)					tokens = ::Array_obj< ::Dynamic>::__new(2)->init(0,tokens1)->init(1, ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,this->wildcard))->concat(tokens);
            				}
            				else {
HXLINE( 145)					tokens->insert((int)0, ::src::ast::base::WildcardToken_obj::__alloc( HX_CTX ,HX_("?",3f,00,00,00)));
            				}
            			}
            		}
HXLINE( 147)		::Array< ::Dynamic> varTokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)		{
HXLINE( 148)			int _g = (int)0;
HXDLIN( 148)			::Array< ::Dynamic> _g1 = this->values;
HXDLIN( 148)			while((_g < _g1->length)){
HXLINE( 148)				 ::src::compiler::commands::value::ValueCommand v = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::ValueCommand >();
HXDLIN( 148)				_g = (_g + (int)1);
HXLINE( 149)				varTokens = varTokens->concat(v->reconstruct());
HXLINE( 150)				varTokens->push( ::src::ast::base::CommaToken_obj::__alloc( HX_CTX ,HX_(",",2c,00,00,00)));
            			}
            		}
HXLINE( 152)		if ((varTokens->length > (int)1)) {
HXLINE( 152)			varTokens->pop().StaticCast<  ::src::ast::Token >();
            		}
HXLINE( 153)		return tokens->concat(varTokens);
            	}


 ::src::compiler::commands::coroutine::PipeWriteCommand PipeWriteCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_26_fromTokens)
HXLINE(  27)		bool _hx_tmp;
HXDLIN(  27)		if ((tokens->length != (int)0)) {
HXLINE(  27)			_hx_tmp = (tokens->pop().StaticCast<  ::src::ast::Token >()->getName() != HX_("EndLineToken",2a,db,3a,32));
            		}
            		else {
HXLINE(  27)			_hx_tmp = true;
            		}
HXDLIN(  27)		if (_hx_tmp) {
HXLINE(  27)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid pipe read command (must end in endline)",6b,c5,7b,d9)));
            		}
HXLINE(  28)		bool isTimeLock = false;
HXLINE(  29)		{
HXLINE(  29)			int _g = (int)0;
HXDLIN(  29)			while((_g < tokens->length)){
HXLINE(  29)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  29)				_g = (_g + (int)1);
HXLINE(  30)				bool _hx_tmp1;
HXDLIN(  30)				if ((token->getName() == HX_("PipeWriteToken",88,4f,3c,ad))) {
HXLINE(  30)					_hx_tmp1 = hx::IsEq( token->getContent(),HX_("<!",65,34,00,00) );
            				}
            				else {
HXLINE(  30)					_hx_tmp1 = false;
            				}
HXDLIN(  30)				if (_hx_tmp1) {
HXLINE(  31)					isTimeLock = true;
HXLINE(  32)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
HXLINE(  35)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("PipeWriteToken",88,4f,3c,ad),null(),null());
HXLINE(  36)		if ((spl->length == (int)1)) {
HXLINE(  36)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid pipe write command",41,b5,e0,59)));
            		}
HXLINE(  37)		if ((spl->length > (int)2)) {
HXLINE(  37)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid pipe write command, only one write per line",d1,78,83,2f)));
            		}
HXLINE(  38)		::Array< ::Dynamic> left = spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  39)		::Array< ::Dynamic> right = spl->__get((int)1).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  41)		 ::src::compiler::commands::value::ValueCommand timeLock = null();
HXLINE(  42)		 ::src::compiler::commands::value::ValueCommand target = null();
HXLINE(  43)		::String wildcard = null();
HXLINE(  44)		if (isTimeLock) {
HXLINE(  45)			if ((right->length == (int)0)) {
HXLINE(  45)				HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Time lock requires a value",62,17,b2,4a)));
            			}
HXLINE(  46)			timeLock = ::src::compiler::commands::value::ValueCommand_obj::fromToken(scope,right->shift().StaticCast<  ::src::ast::Token >());
            		}
HXLINE(  49)		bool _hx_tmp2;
HXDLIN(  49)		if ((left->length > (int)0)) {
HXLINE(  49)			_hx_tmp2 = (left->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("WildcardToken",9f,72,eb,8d));
            		}
            		else {
HXLINE(  49)			_hx_tmp2 = false;
            		}
HXDLIN(  49)		if (_hx_tmp2) {
HXLINE(  50)			left->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  51)			bool _hx_tmp3;
HXDLIN(  51)			if ((left->length <= (int)1)) {
HXLINE(  51)				if ((left->length == (int)1)) {
HXLINE(  51)					_hx_tmp3 = (left->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() != HX_("VariableToken",fd,96,04,01));
            				}
            				else {
HXLINE(  51)					_hx_tmp3 = false;
            				}
            			}
            			else {
HXLINE(  51)				_hx_tmp3 = true;
            			}
HXDLIN(  51)			if (_hx_tmp3) {
HXLINE(  51)				HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Wildcard name must be a single variable",40,86,7a,01)));
            			}
HXLINE(  52)			if ((left->length == (int)1)) {
HXLINE(  52)				wildcard = ( (::String)(left->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent()) );
            			}
            			else {
HXLINE(  53)				wildcard = HX_("",00,00,00,00);
            			}
            		}
            		else {
HXLINE(  54)			if ((left->length > (int)0)) {
HXLINE(  55)				target = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,left);
            			}
            		}
HXLINE(  58)		::Array< ::Dynamic> values = ::Array_obj< ::Dynamic>::__new();
HXLINE(  59)		if ((right->length > (int)0)) {
HXLINE(  60)			values = ::src::compiler::commands::value::ValueCommand_obj::splitTokens(scope,right,HX_("CommaToken",04,01,3f,49),null(),null());
            		}
HXLINE(  63)		return  ::src::compiler::commands::coroutine::PipeWriteCommand_obj::__alloc( HX_CTX ,scope,target,values,wildcard,timeLock);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PipeWriteCommand_obj,fromTokens,return )

 ::src::compiler::commands::coroutine::PipeWriteCommand PipeWriteCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_6b470a6a20aa21d0_68_fromBytecode)
HXDLIN(  68)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  68)		 ::Dynamic _hx_tmp1 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  68)		 ::Dynamic _hx_tmp2 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  68)		return  ::src::compiler::commands::coroutine::PipeWriteCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,_hx_tmp2,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PipeWriteCommand_obj,fromBytecode,return )


hx::ObjectPtr< PipeWriteCommand_obj > PipeWriteCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand target,::Array< ::Dynamic> values,::String wildcard, ::src::compiler::commands::value::ValueCommand timeLock) {
	hx::ObjectPtr< PipeWriteCommand_obj > __this = new PipeWriteCommand_obj();
	__this->__construct(scope,target,values,wildcard,timeLock);
	return __this;
}

hx::ObjectPtr< PipeWriteCommand_obj > PipeWriteCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand target,::Array< ::Dynamic> values,::String wildcard, ::src::compiler::commands::value::ValueCommand timeLock) {
	PipeWriteCommand_obj *__this = (PipeWriteCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PipeWriteCommand_obj), true, "src.compiler.commands.coroutine.PipeWriteCommand"));
	*(void **)__this = PipeWriteCommand_obj::_hx_vtable;
	__this->__construct(scope,target,values,wildcard,timeLock);
	return __this;
}

PipeWriteCommand_obj::PipeWriteCommand_obj()
{
}

void PipeWriteCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PipeWriteCommand);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(wildcard,"wildcard");
	HX_MARK_MEMBER_NAME(timeLock,"timeLock");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PipeWriteCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(wildcard,"wildcard");
	HX_VISIT_MEMBER_NAME(timeLock,"timeLock");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PipeWriteCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wildcard") ) { return hx::Val( wildcard ); }
		if (HX_FIELD_EQ(inName,"timeLock") ) { return hx::Val( timeLock ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PipeWriteCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val PipeWriteCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wildcard") ) { wildcard=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeLock") ) { timeLock=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PipeWriteCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("wildcard","\xda","\xd9","\x17","\xa9"));
	outFields->push(HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PipeWriteCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(PipeWriteCommand_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PipeWriteCommand_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{hx::fsString,(int)offsetof(PipeWriteCommand_obj,wildcard),HX_HCSTRING("wildcard","\xda","\xd9","\x17","\xa9")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(PipeWriteCommand_obj,timeLock),HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PipeWriteCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String PipeWriteCommand_obj_sMemberFields[] = {
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("wildcard","\xda","\xd9","\x17","\xa9"),
	HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void PipeWriteCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PipeWriteCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PipeWriteCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PipeWriteCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class PipeWriteCommand_obj::__mClass;

static ::String PipeWriteCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void PipeWriteCommand_obj::__register()
{
	hx::Object *dummy = new PipeWriteCommand_obj;
	PipeWriteCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.coroutine.PipeWriteCommand","\x51","\x7c","\xb4","\x60");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PipeWriteCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PipeWriteCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PipeWriteCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PipeWriteCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PipeWriteCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PipeWriteCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PipeWriteCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PipeWriteCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace coroutine
