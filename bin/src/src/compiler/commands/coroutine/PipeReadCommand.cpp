// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_BracketToken
#include <src/ast/base/BracketToken.h>
#endif
#ifndef INCLUDED_src_ast_base_CommaToken
#include <src/ast/base/CommaToken.h>
#endif
#ifndef INCLUDED_src_ast_base_VariableToken
#include <src/ast/base/VariableToken.h>
#endif
#ifndef INCLUDED_src_ast_base_WildcardToken
#include <src/ast/base/WildcardToken.h>
#endif
#ifndef INCLUDED_src_ast_script_PipeReadToken
#include <src/ast/script/PipeReadToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_coroutine_PipeReadCommand
#include <src/compiler/commands/coroutine/PipeReadCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject
#include <src/compiler/object/builtin/coroutine/CoroutineObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ValueErrorSignal
#include <src/compiler/signals/ValueErrorSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_YieldSignal
#include <src/compiler/signals/YieldSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_25_new,"src.compiler.commands.coroutine.PipeReadCommand","new",0xc1bb5302,"src.compiler.commands.coroutine.PipeReadCommand.new","src/compiler/commands/coroutine/PipeReadCommand.hx",25,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_94_getVars,"src.compiler.commands.coroutine.PipeReadCommand","getVars",0x80065704,"src.compiler.commands.coroutine.PipeReadCommand.getVars","src/compiler/commands/coroutine/PipeReadCommand.hx",94,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_99_copy,"src.compiler.commands.coroutine.PipeReadCommand","copy",0xbaef86d3,"src.compiler.commands.coroutine.PipeReadCommand.copy","src/compiler/commands/coroutine/PipeReadCommand.hx",99,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_103_setScope,"src.compiler.commands.coroutine.PipeReadCommand","setScope",0x7aff8cb0,"src.compiler.commands.coroutine.PipeReadCommand.setScope","src/compiler/commands/coroutine/PipeReadCommand.hx",103,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_111_getName,"src.compiler.commands.coroutine.PipeReadCommand","getName",0x7abc9da3,"src.compiler.commands.coroutine.PipeReadCommand.getName","src/compiler/commands/coroutine/PipeReadCommand.hx",111,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_117_getFriendlyName,"src.compiler.commands.coroutine.PipeReadCommand","getFriendlyName",0x53667fae,"src.compiler.commands.coroutine.PipeReadCommand.getFriendlyName","src/compiler/commands/coroutine/PipeReadCommand.hx",117,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_121_run,"src.compiler.commands.coroutine.PipeReadCommand","run",0xc1be69ed,"src.compiler.commands.coroutine.PipeReadCommand.run","src/compiler/commands/coroutine/PipeReadCommand.hx",121,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_156_getBytecode,"src.compiler.commands.coroutine.PipeReadCommand","getBytecode",0x9209ab8d,"src.compiler.commands.coroutine.PipeReadCommand.getBytecode","src/compiler/commands/coroutine/PipeReadCommand.hx",156,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_160_reconstruct,"src.compiler.commands.coroutine.PipeReadCommand","reconstruct",0xa4985aa6,"src.compiler.commands.coroutine.PipeReadCommand.reconstruct","src/compiler/commands/coroutine/PipeReadCommand.hx",160,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_29_fromTokens,"src.compiler.commands.coroutine.PipeReadCommand","fromTokens",0xee841202,"src.compiler.commands.coroutine.PipeReadCommand.fromTokens","src/compiler/commands/coroutine/PipeReadCommand.hx",29,0x71cb6290)
HX_LOCAL_STACK_FRAME(_hx_pos_502cf1fefb1f2f25_74_fromBytecode,"src.compiler.commands.coroutine.PipeReadCommand","fromBytecode",0xd166e8dd,"src.compiler.commands.coroutine.PipeReadCommand.fromBytecode","src/compiler/commands/coroutine/PipeReadCommand.hx",74,0x71cb6290)
namespace src{
namespace compiler{
namespace commands{
namespace coroutine{

void PipeReadCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand source,::Array< ::String > vars,::String wildcard, ::src::compiler::commands::value::ValueCommand timeLock){
            	HX_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_25_new)
HXLINE(  78)		this->cacheEnabled = false;
HXLINE(  77)		this->cachedSource = null();
HXLINE(  85)		super::__construct(scope);
HXLINE(  86)		this->source = source;
HXLINE(  87)		this->vars = vars;
HXLINE(  88)		this->wildcard = wildcard;
HXLINE(  89)		this->timeLock = timeLock;
            	}

Dynamic PipeReadCommand_obj::__CreateEmpty() { return new PipeReadCommand_obj; }

void *PipeReadCommand_obj::_hx_vtable = 0;

Dynamic PipeReadCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PipeReadCommand_obj > _hx_result = new PipeReadCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PipeReadCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x7e44441a;
	}
}

::Array< ::String > PipeReadCommand_obj::getVars(){
            	HX_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_94_getVars)
HXDLIN(  94)		return this->vars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipeReadCommand_obj,getVars,return )

 ::src::compiler::commands::Command PipeReadCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_99_copy)
HXDLIN(  99)		 ::src::compiler::commands::value::ValueCommand _hx_tmp;
HXDLIN(  99)		if (hx::IsNull( this->source )) {
HXDLIN(  99)			_hx_tmp = null();
            		}
            		else {
HXDLIN(  99)			_hx_tmp = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->source->copy(scope));
            		}
HXDLIN(  99)		::Array< ::String > _hx_tmp1 = this->vars->copy();
HXDLIN(  99)		::String _hx_tmp2 = this->wildcard;
HXDLIN(  99)		 ::src::compiler::commands::value::ValueCommand _hx_tmp3;
HXDLIN(  99)		if (hx::IsNull( this->timeLock )) {
HXDLIN(  99)			_hx_tmp3 = null();
            		}
            		else {
HXDLIN(  99)			_hx_tmp3 = hx::TCast<  ::src::compiler::commands::value::ValueCommand >::cast(this->timeLock->copy(scope));
            		}
HXDLIN(  99)		return  ::src::compiler::commands::coroutine::PipeReadCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
            	}


void PipeReadCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_103_setScope)
HXLINE( 104)		this->super::setScope(scope);
HXLINE( 105)		if (hx::IsNotNull( this->source )) {
HXLINE( 105)			this->source->setScope(scope);
            		}
HXLINE( 106)		if (hx::IsNotNull( this->timeLock )) {
HXLINE( 106)			this->timeLock->setScope(scope);
            		}
            	}


::String PipeReadCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_111_getName)
HXDLIN( 111)		return HX_("PipeReadCommand",e7,e2,01,95);
            	}


::String PipeReadCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_117_getFriendlyName)
HXDLIN( 117)		return HX_("pipe read",88,00,38,0b);
            	}


 ::src::compiler::object::Object PipeReadCommand_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_121_run)
HXLINE( 122)		 ::src::compiler::object::builtin::coroutine::CoroutineObject coro = this->getScope()->coroutineObject;
HXLINE( 123)		if (hx::IsNull( coro )) {
HXLINE( 123)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Pipe read command used outside of a coroutine",e1,2e,8c,16)));
            		}
HXLINE( 125)		 ::src::compiler::object::builtin::coroutine::CoroutineObject source = null();
HXLINE( 126)		if (hx::IsNotNull( this->source )) {
HXLINE( 127)			if (hx::IsNull( this->cachedSource )) {
HXLINE( 128)				 ::src::compiler::object::Object rawSource = this->source->run();
HXLINE( 129)				if (!(rawSource->isInstance(HX_("CoroutineType",92,ec,d1,42)))) {
HXLINE( 129)					HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Can only read from a coroutine",29,7a,ce,d2)));
            				}
HXLINE( 130)				source = hx::TCast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >::cast(rawSource);
HXLINE( 131)				if (!(source->isQueued())) {
HXLINE( 131)					source->queue();
            				}
HXLINE( 132)				if (this->cacheEnabled) {
HXLINE( 132)					this->cachedSource = source;
            				}
            			}
            			else {
HXLINE( 134)				source = this->cachedSource;
HXLINE( 135)				source->addVars(this->vars);
            			}
            		}
HXLINE( 150)		if (hx::IsNotNull( this->timeLock )) {
HXLINE( 150)			::Array< ::String > _hx_tmp = this->vars->copy();
HXDLIN( 150)			::String _hx_tmp1 = this->wildcard;
HXDLIN( 150)			HX_STACK_DO_THROW(::src::compiler::signals::YieldSignal_obj::readYield(source,_hx_tmp,_hx_tmp1,this->timeLock->run()->rawFloat()));
            		}
            		else {
HXLINE( 151)			::Array< ::String > _hx_tmp2 = this->vars->copy();
HXDLIN( 151)			HX_STACK_DO_THROW(::src::compiler::signals::YieldSignal_obj::readYield(source,_hx_tmp2,this->wildcard,null()));
            		}
HXLINE( 150)		return null();
            	}


 ::src::compiler::bytecode::Bytecode PipeReadCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_156_getBytecode)
HXDLIN( 156)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(4)->init(0,this->source)->init(1,this->vars)->init(2,this->wildcard)->init(3,this->timeLock);
HXDLIN( 156)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> PipeReadCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_160_reconstruct)
HXLINE( 161)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 162)		if (hx::IsNull( this->timeLock )) {
HXLINE( 162)			tokens->push( ::src::ast::script::PipeReadToken_obj::__alloc( HX_CTX ,HX_(":>",c4,32,00,00)));
            		}
            		else {
HXLINE( 163)			tokens->push(::src::ast::base::BracketToken_obj::fromRaw(this->timeLock->reconstruct()));
            		}
HXLINE( 165)		if (hx::IsNotNull( this->source )) {
HXLINE( 166)			tokens = this->source->reconstruct()->concat(tokens);
            		}
            		else {
HXLINE( 167)			if (hx::IsNotNull( this->wildcard )) {
HXLINE( 168)				if ((this->wildcard != HX_("",00,00,00,00))) {
HXLINE( 168)					 ::src::ast::base::WildcardToken tokens1 =  ::src::ast::base::WildcardToken_obj::__alloc( HX_CTX ,HX_("?",3f,00,00,00));
HXDLIN( 168)					tokens = ::Array_obj< ::Dynamic>::__new(2)->init(0,tokens1)->init(1, ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,this->wildcard))->concat(tokens);
            				}
            				else {
HXLINE( 169)					tokens->insert((int)0, ::src::ast::base::WildcardToken_obj::__alloc( HX_CTX ,HX_("?",3f,00,00,00)));
            				}
            			}
            		}
HXLINE( 171)		::Array< ::Dynamic> varTokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 172)		{
HXLINE( 172)			int _g = (int)0;
HXDLIN( 172)			::Array< ::String > _g1 = this->vars;
HXDLIN( 172)			while((_g < _g1->length)){
HXLINE( 172)				::String v = _g1->__get(_g);
HXDLIN( 172)				_g = (_g + (int)1);
HXLINE( 173)				varTokens->push( ::src::ast::base::VariableToken_obj::__alloc( HX_CTX ,v));
HXLINE( 174)				varTokens->push( ::src::ast::base::CommaToken_obj::__alloc( HX_CTX ,HX_(",",2c,00,00,00)));
            			}
            		}
HXLINE( 176)		if ((varTokens->length > (int)1)) {
HXLINE( 176)			varTokens->pop().StaticCast<  ::src::ast::Token >();
            		}
HXLINE( 177)		return tokens->concat(varTokens);
            	}


 ::src::compiler::commands::coroutine::PipeReadCommand PipeReadCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_29_fromTokens)
HXLINE(  30)		bool _hx_tmp;
HXDLIN(  30)		if ((tokens->length != (int)0)) {
HXLINE(  30)			_hx_tmp = (tokens->pop().StaticCast<  ::src::ast::Token >()->getName() != HX_("EndLineToken",2a,db,3a,32));
            		}
            		else {
HXLINE(  30)			_hx_tmp = true;
            		}
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  30)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid pipe read command (must end in endline)",6b,c5,7b,d9)));
            		}
HXLINE(  31)		bool isTimeLocked = false;
HXLINE(  32)		{
HXLINE(  32)			int _g = (int)0;
HXDLIN(  32)			while((_g < tokens->length)){
HXLINE(  32)				 ::src::ast::Token token = tokens->__get(_g).StaticCast<  ::src::ast::Token >();
HXDLIN(  32)				_g = (_g + (int)1);
HXLINE(  33)				bool _hx_tmp1;
HXDLIN(  33)				if ((token->getName() == HX_("PipeReadToken",95,15,41,89))) {
HXLINE(  33)					_hx_tmp1 = hx::IsEq( token->getContent(),HX_("!>",fd,1c,00,00) );
            				}
            				else {
HXLINE(  33)					_hx_tmp1 = false;
            				}
HXDLIN(  33)				if (_hx_tmp1) {
HXLINE(  34)					isTimeLocked = true;
HXLINE(  35)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
HXLINE(  38)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(tokens,HX_("PipeReadToken",95,15,41,89),null(),null());
HXLINE(  39)		if ((spl->length == (int)1)) {
HXLINE(  39)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid pipe read command",2a,de,ae,82)));
            		}
HXLINE(  40)		if ((spl->length > (int)2)) {
HXLINE(  40)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid pipe read command, can only do one read in a single command",8c,6a,c7,68)));
            		}
HXLINE(  41)		::Array< ::Dynamic> left = spl->__get((int)0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  42)		::Array< ::Dynamic> right = spl->__get((int)1).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  44)		 ::src::compiler::commands::value::ValueCommand timeLock = null();
HXLINE(  45)		if (isTimeLocked) {
HXLINE(  46)			timeLock = ::src::compiler::commands::value::ValueCommand_obj::fromToken(scope,left->pop().StaticCast<  ::src::ast::Token >());
            		}
HXLINE(  49)		 ::src::compiler::commands::value::ValueCommand source = null();
HXLINE(  50)		::String wildcard = null();
HXLINE(  51)		if ((left->length > (int)0)) {
HXLINE(  52)			if ((left->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() == HX_("WildcardToken",9f,72,eb,8d))) {
HXLINE(  53)				left->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  54)				bool _hx_tmp2;
HXDLIN(  54)				if ((left->length <= (int)1)) {
HXLINE(  54)					if ((left->length == (int)1)) {
HXLINE(  54)						_hx_tmp2 = (left->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() != HX_("VariableToken",fd,96,04,01));
            					}
            					else {
HXLINE(  54)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE(  54)					_hx_tmp2 = true;
            				}
HXDLIN(  54)				if (_hx_tmp2) {
HXLINE(  54)					HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid wildcard name, must be a single variable",b3,2b,c7,30)));
            				}
HXLINE(  55)				if ((left->length == (int)1)) {
HXLINE(  55)					wildcard = ( (::String)(left->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent()) );
            				}
            				else {
HXLINE(  56)					wildcard = HX_("",00,00,00,00);
            				}
            			}
            			else {
HXLINE(  58)				source = ::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,left);
            			}
            		}
HXLINE(  61)		::Array< ::String > vars = ::Array_obj< ::String >::__new();
HXLINE(  62)		if ((right->length > (int)0)) {
HXLINE(  63)			::Array< ::Dynamic> varSpl = ::src::compiler::commands::Command_obj::splitTokens(right,HX_("CommaToken",04,01,3f,49),null(),null());
HXLINE(  64)			{
HXLINE(  64)				int _g1 = (int)0;
HXDLIN(  64)				while((_g1 < varSpl->length)){
HXLINE(  64)					::Array< ::Dynamic> subtokens = varSpl->__get(_g1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  64)					_g1 = (_g1 + (int)1);
HXLINE(  65)					bool _hx_tmp3;
HXDLIN(  65)					if ((subtokens->length == (int)1)) {
HXLINE(  65)						_hx_tmp3 = (subtokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getName() != HX_("VariableToken",fd,96,04,01));
            					}
            					else {
HXLINE(  65)						_hx_tmp3 = true;
            					}
HXDLIN(  65)					if (_hx_tmp3) {
HXLINE(  65)						HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid output variable name, must be a list of variable names",bd,38,21,51)));
            					}
HXLINE(  66)					vars->push(subtokens->__get((int)0).StaticCast<  ::src::ast::Token >()->getContent());
            				}
            			}
            		}
HXLINE(  69)		return  ::src::compiler::commands::coroutine::PipeReadCommand_obj::__alloc( HX_CTX ,scope,source,vars,wildcard,timeLock);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PipeReadCommand_obj,fromTokens,return )

 ::src::compiler::commands::coroutine::PipeReadCommand PipeReadCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_502cf1fefb1f2f25_74_fromBytecode)
HXDLIN(  74)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  74)		 ::Dynamic _hx_tmp1 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  74)		 ::Dynamic _hx_tmp2 = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  74)		return  ::src::compiler::commands::coroutine::PipeReadCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,_hx_tmp1,_hx_tmp2,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PipeReadCommand_obj,fromBytecode,return )


hx::ObjectPtr< PipeReadCommand_obj > PipeReadCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand source,::Array< ::String > vars,::String wildcard, ::src::compiler::commands::value::ValueCommand timeLock) {
	hx::ObjectPtr< PipeReadCommand_obj > __this = new PipeReadCommand_obj();
	__this->__construct(scope,source,vars,wildcard,timeLock);
	return __this;
}

hx::ObjectPtr< PipeReadCommand_obj > PipeReadCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand source,::Array< ::String > vars,::String wildcard, ::src::compiler::commands::value::ValueCommand timeLock) {
	PipeReadCommand_obj *__this = (PipeReadCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PipeReadCommand_obj), true, "src.compiler.commands.coroutine.PipeReadCommand"));
	*(void **)__this = PipeReadCommand_obj::_hx_vtable;
	__this->__construct(scope,source,vars,wildcard,timeLock);
	return __this;
}

PipeReadCommand_obj::PipeReadCommand_obj()
{
}

void PipeReadCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PipeReadCommand);
	HX_MARK_MEMBER_NAME(cachedSource,"cachedSource");
	HX_MARK_MEMBER_NAME(cacheEnabled,"cacheEnabled");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_MEMBER_NAME(vars,"vars");
	HX_MARK_MEMBER_NAME(wildcard,"wildcard");
	HX_MARK_MEMBER_NAME(timeLock,"timeLock");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PipeReadCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cachedSource,"cachedSource");
	HX_VISIT_MEMBER_NAME(cacheEnabled,"cacheEnabled");
	HX_VISIT_MEMBER_NAME(source,"source");
	HX_VISIT_MEMBER_NAME(vars,"vars");
	HX_VISIT_MEMBER_NAME(wildcard,"wildcard");
	HX_VISIT_MEMBER_NAME(timeLock,"timeLock");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PipeReadCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { return hx::Val( vars ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { return hx::Val( source ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getVars") ) { return hx::Val( getVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wildcard") ) { return hx::Val( wildcard ); }
		if (HX_FIELD_EQ(inName,"timeLock") ) { return hx::Val( timeLock ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cachedSource") ) { return hx::Val( cachedSource ); }
		if (HX_FIELD_EQ(inName,"cacheEnabled") ) { return hx::Val( cacheEnabled ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PipeReadCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val PipeReadCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { vars=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wildcard") ) { wildcard=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeLock") ) { timeLock=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cachedSource") ) { cachedSource=inValue.Cast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheEnabled") ) { cacheEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PipeReadCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cachedSource","\x5d","\x9a","\x3c","\x86"));
	outFields->push(HX_HCSTRING("cacheEnabled","\x5f","\x3e","\x96","\x2c"));
	outFields->push(HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"));
	outFields->push(HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"));
	outFields->push(HX_HCSTRING("wildcard","\xda","\xd9","\x17","\xa9"));
	outFields->push(HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PipeReadCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::object::builtin::coroutine::CoroutineObject*/ ,(int)offsetof(PipeReadCommand_obj,cachedSource),HX_HCSTRING("cachedSource","\x5d","\x9a","\x3c","\x86")},
	{hx::fsBool,(int)offsetof(PipeReadCommand_obj,cacheEnabled),HX_HCSTRING("cacheEnabled","\x5f","\x3e","\x96","\x2c")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(PipeReadCommand_obj,source),HX_HCSTRING("source","\xdb","\xb0","\x31","\x32")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(PipeReadCommand_obj,vars),HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e")},
	{hx::fsString,(int)offsetof(PipeReadCommand_obj,wildcard),HX_HCSTRING("wildcard","\xda","\xd9","\x17","\xa9")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(PipeReadCommand_obj,timeLock),HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PipeReadCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String PipeReadCommand_obj_sMemberFields[] = {
	HX_HCSTRING("cachedSource","\x5d","\x9a","\x3c","\x86"),
	HX_HCSTRING("cacheEnabled","\x5f","\x3e","\x96","\x2c"),
	HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"),
	HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"),
	HX_HCSTRING("wildcard","\xda","\xd9","\x17","\xa9"),
	HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8"),
	HX_HCSTRING("getVars","\x62","\xdb","\xcb","\x20"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void PipeReadCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PipeReadCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PipeReadCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PipeReadCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class PipeReadCommand_obj::__mClass;

static ::String PipeReadCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void PipeReadCommand_obj::__register()
{
	hx::Object *dummy = new PipeReadCommand_obj;
	PipeReadCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.coroutine.PipeReadCommand","\x10","\x6a","\x99","\x32");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PipeReadCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PipeReadCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PipeReadCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PipeReadCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PipeReadCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PipeReadCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PipeReadCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PipeReadCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace coroutine
