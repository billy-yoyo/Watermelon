// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_EndLineToken
#include <src/ast/base/EndLineToken.h>
#endif
#ifndef INCLUDED_src_compiler_Core
#include <src/compiler/Core.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_coroutine_CoroutineCodeCommand
#include <src/compiler/commands/coroutine/CoroutineCodeCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_FunctionReturnSignal
#include <src/compiler/signals/FunctionReturnSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_YieldSignal
#include <src/compiler/signals/YieldSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df7297186274fc40_16_new,"src.compiler.commands.coroutine.CoroutineCodeCommand","new",0xeeabd06f,"src.compiler.commands.coroutine.CoroutineCodeCommand.new","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",16,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_42_copy,"src.compiler.commands.coroutine.CoroutineCodeCommand","copy",0xe06cc8c6,"src.compiler.commands.coroutine.CoroutineCodeCommand.copy","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",42,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_46_setScope,"src.compiler.commands.coroutine.CoroutineCodeCommand","setScope",0x99104423,"src.compiler.commands.coroutine.CoroutineCodeCommand.setScope","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",46,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_53_walk,"src.compiler.commands.coroutine.CoroutineCodeCommand","walk",0xed9a6a1a,"src.compiler.commands.coroutine.CoroutineCodeCommand.walk","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",53,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_57_run,"src.compiler.commands.coroutine.CoroutineCodeCommand","run",0xeeaee75a,"src.compiler.commands.coroutine.CoroutineCodeCommand.run","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",57,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_83_getName,"src.compiler.commands.coroutine.CoroutineCodeCommand","getName",0xb8dcd590,"src.compiler.commands.coroutine.CoroutineCodeCommand.getName","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",83,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_88_getFriendlyName,"src.compiler.commands.coroutine.CoroutineCodeCommand","getFriendlyName",0xd893ec9b,"src.compiler.commands.coroutine.CoroutineCodeCommand.getFriendlyName","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",88,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_93_getBytecode,"src.compiler.commands.coroutine.CoroutineCodeCommand","getBytecode",0xe008ddfa,"src.compiler.commands.coroutine.CoroutineCodeCommand.getBytecode","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",93,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_98_reconstruct,"src.compiler.commands.coroutine.CoroutineCodeCommand","reconstruct",0xf2978d13,"src.compiler.commands.coroutine.CoroutineCodeCommand.reconstruct","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",98,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_21_fromTokens,"src.compiler.commands.coroutine.CoroutineCodeCommand","fromTokens",0x3bc7cc35,"src.compiler.commands.coroutine.CoroutineCodeCommand.fromTokens","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",21,0x79ef9ebf)
HX_LOCAL_STACK_FRAME(_hx_pos_df7297186274fc40_25_fromBytecode,"src.compiler.commands.coroutine.CoroutineCodeCommand","fromBytecode",0xc2b3d5d0,"src.compiler.commands.coroutine.CoroutineCodeCommand.fromBytecode","src/compiler/commands/coroutine/CoroutineCodeCommand.hx",25,0x79ef9ebf)
namespace src{
namespace compiler{
namespace commands{
namespace coroutine{

void CoroutineCodeCommand_obj::__construct( ::src::compiler::Scope scope,::Array< ::Dynamic> commands){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_16_new)
HXLINE(  33)		this->result = null();
HXLINE(  32)		this->progress = (int)0;
HXLINE(  36)		super::__construct(scope);
HXLINE(  37)		this->commands = commands;
            	}

Dynamic CoroutineCodeCommand_obj::__CreateEmpty() { return new CoroutineCodeCommand_obj; }

void *CoroutineCodeCommand_obj::_hx_vtable = 0;

Dynamic CoroutineCodeCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CoroutineCodeCommand_obj > _hx_result = new CoroutineCodeCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CoroutineCodeCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x74490b17;
	}
}

 ::src::compiler::commands::Command CoroutineCodeCommand_obj::copy( ::src::compiler::Scope scope){
            	HX_GC_STACKFRAME(&_hx_pos_df7297186274fc40_42_copy)
HXDLIN(  42)		return  ::src::compiler::commands::coroutine::CoroutineCodeCommand_obj::__alloc( HX_CTX ,scope,::src::compiler::commands::Command_obj::copyArray(scope,this->commands));
            	}


void CoroutineCodeCommand_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_46_setScope)
HXLINE(  47)		this->super::setScope(scope);
HXLINE(  48)		{
HXLINE(  48)			int _g = (int)0;
HXDLIN(  48)			::Array< ::Dynamic> _g1 = this->commands;
HXDLIN(  48)			while((_g < _g1->length)){
HXLINE(  48)				 ::src::compiler::commands::Command cmd = _g1->__get(_g).StaticCast<  ::src::compiler::commands::Command >();
HXDLIN(  48)				_g = (_g + (int)1);
HXDLIN(  48)				cmd->setScope(scope);
            			}
            		}
            	}


::Array< ::Dynamic> CoroutineCodeCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_53_walk)
HXDLIN(  53)		return this->commands;
            	}


 ::src::compiler::object::Object CoroutineCodeCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_57_run)
HXLINE(  58)		 ::src::compiler::commands::Command cmd;
HXLINE(  59)		while((this->progress < this->commands->length)){
HXLINE(  60)			try {
            				HX_STACK_CATCHABLE( ::src::compiler::signals::FunctionReturnSignal, 0);
            				HX_STACK_CATCHABLE( ::src::compiler::signals::YieldSignal, 1);
HXLINE(  61)				cmd = this->commands->__get(this->progress).StaticCast<  ::src::compiler::commands::Command >();
HXLINE(  62)				bool _hx_tmp;
HXDLIN(  62)				if ((cmd->getName() != HX_("PipeReadCommand",e7,e2,01,95))) {
HXLINE(  62)					_hx_tmp = (cmd->getName() == HX_("PipeWriteCommand",9a,bf,b5,19));
            				}
            				else {
HXLINE(  62)					_hx_tmp = true;
            				}
HXDLIN(  62)				if (_hx_tmp) {
HXLINE(  63)					this->progress++;
HXLINE(  64)					cmd->run();
            				}
            				else {
HXLINE(  66)					cmd->run();
HXLINE(  67)					this->progress++;
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::src::compiler::signals::FunctionReturnSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::FunctionReturnSignal ret = _hx_e;
HXLINE(  70)					this->result = ret->getReturn();
HXLINE(  71)					this->progress = this->commands->length;
HXLINE(  72)					return null();
            				}
            				else if (_hx_e.IsClass<  ::src::compiler::signals::YieldSignal >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::src::compiler::signals::YieldSignal e = _hx_e;
HXLINE(  74)					return this->scope->getType(HX_("CoroutineYieldType",cf,ba,68,db),null())->createValue(e,this->scope,null());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(  78)		return null();
            	}


::String CoroutineCodeCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_83_getName)
HXDLIN(  83)		return HX_("CoroutineCodeCommand",c6,88,08,a3);
            	}


::String CoroutineCodeCommand_obj::getFriendlyName(){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_88_getFriendlyName)
HXDLIN(  88)		return HX_("coroutine code",75,e0,25,8b);
            	}


 ::src::compiler::bytecode::Bytecode CoroutineCodeCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_df7297186274fc40_93_getBytecode)
HXDLIN(  93)		::Array< ::Dynamic> _hx_tmp = this->commands;
HXDLIN(  93)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> CoroutineCodeCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_df7297186274fc40_98_reconstruct)
HXDLIN(  98)		 ::src::ast::base::EndLineToken _hx_tmp =  ::src::ast::base::EndLineToken_obj::__alloc( HX_CTX ,HX_(";",3b,00,00,00));
HXDLIN(  98)		return _hx_tmp->join(::src::compiler::commands::Command_obj::reconstructCommands(this->commands),true);
            	}


 ::src::compiler::commands::coroutine::CoroutineCodeCommand CoroutineCodeCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_df7297186274fc40_21_fromTokens)
HXDLIN(  21)		return  ::src::compiler::commands::coroutine::CoroutineCodeCommand_obj::__alloc( HX_CTX ,scope,::src::compiler::Core_obj::convert(scope,tokens));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CoroutineCodeCommand_obj,fromTokens,return )

 ::src::compiler::commands::coroutine::CoroutineCodeCommand CoroutineCodeCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_df7297186274fc40_25_fromBytecode)
HXLINE(  26)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE(  27)		while((arr->length > (int)0)){
HXLINE(  27)			result->push(arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            		}
HXLINE(  28)		return  ::src::compiler::commands::coroutine::CoroutineCodeCommand_obj::__alloc( HX_CTX ,scope,result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CoroutineCodeCommand_obj,fromBytecode,return )


hx::ObjectPtr< CoroutineCodeCommand_obj > CoroutineCodeCommand_obj::__new( ::src::compiler::Scope scope,::Array< ::Dynamic> commands) {
	hx::ObjectPtr< CoroutineCodeCommand_obj > __this = new CoroutineCodeCommand_obj();
	__this->__construct(scope,commands);
	return __this;
}

hx::ObjectPtr< CoroutineCodeCommand_obj > CoroutineCodeCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::Array< ::Dynamic> commands) {
	CoroutineCodeCommand_obj *__this = (CoroutineCodeCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CoroutineCodeCommand_obj), true, "src.compiler.commands.coroutine.CoroutineCodeCommand"));
	*(void **)__this = CoroutineCodeCommand_obj::_hx_vtable;
	__this->__construct(scope,commands);
	return __this;
}

CoroutineCodeCommand_obj::CoroutineCodeCommand_obj()
{
}

void CoroutineCodeCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CoroutineCodeCommand);
	HX_MARK_MEMBER_NAME(commands,"commands");
	HX_MARK_MEMBER_NAME(progress,"progress");
	HX_MARK_MEMBER_NAME(result,"result");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CoroutineCodeCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(commands,"commands");
	HX_VISIT_MEMBER_NAME(progress,"progress");
	HX_VISIT_MEMBER_NAME(result,"result");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CoroutineCodeCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { return hx::Val( commands ); }
		if (HX_FIELD_EQ(inName,"progress") ) { return hx::Val( progress ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFriendlyName") ) { return hx::Val( getFriendlyName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CoroutineCodeCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val CoroutineCodeCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::src::compiler::object::Object >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { commands=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progress") ) { progress=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CoroutineCodeCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"));
	outFields->push(HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"));
	outFields->push(HX_HCSTRING("result","\xdd","\x68","\x84","\x08"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CoroutineCodeCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CoroutineCodeCommand_obj,commands),HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe")},
	{hx::fsInt,(int)offsetof(CoroutineCodeCommand_obj,progress),HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86")},
	{hx::fsObject /*::src::compiler::object::Object*/ ,(int)offsetof(CoroutineCodeCommand_obj,result),HX_HCSTRING("result","\xdd","\x68","\x84","\x08")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CoroutineCodeCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String CoroutineCodeCommand_obj_sMemberFields[] = {
	HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"),
	HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"),
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getFriendlyName","\x0c","\x92","\xf4","\xaf"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void CoroutineCodeCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CoroutineCodeCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CoroutineCodeCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CoroutineCodeCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class CoroutineCodeCommand_obj::__mClass;

static ::String CoroutineCodeCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void CoroutineCodeCommand_obj::__register()
{
	hx::Object *dummy = new CoroutineCodeCommand_obj;
	CoroutineCodeCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.coroutine.CoroutineCodeCommand","\xfd","\x6c","\x69","\xf4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CoroutineCodeCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CoroutineCodeCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CoroutineCodeCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CoroutineCodeCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CoroutineCodeCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CoroutineCodeCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CoroutineCodeCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CoroutineCodeCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
} // end namespace coroutine
