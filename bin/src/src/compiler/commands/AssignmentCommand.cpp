// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_CommaToken
#include <src/ast/base/CommaToken.h>
#endif
#ifndef INCLUDED_src_ast_script_AssignmentToken
#include <src/ast/script/AssignmentToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_AssignmentCommand
#include <src/compiler/commands/AssignmentCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_VariableAccess
#include <src/compiler/commands/value/VariableAccess.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_BoolObject
#include <src/compiler/object/builtin/BoolObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_IntObject
#include <src/compiler/object/builtin/IntObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_StringObject
#include <src/compiler/object/builtin/StringObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ValuedObject
#include <src/compiler/object/builtin/ValuedObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_InvalidArgumentSignal
#include <src/compiler/signals/InvalidArgumentSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_InvalidFieldAccessSignal
#include <src/compiler/signals/InvalidFieldAccessSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_SyntaxErrorSignal
#include <src/compiler/signals/SyntaxErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_36d48443c09c3eb8_52_new,"src.compiler.commands.AssignmentCommand","new",0xb03f1b8f,"src.compiler.commands.AssignmentCommand.new","src/compiler/commands/AssignmentCommand.hx",52,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_59_walk,"src.compiler.commands.AssignmentCommand","walk",0x8ce8dafa,"src.compiler.commands.AssignmentCommand.walk","src/compiler/commands/AssignmentCommand.hx",59,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_96_run,"src.compiler.commands.AssignmentCommand","run",0xb042327a,"src.compiler.commands.AssignmentCommand.run","src/compiler/commands/AssignmentCommand.hx",96,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_104_getName,"src.compiler.commands.AssignmentCommand","getName",0xba4430b0,"src.compiler.commands.AssignmentCommand.getName","src/compiler/commands/AssignmentCommand.hx",104,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_109_getBytecode,"src.compiler.commands.AssignmentCommand","getBytecode",0x048c491a,"src.compiler.commands.AssignmentCommand.getBytecode","src/compiler/commands/AssignmentCommand.hx",109,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_113_reconstruct,"src.compiler.commands.AssignmentCommand","reconstruct",0x171af833,"src.compiler.commands.AssignmentCommand.reconstruct","src/compiler/commands/AssignmentCommand.hx",113,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_25_fromTokens,"src.compiler.commands.AssignmentCommand","fromTokens",0x10522515,"src.compiler.commands.AssignmentCommand.fromTokens","src/compiler/commands/AssignmentCommand.hx",25,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_46_fromBytecode,"src.compiler.commands.AssignmentCommand","fromBytecode",0x912e26b0,"src.compiler.commands.AssignmentCommand.fromBytecode","src/compiler/commands/AssignmentCommand.hx",46,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_68_assignVariable,"src.compiler.commands.AssignmentCommand","assignVariable",0x3b0510bc,"src.compiler.commands.AssignmentCommand.assignVariable","src/compiler/commands/AssignmentCommand.hx",68,0x4db48d62)
HX_LOCAL_STACK_FRAME(_hx_pos_36d48443c09c3eb8_83_assign,"src.compiler.commands.AssignmentCommand","assign",0xd30ce260,"src.compiler.commands.AssignmentCommand.assign","src/compiler/commands/AssignmentCommand.hx",83,0x4db48d62)
namespace src{
namespace compiler{
namespace commands{

void AssignmentCommand_obj::__construct( ::src::compiler::Scope scope,::Array< ::Dynamic> variables, ::src::compiler::commands::value::ValueCommand value){
            	HX_STACKFRAME(&_hx_pos_36d48443c09c3eb8_52_new)
HXLINE(  53)		super::__construct(scope);
HXLINE(  54)		this->variables = variables;
HXLINE(  55)		this->value = value;
            	}

Dynamic AssignmentCommand_obj::__CreateEmpty() { return new AssignmentCommand_obj; }

void *AssignmentCommand_obj::_hx_vtable = 0;

Dynamic AssignmentCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssignmentCommand_obj > _hx_result = new AssignmentCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool AssignmentCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x260b3757;
	}
}

::Array< ::Dynamic> AssignmentCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_36d48443c09c3eb8_59_walk)
HXLINE(  60)		::Array< ::Dynamic> cmds = ::Array_obj< ::Dynamic>::__new();
HXLINE(  61)		{
HXLINE(  61)			int _g = (int)0;
HXDLIN(  61)			::Array< ::Dynamic> _g1 = this->variables;
HXDLIN(  61)			while((_g < _g1->length)){
HXLINE(  61)				 ::src::compiler::commands::value::VariableAccess x = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::VariableAccess >();
HXDLIN(  61)				_g = (_g + (int)1);
HXDLIN(  61)				cmds->push(x);
            			}
            		}
HXLINE(  62)		cmds->push(this->value);
HXLINE(  63)		return cmds;
            	}


 ::src::compiler::object::Object AssignmentCommand_obj::run(){
            	HX_STACKFRAME(&_hx_pos_36d48443c09c3eb8_96_run)
HXLINE(  97)		 ::src::compiler::object::Object obj = this->value->run();
HXLINE(  98)		::src::compiler::commands::AssignmentCommand_obj::assign(this->scope,this->variables,obj);
HXLINE(  99)		return null();
            	}


::String AssignmentCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_36d48443c09c3eb8_104_getName)
HXDLIN( 104)		return HX_("AssignmentCommand",5e,bd,c8,6a);
            	}


 ::src::compiler::bytecode::Bytecode AssignmentCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_36d48443c09c3eb8_109_getBytecode)
HXDLIN( 109)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(2)->init(0,this->variables)->init(1,this->value);
HXDLIN( 109)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> AssignmentCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_36d48443c09c3eb8_113_reconstruct)
HXLINE( 114)		::Array< ::Dynamic> varTokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 115)		::Array< ::Dynamic> tokens;
HXLINE( 116)		{
HXLINE( 116)			int _g = (int)0;
HXDLIN( 116)			::Array< ::Dynamic> _g1 = this->variables;
HXDLIN( 116)			while((_g < _g1->length)){
HXLINE( 116)				 ::src::compiler::commands::value::VariableAccess v = _g1->__get(_g).StaticCast<  ::src::compiler::commands::value::VariableAccess >();
HXDLIN( 116)				_g = (_g + (int)1);
HXLINE( 117)				tokens = v->reconstruct();
HXLINE( 118)				tokens->push( ::src::ast::base::CommaToken_obj::__alloc( HX_CTX ,HX_(",",2c,00,00,00)));
HXLINE( 119)				varTokens->push(tokens);
            			}
            		}
HXLINE( 121)		::Array< ::Dynamic> final = ::src::ast::Token_obj::merge(varTokens);
HXLINE( 122)		bool _hx_tmp;
HXDLIN( 122)		if ((final->length > (int)0)) {
HXLINE( 122)			_hx_tmp = (final->__get((final->length - (int)1)).StaticCast<  ::src::ast::Token >()->getName() == HX_("CommaToken",04,01,3f,49));
            		}
            		else {
HXLINE( 122)			_hx_tmp = false;
            		}
HXDLIN( 122)		if (_hx_tmp) {
HXLINE( 122)			final->pop().StaticCast<  ::src::ast::Token >();
            		}
HXLINE( 123)		 ::src::ast::script::AssignmentToken _hx_tmp1 =  ::src::ast::script::AssignmentToken_obj::__alloc( HX_CTX ,HX_("=",3d,00,00,00));
HXDLIN( 123)		return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(3)->init(0,final)->init(1,_hx_tmp1)->init(2,this->value->reconstruct()));
            	}


 ::src::compiler::commands::AssignmentCommand AssignmentCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_36d48443c09c3eb8_25_fromTokens)
HXLINE(  26)		 ::src::ast::Token end = tokens->pop().StaticCast<  ::src::ast::Token >();
HXLINE(  27)		if ((end->getName() != HX_("EndLineToken",2a,db,3a,32))) {
HXLINE(  27)			HX_STACK_DO_THROW( ::src::compiler::signals::SyntaxErrorSignal_obj::__alloc( HX_CTX ,HX_("Assignments should end with and EndLineToken",35,32,68,56)));
            		}
HXLINE(  29)		int index = (int)0;
HXLINE(  30)		while((tokens->__get(index).StaticCast<  ::src::ast::Token >()->getName() != HX_("AssignmentToken",4c,94,e1,56))){
HXLINE(  30)			index = (index + (int)1);
            		}
HXLINE(  31)		::Array< ::Dynamic> lhs = tokens->splice((int)0,index);
HXLINE(  32)		::Array< ::Dynamic> rhs = tokens->splice((int)1,tokens->length);
HXLINE(  35)		::Array< ::Dynamic> vars = ::Array_obj< ::Dynamic>::__new();
HXLINE(  36)		::Array< ::Dynamic> spl = ::src::compiler::commands::Command_obj::splitTokens(lhs,HX_("CommaToken",04,01,3f,49),null(),null());
HXLINE(  37)		{
HXLINE(  37)			int _g = (int)0;
HXDLIN(  37)			while((_g < spl->length)){
HXLINE(  37)				::Array< ::Dynamic> subtokens = spl->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  37)				_g = (_g + (int)1);
HXLINE(  38)				vars->push(::src::compiler::commands::value::VariableAccess_obj::fromTokens(scope,subtokens,true));
            			}
            		}
HXLINE(  41)		return  ::src::compiler::commands::AssignmentCommand_obj::__alloc( HX_CTX ,scope,vars,::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,rhs));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssignmentCommand_obj,fromTokens,return )

 ::src::compiler::commands::AssignmentCommand AssignmentCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_36d48443c09c3eb8_46_fromBytecode)
HXDLIN(  46)		 ::Dynamic _hx_tmp = arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope);
HXDLIN(  46)		return  ::src::compiler::commands::AssignmentCommand_obj::__alloc( HX_CTX ,scope,_hx_tmp,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssignmentCommand_obj,fromBytecode,return )

void AssignmentCommand_obj::assignVariable( ::src::compiler::Scope scope,::Array< ::String > variable, ::src::compiler::object::Object obj){
            	HX_GC_STACKFRAME(&_hx_pos_36d48443c09c3eb8_68_assignVariable)
HXDLIN(  68)		if ((variable->length == (int)1)) {
HXLINE(  69)			scope->setVariable(variable->__get((int)0),obj);
            		}
            		else {
HXLINE(  71)			 ::src::compiler::object::Object o = scope->getVariable(variable->__get((int)0));
HXDLIN(  71)			 ::src::compiler::object::Object s;
HXLINE(  72)			{
HXLINE(  72)				int _g1 = (int)1;
HXDLIN(  72)				int _g = (variable->length - (int)1);
HXDLIN(  72)				while((_g1 < _g)){
HXLINE(  72)					_g1 = (_g1 + (int)1);
HXDLIN(  72)					int i = (_g1 - (int)1);
HXLINE(  73)					s = o->_str(variable->__get(i),null());
HXLINE(  74)					if (!(o->hasfield(s)->rawBool())) {
HXLINE(  74)						::String _hx_tmp = ((HX_("Object ",61,90,a0,4f) + ::Std_obj::string(o)) + HX_(" has no field ",bf,1b,77,a6));
HXDLIN(  74)						HX_STACK_DO_THROW( ::src::compiler::signals::InvalidFieldAccessSignal_obj::__alloc( HX_CTX ,(_hx_tmp + variable->__get(i))));
            					}
HXLINE(  75)					o = o->getfield(s);
            				}
            			}
HXLINE(  77)			o->setfield(o->_str(variable->__get((variable->length - (int)1)),null()),obj);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AssignmentCommand_obj,assignVariable,(void))

void AssignmentCommand_obj::assign( ::src::compiler::Scope scope,::Array< ::Dynamic> variables, ::src::compiler::object::Object obj){
            	HX_GC_STACKFRAME(&_hx_pos_36d48443c09c3eb8_83_assign)
HXDLIN(  83)		if ((variables->length == (int)1)) {
HXLINE(  84)			variables->__get((int)0).StaticCast<  ::src::compiler::commands::value::VariableAccess >()->setVariable(obj);
            		}
            		else {
HXLINE(  86)			int len = obj->len()->rawInt();
HXLINE(  87)			int _hx_tmp = obj->len()->rawInt();
HXDLIN(  87)			if ((_hx_tmp == variables->length)) {
HXLINE(  88)				int _g1 = (int)0;
HXDLIN(  88)				int _g = len;
HXDLIN(  88)				while((_g1 < _g)){
HXLINE(  88)					_g1 = (_g1 + (int)1);
HXDLIN(  88)					int i = (_g1 - (int)1);
HXLINE(  89)					 ::src::compiler::object::Object _hx_tmp1 = obj->get(obj->_int(i,null()));
HXDLIN(  89)					variables->__get(i).StaticCast<  ::src::compiler::commands::value::VariableAccess >()->setVariable(_hx_tmp1);
            				}
            			}
            			else {
HXLINE(  91)				HX_STACK_DO_THROW( ::src::compiler::signals::InvalidArgumentSignal_obj::__alloc( HX_CTX ,(((HX_("Mismatched lengths for amount of variables, expected ",5b,87,d4,d5) + variables->length) + HX_(", found ",12,6d,e5,06)) + len)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AssignmentCommand_obj,assign,(void))


hx::ObjectPtr< AssignmentCommand_obj > AssignmentCommand_obj::__new( ::src::compiler::Scope scope,::Array< ::Dynamic> variables, ::src::compiler::commands::value::ValueCommand value) {
	hx::ObjectPtr< AssignmentCommand_obj > __this = new AssignmentCommand_obj();
	__this->__construct(scope,variables,value);
	return __this;
}

hx::ObjectPtr< AssignmentCommand_obj > AssignmentCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope,::Array< ::Dynamic> variables, ::src::compiler::commands::value::ValueCommand value) {
	AssignmentCommand_obj *__this = (AssignmentCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssignmentCommand_obj), true, "src.compiler.commands.AssignmentCommand"));
	*(void **)__this = AssignmentCommand_obj::_hx_vtable;
	__this->__construct(scope,variables,value);
	return __this;
}

AssignmentCommand_obj::AssignmentCommand_obj()
{
}

void AssignmentCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssignmentCommand);
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AssignmentCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AssignmentCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return hx::Val( variables ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AssignmentCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"assign") ) { outValue = assign_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"assignVariable") ) { outValue = assignVariable_dyn(); return true; }
	}
	return false;
}

hx::Val AssignmentCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssignmentCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("variables","\xb7","\xe2","\x62","\x82"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssignmentCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AssignmentCommand_obj,variables),HX_HCSTRING("variables","\xb7","\xe2","\x62","\x82")},
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(AssignmentCommand_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssignmentCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String AssignmentCommand_obj_sMemberFields[] = {
	HX_HCSTRING("variables","\xb7","\xe2","\x62","\x82"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void AssignmentCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssignmentCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssignmentCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssignmentCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class AssignmentCommand_obj::__mClass;

static ::String AssignmentCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	HX_HCSTRING("assignVariable","\x8b","\x5b","\xcd","\xc1"),
	HX_HCSTRING("assign","\x2f","\x46","\x06","\x4c"),
	::String(null())
};

void AssignmentCommand_obj::__register()
{
	hx::Object *dummy = new AssignmentCommand_obj;
	AssignmentCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.AssignmentCommand","\x1d","\xa8","\x70","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssignmentCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AssignmentCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssignmentCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssignmentCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssignmentCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssignmentCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssignmentCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssignmentCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
