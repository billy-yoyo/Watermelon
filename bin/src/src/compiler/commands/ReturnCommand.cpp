// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Token
#include <src/ast/Token.h>
#endif
#ifndef INCLUDED_src_ast_base_KwdToken
#include <src/ast/base/KwdToken.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_bytecode_Bytecode
#include <src/compiler/bytecode/Bytecode.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_ReturnCommand
#include <src/compiler/commands/ReturnCommand.h>
#endif
#ifndef INCLUDED_src_compiler_commands_value_ValueCommand
#include <src/compiler/commands/value/ValueCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_FunctionReturnSignal
#include <src/compiler/signals/FunctionReturnSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_98b0f324603f87e3_38_new,"src.compiler.commands.ReturnCommand","new",0xb36b8f8c,"src.compiler.commands.ReturnCommand.new","src/compiler/commands/ReturnCommand.hx",38,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_45_walk,"src.compiler.commands.ReturnCommand","walk",0x50a1e45d,"src.compiler.commands.ReturnCommand.walk","src/compiler/commands/ReturnCommand.hx",45,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_50_run,"src.compiler.commands.ReturnCommand","run",0xb36ea677,"src.compiler.commands.ReturnCommand.run","src/compiler/commands/ReturnCommand.hx",50,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_56_getName,"src.compiler.commands.ReturnCommand","getName",0x8486e72d,"src.compiler.commands.ReturnCommand.getName","src/compiler/commands/ReturnCommand.hx",56,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_61_getBytecode,"src.compiler.commands.ReturnCommand","getBytecode",0xfe788217,"src.compiler.commands.ReturnCommand.getBytecode","src/compiler/commands/ReturnCommand.hx",61,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_66_reconstruct,"src.compiler.commands.ReturnCommand","reconstruct",0x11073130,"src.compiler.commands.ReturnCommand.reconstruct","src/compiler/commands/ReturnCommand.hx",66,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_20_fromTokens,"src.compiler.commands.ReturnCommand","fromTokens",0x3ac4dab8,"src.compiler.commands.ReturnCommand.fromTokens","src/compiler/commands/ReturnCommand.hx",20,0x10a74385)
HX_LOCAL_STACK_FRAME(_hx_pos_98b0f324603f87e3_33_fromBytecode,"src.compiler.commands.ReturnCommand","fromBytecode",0x45f3cb13,"src.compiler.commands.ReturnCommand.fromBytecode","src/compiler/commands/ReturnCommand.hx",33,0x10a74385)
namespace src{
namespace compiler{
namespace commands{

void ReturnCommand_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand value){
            	HX_STACKFRAME(&_hx_pos_98b0f324603f87e3_38_new)
HXLINE(  39)		super::__construct(scope);
HXLINE(  40)		this->value = value;
            	}

Dynamic ReturnCommand_obj::__CreateEmpty() { return new ReturnCommand_obj; }

void *ReturnCommand_obj::_hx_vtable = 0;

Dynamic ReturnCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ReturnCommand_obj > _hx_result = new ReturnCommand_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ReturnCommand_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20538180) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20538180;
	} else {
		return inClassId==(int)0x3b747738;
	}
}

::Array< ::Dynamic> ReturnCommand_obj::walk(){
            	HX_STACKFRAME(&_hx_pos_98b0f324603f87e3_45_walk)
HXDLIN(  45)		return this->value->walk();
            	}


 ::src::compiler::object::Object ReturnCommand_obj::run(){
            	HX_GC_STACKFRAME(&_hx_pos_98b0f324603f87e3_50_run)
HXDLIN(  50)		if (hx::IsNotNull( this->value )) {
HXDLIN(  50)			HX_STACK_DO_THROW( ::src::compiler::signals::FunctionReturnSignal_obj::__alloc( HX_CTX ,this->value->run()));
            		}
            		else {
HXLINE(  51)			HX_STACK_DO_THROW( ::src::compiler::signals::FunctionReturnSignal_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE(  50)		return null();
            	}


::String ReturnCommand_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_98b0f324603f87e3_56_getName)
HXDLIN(  56)		return HX_("ReturnCommand",5b,3a,ec,60);
            	}


 ::src::compiler::bytecode::Bytecode ReturnCommand_obj::getBytecode(){
            	HX_STACKFRAME(&_hx_pos_98b0f324603f87e3_61_getBytecode)
HXDLIN(  61)		::cpp::VirtualArray _hx_tmp = ::cpp::VirtualArray_obj::__new(1)->init(0,this->value);
HXDLIN(  61)		return ::src::compiler::bytecode::Bytecode_obj::fromArray(_hx_tmp,this->getCodeID());
            	}


::Array< ::Dynamic> ReturnCommand_obj::reconstruct(){
            	HX_GC_STACKFRAME(&_hx_pos_98b0f324603f87e3_66_reconstruct)
HXDLIN(  66)		 ::src::ast::base::KwdToken _hx_tmp =  ::src::ast::base::KwdToken_obj::__alloc( HX_CTX ,HX_("return",b0,a4,2d,09));
HXDLIN(  66)		return ::src::ast::Token_obj::merge(::cpp::VirtualArray_obj::__new(2)->init(0,_hx_tmp)->init(1,this->value->reconstruct()));
            	}


 ::src::compiler::commands::ReturnCommand ReturnCommand_obj::fromTokens( ::src::compiler::Scope scope,::Array< ::Dynamic> tokens){
            	HX_GC_STACKFRAME(&_hx_pos_98b0f324603f87e3_20_fromTokens)
HXLINE(  21)		 ::src::ast::Token end = tokens->pop().StaticCast<  ::src::ast::Token >();
HXLINE(  22)		if ((end->getName() != HX_("EndLineToken",2a,db,3a,32))) {
HXLINE(  22)			HX_STACK_DO_THROW(HX_("Return must end in endline",20,ef,80,60));
            		}
HXLINE(  24)		 ::src::ast::Token start = tokens->shift().StaticCast<  ::src::ast::Token >();
HXLINE(  25)		bool _hx_tmp;
HXDLIN(  25)		if ((start->getName() == HX_("KwdToken",c1,aa,4a,b9))) {
HXLINE(  25)			_hx_tmp = hx::IsNotEq( start->getContent(),HX_("return",b0,a4,2d,09) );
            		}
            		else {
HXLINE(  25)			_hx_tmp = true;
            		}
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  25)			HX_STACK_DO_THROW(HX_("Invalid return keyword",a2,1e,75,e4));
            		}
HXLINE(  27)		if ((tokens->length == (int)0)) {
HXLINE(  27)			return  ::src::compiler::commands::ReturnCommand_obj::__alloc( HX_CTX ,scope,null());
            		}
            		else {
HXLINE(  28)			return  ::src::compiler::commands::ReturnCommand_obj::__alloc( HX_CTX ,scope,::src::compiler::commands::value::ValueCommand_obj::fromTokens(scope,tokens));
            		}
HXLINE(  27)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReturnCommand_obj,fromTokens,return )

 ::src::compiler::commands::ReturnCommand ReturnCommand_obj::fromBytecode( ::src::compiler::Scope scope,::Array< ::Dynamic> arr){
            	HX_GC_STACKFRAME(&_hx_pos_98b0f324603f87e3_33_fromBytecode)
HXDLIN(  33)		return  ::src::compiler::commands::ReturnCommand_obj::__alloc( HX_CTX ,scope,arr->shift().StaticCast<  ::src::compiler::bytecode::Bytecode >()->convert(scope));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReturnCommand_obj,fromBytecode,return )


hx::ObjectPtr< ReturnCommand_obj > ReturnCommand_obj::__new( ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand value) {
	hx::ObjectPtr< ReturnCommand_obj > __this = new ReturnCommand_obj();
	__this->__construct(scope,value);
	return __this;
}

hx::ObjectPtr< ReturnCommand_obj > ReturnCommand_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::commands::value::ValueCommand value) {
	ReturnCommand_obj *__this = (ReturnCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ReturnCommand_obj), true, "src.compiler.commands.ReturnCommand"));
	*(void **)__this = ReturnCommand_obj::_hx_vtable;
	__this->__construct(scope,value);
	return __this;
}

ReturnCommand_obj::ReturnCommand_obj()
{
}

void ReturnCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ReturnCommand);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ReturnCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::src::compiler::commands::Command_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ReturnCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"walk") ) { return hx::Val( walk_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBytecode") ) { return hx::Val( getBytecode_dyn() ); }
		if (HX_FIELD_EQ(inName,"reconstruct") ) { return hx::Val( reconstruct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ReturnCommand_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromTokens") ) { outValue = fromTokens_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromBytecode") ) { outValue = fromBytecode_dyn(); return true; }
	}
	return false;
}

hx::Val ReturnCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::src::compiler::commands::value::ValueCommand >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ReturnCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ReturnCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::value::ValueCommand*/ ,(int)offsetof(ReturnCommand_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ReturnCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String ReturnCommand_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("walk","\x09","\x5d","\xf2","\x4e"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getBytecode","\xeb","\xb6","\x8b","\x7d"),
	HX_HCSTRING("reconstruct","\x04","\x66","\x1a","\x90"),
	::String(null()) };

static void ReturnCommand_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReturnCommand_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReturnCommand_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReturnCommand_obj::__mClass,"__mClass");
};

#endif

hx::Class ReturnCommand_obj::__mClass;

static ::String ReturnCommand_obj_sStaticFields[] = {
	HX_HCSTRING("fromTokens","\x64","\x1c","\x2b","\xd5"),
	HX_HCSTRING("fromBytecode","\xbf","\xcf","\xae","\xf7"),
	::String(null())
};

void ReturnCommand_obj::__register()
{
	hx::Object *dummy = new ReturnCommand_obj;
	ReturnCommand_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.commands.ReturnCommand","\x9a","\x19","\x7a","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ReturnCommand_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ReturnCommand_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ReturnCommand_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ReturnCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ReturnCommand_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ReturnCommand_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReturnCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReturnCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace commands
