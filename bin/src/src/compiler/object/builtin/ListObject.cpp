// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_BoolObject
#include <src/compiler/object/builtin/BoolObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_IntObject
#include <src/compiler/object/builtin/IntObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_IteratorObject
#include <src/compiler/object/builtin/IteratorObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ListObject
#include <src/compiler/object/builtin/ListObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_SpliceObject
#include <src/compiler/object/builtin/SpliceObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_SpliceValue
#include <src/compiler/object/builtin/SpliceValue.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_StringObject
#include <src/compiler/object/builtin/StringObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_TupleObject
#include <src/compiler/object/builtin/TupleObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ValuedObject
#include <src/compiler/object/builtin/ValuedObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_IndexOutOfBoundsSignal
#include <src/compiler/signals/IndexOutOfBoundsSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e5331d33606072e_13_new,"src.compiler.object.builtin.ListObject","new",0xa805efc4,"src.compiler.object.builtin.ListObject.new","src/compiler/object/builtin/ListObject.hx",13,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_33__index,"src.compiler.object.builtin.ListObject","_index",0x2d40796f,"src.compiler.object.builtin.ListObject._index","src/compiler/object/builtin/ListObject.hx",33,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_39_get,"src.compiler.object.builtin.ListObject","get",0xa8009ffa,"src.compiler.object.builtin.ListObject.get","src/compiler/object/builtin/ListObject.hx",39,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_61_set,"src.compiler.object.builtin.ListObject","set",0xa809bb06,"src.compiler.object.builtin.ListObject.set","src/compiler/object/builtin/ListObject.hx",61,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_81_delete,"src.compiler.object.builtin.ListObject","delete",0xde1d5747,"src.compiler.object.builtin.ListObject.delete","src/compiler/object/builtin/ListObject.hx",81,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_102_add,"src.compiler.object.builtin.ListObject","add",0xa7fc1185,"src.compiler.object.builtin.ListObject.add","src/compiler/object/builtin/ListObject.hx",102,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_115_mult,"src.compiler.object.builtin.ListObject","mult",0x5c8ec00c,"src.compiler.object.builtin.ListObject.mult","src/compiler/object/builtin/ListObject.hx",115,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_127_div,"src.compiler.object.builtin.ListObject","div",0xa7fe5cb5,"src.compiler.object.builtin.ListObject.div","src/compiler/object/builtin/ListObject.hx",127,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_140_len,"src.compiler.object.builtin.ListObject","len",0xa8046b39,"src.compiler.object.builtin.ListObject.len","src/compiler/object/builtin/ListObject.hx",140,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_146_iter,"src.compiler.object.builtin.ListObject","iter",0x59e91d34,"src.compiler.object.builtin.ListObject.iter","src/compiler/object/builtin/ListObject.hx",146,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_152_isin,"src.compiler.object.builtin.ListObject","isin",0x59e85e6b,"src.compiler.object.builtin.ListObject.isin","src/compiler/object/builtin/ListObject.hx",152,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_158_str,"src.compiler.object.builtin.ListObject","str",0xa809c815,"src.compiler.object.builtin.ListObject.str","src/compiler/object/builtin/ListObject.hx",158,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_164_tuple,"src.compiler.object.builtin.ListObject","tuple",0xa82a5c6c,"src.compiler.object.builtin.ListObject.tuple","src/compiler/object/builtin/ListObject.hx",164,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_170_list,"src.compiler.object.builtin.ListObject","list",0x5bdc747a,"src.compiler.object.builtin.ListObject.list","src/compiler/object/builtin/ListObject.hx",170,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_177_getArray,"src.compiler.object.builtin.ListObject","getArray",0xc454133f,"src.compiler.object.builtin.ListObject.getArray","src/compiler/object/builtin/ListObject.hx",177,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_16_objectInArray,"src.compiler.object.builtin.ListObject","objectInArray",0xf11d96d9,"src.compiler.object.builtin.ListObject.objectInArray","src/compiler/object/builtin/ListObject.hx",16,0x594c59ca)
HX_LOCAL_STACK_FRAME(_hx_pos_8e5331d33606072e_24_objectIndex,"src.compiler.object.builtin.ListObject","objectIndex",0x78f9db37,"src.compiler.object.builtin.ListObject.objectIndex","src/compiler/object/builtin/ListObject.hx",24,0x594c59ca)
namespace src{
namespace compiler{
namespace object{
namespace builtin{

void ListObject_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members,::Array< ::Dynamic> args){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_13_new)
HXLINE(  31)		this->arr = ::Array_obj< ::Dynamic>::__new();
HXLINE(  13)		super::__construct(scope,type,members,args);
            	}

Dynamic ListObject_obj::__CreateEmpty() { return new ListObject_obj; }

void *ListObject_obj::_hx_vtable = 0;

Dynamic ListObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ListObject_obj > _hx_result = new ListObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool ListObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15de4261) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15de4261;
	} else {
		return inClassId==(int)0x3d6062fe;
	}
}

int ListObject_obj::_index(int i){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_33__index)
HXLINE(  34)		if ((i < (int)0)) {
HXLINE(  34)			return (i + this->arr->length);
            		}
HXLINE(  35)		return i;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ListObject_obj,_index,return )

 ::src::compiler::object::Object ListObject_obj::get( ::src::compiler::object::Object index){
            	HX_GC_STACKFRAME(&_hx_pos_8e5331d33606072e_39_get)
HXLINE(  40)		if (this->hasMember(HX_("__get__",16,fe,be,fb))) {
HXLINE(  40)			return this->callMember(HX_("__get__",16,fe,be,fb),::Array_obj< ::Dynamic>::__new(1)->init(0,index));
            		}
HXLINE(  41)		if (index->isInstance(HX_("SpliceType",76,16,08,c6))) {
HXLINE(  42)			 ::src::compiler::object::builtin::SpliceValue splice = hx::TCast<  ::src::compiler::object::builtin::SpliceObject >::cast(index)->getValue(this->arr->length);
HXLINE(  43)			::Array< ::Dynamic> newArr = ::Array_obj< ::Dynamic>::__new();
HXLINE(  44)			int i = splice->start;
HXLINE(  46)			while((i < splice->end)){
HXLINE(  47)				newArr->push(this->arr->__get(i).StaticCast<  ::src::compiler::object::Object >());
HXLINE(  48)				i = (i + splice->step);
            			}
HXLINE(  50)			return this->_list(newArr,null());
            		}
HXLINE(  52)		int i1 = this->_index(index->rawInt());
HXLINE(  53)		bool _hx_tmp;
HXDLIN(  53)		if ((i1 >= (int)0)) {
HXLINE(  53)			_hx_tmp = (i1 < this->arr->length);
            		}
            		else {
HXLINE(  53)			_hx_tmp = false;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  54)			return this->arr->__get(i1).StaticCast<  ::src::compiler::object::Object >();
            		}
            		else {
HXLINE(  56)			HX_STACK_DO_THROW( ::src::compiler::signals::IndexOutOfBoundsSignal_obj::__alloc( HX_CTX ,(((HX_("Index ",ee,88,87,c8) + i1) + HX_(" is out of bounds, should be between 0 and ",eb,88,ef,1e)) + this->arr->length)));
            		}
HXLINE(  53)		return null();
            	}


void ListObject_obj::set( ::src::compiler::object::Object index, ::src::compiler::object::Object obj){
            	HX_GC_STACKFRAME(&_hx_pos_8e5331d33606072e_61_set)
HXLINE(  62)		if (this->hasMember(HX_("__set__",22,f4,8d,e4))) {
HXLINE(  62)			this->callMember(HX_("__set__",22,f4,8d,e4),::Array_obj< ::Dynamic>::__new(2)->init(0,index)->init(1,obj));
HXDLIN(  62)			return;
            		}
HXLINE(  63)		if (index->isInstance(HX_("SpliceType",76,16,08,c6))) {
HXLINE(  64)			 ::src::compiler::object::builtin::SpliceValue splice = hx::TCast<  ::src::compiler::object::builtin::SpliceObject >::cast(index)->getValue(this->arr->length);
HXLINE(  65)			int i = splice->start;
HXDLIN(  65)			int j = (int)0;
HXLINE(  66)			while((i < splice->end)){
HXLINE(  67)				::Array< ::Dynamic> _hx_tmp = this->arr;
HXDLIN(  67)				_hx_tmp[i] = obj->get(this->_int(j,null()));
HXLINE(  68)				i = (i + splice->step);
HXDLIN(  68)				j = (j + (int)1);
            			}
HXLINE(  70)			return;
            		}
HXLINE(  72)		int i1 = this->_index(index->rawInt());
HXLINE(  73)		bool _hx_tmp1;
HXDLIN(  73)		if ((i1 >= (int)0)) {
HXLINE(  73)			_hx_tmp1 = (i1 < this->arr->length);
            		}
            		else {
HXLINE(  73)			_hx_tmp1 = false;
            		}
HXDLIN(  73)		if (_hx_tmp1) {
HXLINE(  74)			this->arr[i1] = obj;
            		}
            		else {
HXLINE(  76)			HX_STACK_DO_THROW( ::src::compiler::signals::IndexOutOfBoundsSignal_obj::__alloc( HX_CTX ,(((HX_("Index ",ee,88,87,c8) + i1) + HX_(" is out of bounds, should be between 0 and ",eb,88,ef,1e)) + this->arr->length)));
            		}
            	}


void ListObject_obj::_hx_delete( ::src::compiler::object::Object index){
            	HX_GC_STACKFRAME(&_hx_pos_8e5331d33606072e_81_delete)
HXLINE(  82)		if (this->hasMember(HX_("__delete__",2b,27,e2,05))) {
HXLINE(  82)			this->callMember(HX_("__delete__",2b,27,e2,05),::Array_obj< ::Dynamic>::__new(1)->init(0,index));
HXDLIN(  82)			return;
            		}
HXLINE(  83)		if (index->isInstance(HX_("SpliceType",76,16,08,c6))) {
HXLINE(  84)			 ::src::compiler::object::builtin::SpliceValue splice = hx::TCast<  ::src::compiler::object::builtin::SpliceObject >::cast(index)->getValue(this->arr->length);
HXLINE(  85)			int i = splice->start;
HXLINE(  86)			while((i < splice->end)){
HXLINE(  87)				::Array< ::Dynamic> _hx_tmp = this->arr->splice((int)0,i);
HXDLIN(  87)				::Array< ::Dynamic> _hx_tmp1 = this->arr;
HXDLIN(  87)				int _hx_tmp2 = this->arr->length;
HXDLIN(  87)				this->arr = _hx_tmp->concat(_hx_tmp1->splice((i + (int)1),(_hx_tmp2 - (i + (int)1))));
HXLINE(  88)				i = (i + splice->step);
            			}
HXLINE(  90)			return;
            		}
HXLINE(  92)		int i1 = this->_index(index->rawInt());
HXLINE(  93)		bool _hx_tmp3;
HXDLIN(  93)		if ((i1 >= (int)0)) {
HXLINE(  93)			_hx_tmp3 = (i1 < this->arr->length);
            		}
            		else {
HXLINE(  93)			_hx_tmp3 = false;
            		}
HXDLIN(  93)		if (_hx_tmp3) {
HXLINE(  94)			::Array< ::Dynamic> _hx_tmp4 = this->arr->splice((int)0,i1);
HXDLIN(  94)			::Array< ::Dynamic> _hx_tmp5 = this->arr;
HXDLIN(  94)			int _hx_tmp6 = this->arr->length;
HXDLIN(  94)			this->arr = _hx_tmp4->concat(_hx_tmp5->splice((i1 + (int)1),(_hx_tmp6 - (i1 + (int)1))));
            		}
            		else {
HXLINE(  96)			HX_STACK_DO_THROW( ::src::compiler::signals::IndexOutOfBoundsSignal_obj::__alloc( HX_CTX ,(((HX_("Index ",ee,88,87,c8) + i1) + HX_(" is out of bounds, should be between 0 and ",eb,88,ef,1e)) + this->arr->length)));
            		}
            	}


 ::src::compiler::object::Object ListObject_obj::add( ::src::compiler::object::Object other){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_102_add)
HXDLIN( 102)		if (other->isInstance(HX_("ListType",58,7e,af,06))) {
HXDLIN( 102)			::Array< ::Dynamic> _hx_tmp = this->arr;
HXDLIN( 102)			return this->_list(_hx_tmp->concat(other->list()->arr),null());
            		}
            		else {
HXLINE( 103)			if (other->isInstance(HX_("TupleType",c2,3e,8e,1a))) {
HXLINE( 103)				::Array< ::Dynamic> _hx_tmp1 = this->arr;
HXDLIN( 103)				return this->_list(_hx_tmp1->concat(other->tuple()->arr),null());
            			}
            			else {
HXLINE( 104)				bool _hx_tmp2;
HXDLIN( 104)				if (!(other->hasMember(HX_("__iter__",58,f9,3c,b1)))) {
HXLINE( 104)					_hx_tmp2 = other->hasMember(HX_("__next__",f3,a5,93,1a));
            				}
            				else {
HXLINE( 104)					_hx_tmp2 = true;
            				}
HXDLIN( 104)				if (_hx_tmp2) {
HXLINE( 105)					if (!(other->hasMember(HX_("__next__",f3,a5,93,1a)))) {
HXLINE( 105)						other = other->iter();
            					}
HXLINE( 106)					::Array< ::Dynamic> newArr = this->arr->copy();
HXLINE( 107)					while(other->hasNext()->rawBool()){
HXLINE( 108)						newArr->push(other->next());
            					}
HXLINE( 110)					return this->_list(newArr,null());
            				}
            				else {
HXLINE( 111)					return this->_list(this->arr->concat(::Array_obj< ::Dynamic>::__new(1)->init(0,other)),null());
            				}
            			}
            		}
HXLINE( 102)		return null();
            	}


 ::src::compiler::object::Object ListObject_obj::mult( ::src::compiler::object::Object other){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_115_mult)
HXLINE( 116)		if (this->hasMember(HX_("__mult__",30,02,b3,e2))) {
HXLINE( 116)			return this->callMember(HX_("__mult__",30,02,b3,e2),::Array_obj< ::Dynamic>::__new(1)->init(0,other));
            		}
HXLINE( 117)		if (other->hasMember(HX_("__mult__",30,02,b3,e2))) {
HXLINE( 117)			other->mult(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 118)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE( 119)		::Array< ::Dynamic> arr = other->list()->arr;
HXLINE( 120)		{
HXLINE( 120)			int _g1 = (int)0;
HXDLIN( 120)			int _g = other->rawInt();
HXDLIN( 120)			while((_g1 < _g)){
HXLINE( 120)				_g1 = (_g1 + (int)1);
HXDLIN( 120)				int i = (_g1 - (int)1);
HXLINE( 121)				result = result->concat(arr);
            			}
            		}
HXLINE( 123)		return this->_list(result,null());
            	}


 ::src::compiler::object::Object ListObject_obj::div( ::src::compiler::object::Object other){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_127_div)
HXLINE( 128)		if (this->hasMember(HX_("__div__",91,9f,31,44))) {
HXLINE( 128)			return this->callMember(HX_("__div__",91,9f,31,44),::Array_obj< ::Dynamic>::__new(1)->init(0,other));
            		}
HXLINE( 129)		if (other->hasMember(HX_("__rdiv__",1f,d4,b1,16))) {
HXLINE( 129)			return other->rdiv(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 130)		int div = other->rawInt();
HXLINE( 131)		 ::src::compiler::object::builtin::ListObject result = hx::TCast<  ::src::compiler::object::builtin::ListObject >::cast(this->scope->getType(HX_("ListType",58,7e,af,06),null())->createObject(this->scope,null()));
HXLINE( 132)		::Array< ::Dynamic> arr = result->getArray();
HXLINE( 133)		{
HXLINE( 133)			int _g1 = (int)0;
HXDLIN( 133)			int _g = ::Math_obj::ceil(((Float)this->arr->length / (Float)div));
HXDLIN( 133)			while((_g1 < _g)){
HXLINE( 133)				_g1 = (_g1 + (int)1);
HXDLIN( 133)				int i = (_g1 - (int)1);
HXLINE( 134)				::Array< ::Dynamic> _hx_tmp = this->arr;
HXDLIN( 134)				arr->push(this->_list(_hx_tmp->slice((i * div),div),null()));
            			}
            		}
HXLINE( 136)		return result;
            	}


 ::src::compiler::object::builtin::IntObject ListObject_obj::len(){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_140_len)
HXLINE( 141)		if (this->hasMember(HX_("__len__",15,57,bb,dc))) {
HXLINE( 141)			return hx::TCast<  ::src::compiler::object::builtin::IntObject >::cast(this->callMember(HX_("__len__",15,57,bb,dc),::Array_obj< ::Dynamic>::__new(0)));
            		}
HXLINE( 142)		return this->_int(this->arr->length,null());
            	}


 ::src::compiler::object::Object ListObject_obj::iter(){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_146_iter)
HXLINE( 147)		if (this->hasMember(HX_("__iter__",58,f9,3c,b1))) {
HXLINE( 147)			return this->callMember(HX_("__iter__",58,f9,3c,b1),::Array_obj< ::Dynamic>::__new(0));
            		}
HXLINE( 148)		return this->_iter(this->arr,null());
            	}


 ::src::compiler::object::Object ListObject_obj::isin( ::src::compiler::object::Object other){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_152_isin)
HXLINE( 153)		if (this->hasMember(HX_("__isin__",4f,36,78,20))) {
HXLINE( 153)			return this->callMember(HX_("__isin__",4f,36,78,20),::Array_obj< ::Dynamic>::__new(1)->init(0,other));
            		}
HXLINE( 154)		return this->_bool(::src::compiler::object::builtin::ListObject_obj::objectInArray(other,this->arr),null());
            	}


 ::src::compiler::object::builtin::StringObject ListObject_obj::str(){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_158_str)
HXLINE( 159)		if (this->hasMember(HX_("__str__",f1,a2,76,ee))) {
HXLINE( 159)			return hx::TCast<  ::src::compiler::object::builtin::StringObject >::cast(this->callMember(HX_("__str__",f1,a2,76,ee),::Array_obj< ::Dynamic>::__new(0)));
            		}
HXLINE( 160)		return this->_str((HX_("",00,00,00,00) + ::Std_obj::string(this->arr)),null());
            	}


 ::src::compiler::object::builtin::TupleObject ListObject_obj::tuple(){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_164_tuple)
HXLINE( 165)		if (this->hasMember(HX_("__tuple__",08,52,5a,e5))) {
HXLINE( 165)			return hx::TCast<  ::src::compiler::object::builtin::TupleObject >::cast(this->callMember(HX_("__tuple__",08,52,5a,e5),::Array_obj< ::Dynamic>::__new(0)));
            		}
HXLINE( 166)		return this->_tuple(this->arr,null());
            	}


 ::src::compiler::object::builtin::ListObject ListObject_obj::list(){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_170_list)
HXLINE( 171)		if (this->hasMember(HX_("__list__",1e,2e,29,98))) {
HXLINE( 171)			return hx::TCast<  ::src::compiler::object::builtin::ListObject >::cast(this->callMember(HX_("__list__",1e,2e,29,98),::Array_obj< ::Dynamic>::__new(0)));
            		}
HXLINE( 172)		return hx::ObjectPtr<OBJ_>(this);
            	}


::Array< ::Dynamic> ListObject_obj::getArray(){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_177_getArray)
HXDLIN( 177)		return this->arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ListObject_obj,getArray,return )

bool ListObject_obj::objectInArray( ::src::compiler::object::Object obj,::Array< ::Dynamic> arr){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_16_objectInArray)
HXLINE(  17)		{
HXLINE(  17)			int _g = (int)0;
HXDLIN(  17)			while((_g < arr->length)){
HXLINE(  17)				 ::src::compiler::object::Object other = arr->__get(_g).StaticCast<  ::src::compiler::object::Object >();
HXDLIN(  17)				_g = (_g + (int)1);
HXLINE(  18)				if (obj->eq(other)->rawBool()) {
HXLINE(  18)					return true;
            				}
            			}
            		}
HXLINE(  20)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ListObject_obj,objectInArray,return )

int ListObject_obj::objectIndex( ::src::compiler::object::Object obj,::Array< ::Dynamic> arr){
            	HX_STACKFRAME(&_hx_pos_8e5331d33606072e_24_objectIndex)
HXLINE(  25)		{
HXLINE(  25)			int _g1 = (int)0;
HXDLIN(  25)			int _g = arr->length;
HXDLIN(  25)			while((_g1 < _g)){
HXLINE(  25)				_g1 = (_g1 + (int)1);
HXDLIN(  25)				int i = (_g1 - (int)1);
HXLINE(  26)				if (obj->eq(arr->__get(i).StaticCast<  ::src::compiler::object::Object >())->rawBool()) {
HXLINE(  26)					return i;
            				}
            			}
            		}
HXLINE(  28)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ListObject_obj,objectIndex,return )


hx::ObjectPtr< ListObject_obj > ListObject_obj::__new( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members,::Array< ::Dynamic> args) {
	hx::ObjectPtr< ListObject_obj > __this = new ListObject_obj();
	__this->__construct(scope,type,members,args);
	return __this;
}

hx::ObjectPtr< ListObject_obj > ListObject_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members,::Array< ::Dynamic> args) {
	ListObject_obj *__this = (ListObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ListObject_obj), true, "src.compiler.object.builtin.ListObject"));
	*(void **)__this = ListObject_obj::_hx_vtable;
	__this->__construct(scope,type,members,args);
	return __this;
}

ListObject_obj::ListObject_obj()
{
}

void ListObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ListObject);
	HX_MARK_MEMBER_NAME(arr,"arr");
	 ::src::compiler::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ListObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(arr,"arr");
	 ::src::compiler::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ListObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"arr") ) { return hx::Val( arr ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"div") ) { return hx::Val( div_dyn() ); }
		if (HX_FIELD_EQ(inName,"len") ) { return hx::Val( len_dyn() ); }
		if (HX_FIELD_EQ(inName,"str") ) { return hx::Val( str_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn() ); }
		if (HX_FIELD_EQ(inName,"iter") ) { return hx::Val( iter_dyn() ); }
		if (HX_FIELD_EQ(inName,"isin") ) { return hx::Val( isin_dyn() ); }
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tuple") ) { return hx::Val( tuple_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_index") ) { return hx::Val( _index_dyn() ); }
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getArray") ) { return hx::Val( getArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ListObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"objectIndex") ) { outValue = objectIndex_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"objectInArray") ) { outValue = objectInArray_dyn(); return true; }
	}
	return false;
}

hx::Val ListObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"arr") ) { arr=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ListObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("arr","\x61","\xfe","\x49","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ListObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ListObject_obj,arr),HX_HCSTRING("arr","\x61","\xfe","\x49","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ListObject_obj_sStaticStorageInfo = 0;
#endif

static ::String ListObject_obj_sMemberFields[] = {
	HX_HCSTRING("arr","\x61","\xfe","\x49","\x00"),
	HX_HCSTRING("_index","\x53","\xe2","\xfb","\xb9"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("delete","\x2b","\xc0","\xd8","\x6a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("mult","\xf0","\x67","\x65","\x48"),
	HX_HCSTRING("div","\x51","\x3d","\x4c","\x00"),
	HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("isin","\x4f","\x06","\xbf","\x45"),
	HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"),
	HX_HCSTRING("tuple","\x08","\x9c","\x26","\x18"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("getArray","\x23","\x7d","\x66","\x85"),
	::String(null()) };

static void ListObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ListObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ListObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ListObject_obj::__mClass,"__mClass");
};

#endif

hx::Class ListObject_obj::__mClass;

static ::String ListObject_obj_sStaticFields[] = {
	HX_HCSTRING("objectInArray","\x75","\xd2","\x0c","\xb1"),
	HX_HCSTRING("objectIndex","\xd3","\xb7","\x43","\x2d"),
	::String(null())
};

void ListObject_obj::__register()
{
	hx::Object *dummy = new ListObject_obj;
	ListObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.object.builtin.ListObject","\xd2","\xfd","\xe1","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ListObject_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ListObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ListObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ListObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ListObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ListObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ListObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ListObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
