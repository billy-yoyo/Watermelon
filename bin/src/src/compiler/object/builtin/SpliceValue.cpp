// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_compiler_object_builtin_SpliceValue
#include <src/compiler/object/builtin/SpliceValue.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f5c2e03f1a6f86d_14_new,"src.compiler.object.builtin.SpliceValue","new",0x5746b792,"src.compiler.object.builtin.SpliceValue.new","src/compiler/object/builtin/SpliceValue.hx",14,0x5fe2a4c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f5c2e03f1a6f86d_22_toString,"src.compiler.object.builtin.SpliceValue","toString",0xe26e943a,"src.compiler.object.builtin.SpliceValue.toString","src/compiler/object/builtin/SpliceValue.hx",22,0x5fe2a4c0)
namespace src{
namespace compiler{
namespace object{
namespace builtin{

void SpliceValue_obj::__construct(int start,int end,int step){
            	HX_STACKFRAME(&_hx_pos_6f5c2e03f1a6f86d_14_new)
HXLINE(  15)		this->start = start;
HXLINE(  16)		this->end = end;
HXLINE(  17)		this->step = step;
            	}

Dynamic SpliceValue_obj::__CreateEmpty() { return new SpliceValue_obj; }

void *SpliceValue_obj::_hx_vtable = 0;

Dynamic SpliceValue_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpliceValue_obj > _hx_result = new SpliceValue_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SpliceValue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3196ec2c;
}

::String SpliceValue_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_6f5c2e03f1a6f86d_22_toString)
HXDLIN(  22)		return (((((HX_("",00,00,00,00) + this->start) + HX_(":",3a,00,00,00)) + this->end) + HX_(":",3a,00,00,00)) + this->step);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpliceValue_obj,toString,return )


SpliceValue_obj::SpliceValue_obj()
{
}

hx::Val SpliceValue_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SpliceValue_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { step=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpliceValue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SpliceValue_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SpliceValue_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(SpliceValue_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(SpliceValue_obj,step),HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpliceValue_obj_sStaticStorageInfo = 0;
#endif

static ::String SpliceValue_obj_sMemberFields[] = {
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void SpliceValue_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpliceValue_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpliceValue_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpliceValue_obj::__mClass,"__mClass");
};

#endif

hx::Class SpliceValue_obj::__mClass;

void SpliceValue_obj::__register()
{
	hx::Object *dummy = new SpliceValue_obj;
	SpliceValue_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.object.builtin.SpliceValue","\xa0","\x46","\x53","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpliceValue_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpliceValue_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpliceValue_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpliceValue_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpliceValue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpliceValue_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
