// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_FunctionArgument
#include <src/compiler/object/builtin/FunctionArgument.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_FunctionCode
#include <src/compiler/object/builtin/FunctionCode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc5c18bc04f7452d_15_new,"src.compiler.object.builtin.FunctionCode","new",0x8b743dac,"src.compiler.object.builtin.FunctionCode.new","src/compiler/object/builtin/FunctionCode.hx",15,0x56d36462)
namespace src{
namespace compiler{
namespace object{
namespace builtin{

void FunctionCode_obj::__construct( ::src::compiler::commands::Command code,::Array< ::Dynamic> args){
            	HX_STACKFRAME(&_hx_pos_bc5c18bc04f7452d_15_new)
HXLINE(  16)		this->code = code;
HXLINE(  17)		this->args = args;
HXLINE(  18)		this->positional = (int)0;
HXLINE(  19)		{
HXLINE(  19)			int _g = (int)0;
HXDLIN(  19)			while((_g < args->length)){
HXLINE(  19)				 ::src::compiler::object::builtin::FunctionArgument arg = args->__get(_g).StaticCast<  ::src::compiler::object::builtin::FunctionArgument >();
HXDLIN(  19)				_g = (_g + (int)1);
HXLINE(  20)				if (!(arg->isKwd())) {
HXLINE(  20)					this->positional++;
            				}
            			}
            		}
            	}

Dynamic FunctionCode_obj::__CreateEmpty() { return new FunctionCode_obj; }

void *FunctionCode_obj::_hx_vtable = 0;

Dynamic FunctionCode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FunctionCode_obj > _hx_result = new FunctionCode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FunctionCode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4fa1564a;
}


hx::ObjectPtr< FunctionCode_obj > FunctionCode_obj::__new( ::src::compiler::commands::Command code,::Array< ::Dynamic> args) {
	hx::ObjectPtr< FunctionCode_obj > __this = new FunctionCode_obj();
	__this->__construct(code,args);
	return __this;
}

hx::ObjectPtr< FunctionCode_obj > FunctionCode_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::commands::Command code,::Array< ::Dynamic> args) {
	FunctionCode_obj *__this = (FunctionCode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FunctionCode_obj), true, "src.compiler.object.builtin.FunctionCode"));
	*(void **)__this = FunctionCode_obj::_hx_vtable;
	__this->__construct(code,args);
	return __this;
}

FunctionCode_obj::FunctionCode_obj()
{
}

void FunctionCode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionCode);
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(args,"args");
	HX_MARK_MEMBER_NAME(positional,"positional");
	HX_MARK_END_CLASS();
}

void FunctionCode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(args,"args");
	HX_VISIT_MEMBER_NAME(positional,"positional");
}

hx::Val FunctionCode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"args") ) { return hx::Val( args ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"positional") ) { return hx::Val( positional ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FunctionCode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast<  ::src::compiler::commands::Command >(); return inValue; }
		if (HX_FIELD_EQ(inName,"args") ) { args=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"positional") ) { positional=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionCode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	outFields->push(HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"));
	outFields->push(HX_HCSTRING("positional","\xd4","\x31","\x63","\x77"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FunctionCode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::src::compiler::commands::Command*/ ,(int)offsetof(FunctionCode_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FunctionCode_obj,args),HX_HCSTRING("args","\x5d","\x8d","\x74","\x40")},
	{hx::fsInt,(int)offsetof(FunctionCode_obj,positional),HX_HCSTRING("positional","\xd4","\x31","\x63","\x77")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FunctionCode_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionCode_obj_sMemberFields[] = {
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"),
	HX_HCSTRING("positional","\xd4","\x31","\x63","\x77"),
	::String(null()) };

static void FunctionCode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunctionCode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunctionCode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunctionCode_obj::__mClass,"__mClass");
};

#endif

hx::Class FunctionCode_obj::__mClass;

void FunctionCode_obj::__register()
{
	hx::Object *dummy = new FunctionCode_obj;
	FunctionCode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.object.builtin.FunctionCode","\xba","\x37","\xc9","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FunctionCode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FunctionCode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FunctionCode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunctionCode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionCode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionCode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
