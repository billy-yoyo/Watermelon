// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_commands_Command
#include <src/compiler/commands/Command.h>
#endif
#ifndef INCLUDED_src_compiler_commands_coroutine_CoroutineCodeCommand
#include <src/compiler/commands/coroutine/CoroutineCodeCommand.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_ValuedObject
#include <src/compiler/object/builtin/ValuedObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineLoop
#include <src/compiler/object/builtin/coroutine/CoroutineLoop.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject
#include <src/compiler/object/builtin/coroutine/CoroutineObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutinePacket
#include <src/compiler/object/builtin/coroutine/CoroutinePacket.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_YieldObject
#include <src/compiler/object/builtin/coroutine/YieldObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ValueErrorSignal
#include <src/compiler/signals/ValueErrorSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_YieldSignal
#include <src/compiler/signals/YieldSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_48_new,"src.compiler.object.builtin.coroutine.CoroutineObject","new",0x0f4cb69e,"src.compiler.object.builtin.coroutine.CoroutineObject.new","src/compiler/object/builtin/coroutine/CoroutineObject.hx",48,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_70_addVars,"src.compiler.object.builtin.coroutine.CoroutineObject","addVars",0x51c24bab,"src.compiler.object.builtin.coroutine.CoroutineObject.addVars","src/compiler/object/builtin/coroutine/CoroutineObject.hx",70,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_74_setScope,"src.compiler.object.builtin.coroutine.CoroutineObject","setScope",0x14339394,"src.compiler.object.builtin.coroutine.CoroutineObject.setScope","src/compiler/object/builtin/coroutine/CoroutineObject.hx",74,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_84_getLoop,"src.compiler.object.builtin.coroutine.CoroutineObject","getLoop",0xe1763358,"src.compiler.object.builtin.coroutine.CoroutineObject.getLoop","src/compiler/object/builtin/coroutine/CoroutineObject.hx",84,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_89_setLoop,"src.compiler.object.builtin.coroutine.CoroutineObject","setLoop",0xd477c464,"src.compiler.object.builtin.coroutine.CoroutineObject.setLoop","src/compiler/object/builtin/coroutine/CoroutineObject.hx",89,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_94_isFinished,"src.compiler.object.builtin.coroutine.CoroutineObject","isFinished",0x7c8522fe,"src.compiler.object.builtin.coroutine.CoroutineObject.isFinished","src/compiler/object/builtin/coroutine/CoroutineObject.hx",94,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_98_startTimeLock,"src.compiler.object.builtin.coroutine.CoroutineObject","startTimeLock",0x6c06e0d8,"src.compiler.object.builtin.coroutine.CoroutineObject.startTimeLock","src/compiler/object/builtin/coroutine/CoroutineObject.hx",98,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_105_isQueued,"src.compiler.object.builtin.coroutine.CoroutineObject","isQueued",0xb4e0a63f,"src.compiler.object.builtin.coroutine.CoroutineObject.isQueued","src/compiler/object/builtin/coroutine/CoroutineObject.hx",105,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_109_queue,"src.compiler.object.builtin.coroutine.CoroutineObject","queue",0xc997ff4f,"src.compiler.object.builtin.coroutine.CoroutineObject.queue","src/compiler/object/builtin/coroutine/CoroutineObject.hx",109,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_116_startRead,"src.compiler.object.builtin.coroutine.CoroutineObject","startRead",0xf876ed96,"src.compiler.object.builtin.coroutine.CoroutineObject.startRead","src/compiler/object/builtin/coroutine/CoroutineObject.hx",116,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_125_writeObject,"src.compiler.object.builtin.coroutine.CoroutineObject","writeObject",0x6bff253c,"src.compiler.object.builtin.coroutine.CoroutineObject.writeObject","src/compiler/object/builtin/coroutine/CoroutineObject.hx",125,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_134_writeObjectToCoro,"src.compiler.object.builtin.coroutine.CoroutineObject","writeObjectToCoro",0xfa8356e0,"src.compiler.object.builtin.coroutine.CoroutineObject.writeObjectToCoro","src/compiler/object/builtin/coroutine/CoroutineObject.hx",134,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_143_readObject,"src.compiler.object.builtin.coroutine.CoroutineObject","readObject",0x7b82e037,"src.compiler.object.builtin.coroutine.CoroutineObject.readObject","src/compiler/object/builtin/coroutine/CoroutineObject.hx",143,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_151_readObjectFromCoro,"src.compiler.object.builtin.coroutine.CoroutineObject","readObjectFromCoro",0xd482b74a,"src.compiler.object.builtin.coroutine.CoroutineObject.readObjectFromCoro","src/compiler/object/builtin/coroutine/CoroutineObject.hx",151,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_159_check,"src.compiler.object.builtin.coroutine.CoroutineObject","check",0xb1640a86,"src.compiler.object.builtin.coroutine.CoroutineObject.check","src/compiler/object/builtin/coroutine/CoroutineObject.hx",159,0xa0a576f5)
HX_LOCAL_STACK_FRAME(_hx_pos_9bafa1a33974ef1c_16_boot,"src.compiler.object.builtin.coroutine.CoroutineObject","boot",0x4bec1434,"src.compiler.object.builtin.coroutine.CoroutineObject.boot","src/compiler/object/builtin/coroutine/CoroutineObject.hx",16,0xa0a576f5)
namespace src{
namespace compiler{
namespace object{
namespace builtin{
namespace coroutine{

void CoroutineObject_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members, ::src::compiler::object::builtin::coroutine::CoroutineLoop loop, ::src::compiler::commands::coroutine::CoroutineCodeCommand code, ::src::compiler::Scope codeScope,::Array< ::Dynamic> args){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_48_new)
HXLINE(  49)		super::__construct(scope,type,members,args);
HXLINE(  50)		this->loop = loop;
HXLINE(  51)		this->code = Dynamic( code->copy(codeScope)).StaticCast<  ::src::compiler::commands::coroutine::CoroutineCodeCommand >();
HXLINE(  52)		this->inputStack = ::Array_obj< ::Dynamic>::__new();
HXLINE(  53)		this->outputStack = ::Array_obj< ::Dynamic>::__new();
HXLINE(  54)		this->readingFrom = null();
HXLINE(  55)		this->reading = false;
HXLINE(  56)		this->timeLock = (int)0;
HXLINE(  57)		this->locked = false;
HXLINE(  58)		this->writing = false;
HXLINE(  59)		this->values = ::Array_obj< ::Dynamic>::__new();
HXLINE(  60)		this->writingTo = null();
HXLINE(  61)		this->waitForRead = null();
HXLINE(  62)		this->vars = ::Array_obj< ::String >::__new();
HXLINE(  63)		this->wildcardName = null();
HXLINE(  64)		this->finished = false;
HXLINE(  65)		this->queued = false;
            	}

Dynamic CoroutineObject_obj::__CreateEmpty() { return new CoroutineObject_obj; }

void *CoroutineObject_obj::_hx_vtable = 0;

Dynamic CoroutineObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CoroutineObject_obj > _hx_result = new CoroutineObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool CoroutineObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15de4261) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15de4261;
	} else {
		return inClassId==(int)0x75b1fbb0;
	}
}

void CoroutineObject_obj::addVars(::Array< ::String > vars){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_70_addVars)
HXDLIN(  70)		int _g = (int)0;
HXDLIN(  70)		while((_g < vars->length)){
HXDLIN(  70)			::String v = vars->__get(_g);
HXDLIN(  70)			_g = (_g + (int)1);
HXDLIN(  70)			this->vars->push(v);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineObject_obj,addVars,(void))

void CoroutineObject_obj::setScope( ::src::compiler::Scope scope){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_74_setScope)
HXLINE(  75)		this->super::setScope(scope);
HXLINE(  76)		 ::src::compiler::object::builtin::coroutine::CoroutineObject source = scope->getClosestCoroutine();
HXLINE(  77)		if (hx::IsNotNull( source )) {
HXLINE(  78)			this->loop = source->getLoop();
            		}
            	}


 ::src::compiler::object::builtin::coroutine::CoroutineLoop CoroutineObject_obj::getLoop(){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_84_getLoop)
HXDLIN(  84)		return this->loop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineObject_obj,getLoop,return )

void CoroutineObject_obj::setLoop( ::src::compiler::object::builtin::coroutine::CoroutineLoop loop){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_89_setLoop)
HXDLIN(  89)		this->loop = loop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineObject_obj,setLoop,(void))

bool CoroutineObject_obj::isFinished(){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_94_isFinished)
HXDLIN(  94)		return this->finished;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineObject_obj,isFinished,return )

void CoroutineObject_obj::startTimeLock(Float delay){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_98_startTimeLock)
HXLINE(  99)		this->timeLock = (::Sys_obj::time() + delay);
HXLINE( 100)		this->locked = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineObject_obj,startTimeLock,(void))

bool CoroutineObject_obj::isQueued(){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_105_isQueued)
HXDLIN( 105)		return this->queued;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineObject_obj,isQueued,return )

void CoroutineObject_obj::queue(){
            	HX_GC_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_109_queue)
HXLINE( 110)		if (hx::IsNull( this->loop )) {
HXLINE( 110)			HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Coroutine queued before being assigned a loop, can only read from coroutines inside other coroutines!",b3,b5,d6,e1)));
            		}
HXLINE( 111)		this->loop->startTask(hx::ObjectPtr<OBJ_>(this));
HXLINE( 112)		this->queued = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineObject_obj,queue,(void))

void CoroutineObject_obj::startRead(::Array< ::String > vars, ::src::compiler::object::builtin::coroutine::CoroutineObject from,::String wildcard){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_116_startRead)
HXLINE( 117)		this->vars = vars;
HXLINE( 118)		this->readingFrom = from;
HXLINE( 119)		this->wildcardName = wildcard;
HXLINE( 120)		this->reading = true;
HXLINE( 121)		bool _hx_tmp;
HXDLIN( 121)		if (hx::IsNotNull( from )) {
HXLINE( 121)			_hx_tmp = !(from->isQueued());
            		}
            		else {
HXLINE( 121)			_hx_tmp = false;
            		}
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 121)			from->queue();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(CoroutineObject_obj,startRead,(void))

 ::src::compiler::object::builtin::coroutine::CoroutinePacket CoroutineObject_obj::writeObject( ::src::compiler::object::Object obj){
            	HX_GC_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_125_writeObject)
HXLINE( 126)		 ::src::compiler::object::builtin::coroutine::CoroutinePacket packet =  ::src::compiler::object::builtin::coroutine::CoroutinePacket_obj::__alloc( HX_CTX ,obj,hx::ObjectPtr<OBJ_>(this));
HXLINE( 127)		this->outputStack->push(packet);
HXLINE( 128)		packet->setTime();
HXLINE( 130)		return packet;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineObject_obj,writeObject,return )

 ::src::compiler::object::builtin::coroutine::CoroutinePacket CoroutineObject_obj::writeObjectToCoro( ::src::compiler::object::Object obj, ::src::compiler::object::builtin::coroutine::CoroutineObject coro){
            	HX_GC_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_134_writeObjectToCoro)
HXLINE( 135)		 ::src::compiler::object::builtin::coroutine::CoroutinePacket packet =  ::src::compiler::object::builtin::coroutine::CoroutinePacket_obj::__alloc( HX_CTX ,obj,hx::ObjectPtr<OBJ_>(this));
HXLINE( 136)		coro->inputStack->push(packet);
HXLINE( 137)		packet->setTime();
HXLINE( 139)		return packet;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CoroutineObject_obj,writeObjectToCoro,return )

 ::src::compiler::object::builtin::coroutine::CoroutinePacket CoroutineObject_obj::readObject(){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_143_readObject)
HXLINE( 144)		 ::src::compiler::object::builtin::coroutine::CoroutinePacket packet = this->inputStack->shift().StaticCast<  ::src::compiler::object::builtin::coroutine::CoroutinePacket >();
HXLINE( 145)		packet->readBy = hx::ObjectPtr<OBJ_>(this);
HXLINE( 147)		return packet;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineObject_obj,readObject,return )

 ::src::compiler::object::builtin::coroutine::CoroutinePacket CoroutineObject_obj::readObjectFromCoro( ::src::compiler::object::builtin::coroutine::CoroutineObject coro){
            	HX_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_151_readObjectFromCoro)
HXLINE( 152)		 ::src::compiler::object::builtin::coroutine::CoroutinePacket packet = coro->outputStack->shift().StaticCast<  ::src::compiler::object::builtin::coroutine::CoroutinePacket >();
HXLINE( 153)		packet->readBy = hx::ObjectPtr<OBJ_>(this);
HXLINE( 155)		return packet;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineObject_obj,readObjectFromCoro,return )

bool CoroutineObject_obj::check(){
            	HX_GC_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_159_check)
HXLINE( 160)		if (this->locked) {
HXLINE( 161)			Float _hx_tmp = ::Sys_obj::cpuTime();
HXDLIN( 161)			if ((_hx_tmp < this->timeLock)) {
HXLINE( 161)				return false;
            			}
            			else {
HXLINE( 163)				this->locked = false;
HXLINE( 164)				this->timeLock = (int)0;
            			}
            		}
HXLINE( 167)		if (this->reading) {
HXLINE( 168)			 ::src::compiler::object::builtin::coroutine::CoroutinePacket packet = null();
HXLINE( 169)			bool _hx_tmp1;
HXDLIN( 169)			if (hx::IsNull( this->readingFrom )) {
HXLINE( 169)				_hx_tmp1 = (this->inputStack->length > (int)0);
            			}
            			else {
HXLINE( 169)				_hx_tmp1 = false;
            			}
HXDLIN( 169)			if (_hx_tmp1) {
HXLINE( 170)				packet = this->readObject();
            			}
            			else {
HXLINE( 171)				if (hx::IsNotNull( this->readingFrom )) {
HXLINE( 172)					 ::src::compiler::object::builtin::coroutine::CoroutinePacket recentInput = null();
HXLINE( 173)					{
HXLINE( 173)						int _g = (int)0;
HXDLIN( 173)						::Array< ::Dynamic> _g1 = this->inputStack;
HXDLIN( 173)						while((_g < _g1->length)){
HXLINE( 173)							 ::src::compiler::object::builtin::coroutine::CoroutinePacket inp = _g1->__get(_g).StaticCast<  ::src::compiler::object::builtin::coroutine::CoroutinePacket >();
HXDLIN( 173)							_g = (_g + (int)1);
HXLINE( 174)							if (hx::IsEq( inp->source,this->readingFrom )) {
HXLINE( 175)								recentInput = inp;
HXLINE( 176)								goto _hx_goto_15;
            							}
            						}
            						_hx_goto_15:;
            					}
HXLINE( 179)					 ::src::compiler::object::builtin::coroutine::CoroutinePacket recentOutput = null();
HXLINE( 180)					if ((this->readingFrom->outputStack->length > (int)0)) {
HXLINE( 180)						recentOutput = this->readingFrom->outputStack->__get((int)0).StaticCast<  ::src::compiler::object::builtin::coroutine::CoroutinePacket >();
            					}
HXLINE( 182)					bool _hx_tmp2;
HXDLIN( 182)					if (hx::IsNull( recentInput )) {
HXLINE( 182)						_hx_tmp2 = hx::IsNull( recentOutput );
            					}
            					else {
HXLINE( 182)						_hx_tmp2 = false;
            					}
HXDLIN( 182)					if (_hx_tmp2) {
HXLINE( 183)						if (this->readingFrom->isFinished()) {
HXLINE( 184)							 ::src::compiler::object::Object packet1 = ::src::compiler::object::builtin::coroutine::CoroutineObject_obj::emptyPacketType->createObject(this->scope,null());
HXDLIN( 184)							packet =  ::src::compiler::object::builtin::coroutine::CoroutinePacket_obj::__alloc( HX_CTX ,packet1,this->readingFrom);
HXLINE( 185)							packet->setTime();
HXLINE( 186)							packet->readBy = hx::ObjectPtr<OBJ_>(this);
            						}
            						else {
HXLINE( 188)							return false;
            						}
            					}
            					else {
HXLINE( 190)						if (hx::IsNull( recentInput )) {
HXLINE( 191)							packet = this->readObjectFromCoro(this->readingFrom);
            						}
            						else {
HXLINE( 192)							bool _hx_tmp3;
HXDLIN( 192)							if (hx::IsNotNull( recentOutput )) {
HXLINE( 192)								_hx_tmp3 = (recentInput->sent < recentOutput->sent);
            							}
            							else {
HXLINE( 192)								_hx_tmp3 = true;
            							}
HXDLIN( 192)							if (_hx_tmp3) {
HXLINE( 193)								this->inputStack->remove(recentInput);
HXLINE( 194)								recentInput->readBy = hx::ObjectPtr<OBJ_>(this);
HXLINE( 195)								packet = recentInput;
            							}
            							else {
HXLINE( 197)								packet = this->readObjectFromCoro(this->readingFrom);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 200)					return false;
            				}
            			}
HXLINE( 203)			if ((this->vars->length > (int)0)) {
HXLINE( 204)				::String name = ( (::String)(this->vars->shift()) );
HXLINE( 205)				this->code->getScope()->setVariable(name,packet->object);
HXLINE( 206)				bool _hx_tmp4;
HXDLIN( 206)				bool _hx_tmp5;
HXDLIN( 206)				if (hx::IsNull( this->readingFrom )) {
HXLINE( 206)					_hx_tmp5 = hx::IsNotNull( this->wildcardName );
            				}
            				else {
HXLINE( 206)					_hx_tmp5 = false;
            				}
HXDLIN( 206)				if (_hx_tmp5) {
HXLINE( 206)					_hx_tmp4 = (this->wildcardName != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 206)					_hx_tmp4 = false;
            				}
HXDLIN( 206)				if (_hx_tmp4) {
HXLINE( 207)					this->code->getScope()->setVariable(this->wildcardName,packet->source);
            				}
            			}
HXLINE( 210)			if ((this->vars->length > (int)0)) {
HXLINE( 211)				return false;
            			}
HXLINE( 213)			this->reading = false;
HXLINE( 214)			this->readingFrom = null();
HXLINE( 215)			this->wildcardName = null();
            		}
HXLINE( 217)		if (this->writing) {
HXLINE( 219)			if (hx::IsNull( this->waitForRead )) {
HXLINE( 220)				if (hx::IsNull( this->writingTo )) {
HXLINE( 221)					if (hx::IsNotNull( this->wildcardName )) {
HXLINE( 222)						if ((this->values->length > (int)1)) {
HXLINE( 222)							HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Can only wait for a single value to be read",98,b6,1c,3f)));
            						}
HXLINE( 223)						if ((this->values->length == (int)0)) {
HXLINE( 223)							this->waitForRead = this->writeObject(null());
            						}
            						else {
HXLINE( 224)							this->waitForRead = this->writeObject(this->values->__get((int)0).StaticCast<  ::src::compiler::object::Object >());
            						}
HXLINE( 225)						return false;
            					}
            					else {
HXLINE( 227)						if ((this->values->length == (int)0)) {
HXLINE( 227)							this->writeObject(null());
            						}
            						else {
HXLINE( 229)							int _g2 = (int)0;
HXDLIN( 229)							::Array< ::Dynamic> _g11 = this->values;
HXDLIN( 229)							while((_g2 < _g11->length)){
HXLINE( 229)								 ::src::compiler::object::Object value = _g11->__get(_g2).StaticCast<  ::src::compiler::object::Object >();
HXDLIN( 229)								_g2 = (_g2 + (int)1);
HXDLIN( 229)								this->writeObject(value);
            							}
            						}
HXLINE( 231)						this->writing = false;
HXLINE( 232)						this->values = ::Array_obj< ::Dynamic>::__new();
            					}
            				}
            				else {
HXLINE( 235)					{
HXLINE( 235)						int _g3 = (int)0;
HXDLIN( 235)						::Array< ::Dynamic> _g12 = this->values;
HXDLIN( 235)						while((_g3 < _g12->length)){
HXLINE( 235)							 ::src::compiler::object::Object value1 = _g12->__get(_g3).StaticCast<  ::src::compiler::object::Object >();
HXDLIN( 235)							_g3 = (_g3 + (int)1);
HXDLIN( 235)							this->writeObjectToCoro(value1,this->writingTo);
            						}
            					}
HXLINE( 236)					this->writing = false;
HXLINE( 237)					this->writingTo = null();
HXLINE( 238)					this->values = ::Array_obj< ::Dynamic>::__new();
            				}
            			}
            			else {
HXLINE( 240)				if (hx::IsNull( this->wildcardName )) {
HXLINE( 241)					this->writing = false;
HXLINE( 242)					this->waitForRead = null();
HXLINE( 243)					this->values = ::Array_obj< ::Dynamic>::__new();
            				}
            				else {
HXLINE( 245)					if (hx::IsNotNull( this->waitForRead->readBy )) {
HXLINE( 246)						if ((this->wildcardName != HX_("",00,00,00,00))) {
HXLINE( 246)							this->code->getScope()->setVariable(this->wildcardName,this->waitForRead->readBy);
            						}
HXLINE( 247)						this->writing = false;
HXLINE( 248)						this->waitForRead = null();
HXLINE( 249)						this->values = ::Array_obj< ::Dynamic>::__new();
HXLINE( 250)						this->writingTo = null();
            					}
            					else {
HXLINE( 251)						return false;
            					}
            				}
            			}
            		}
HXLINE( 255)		 ::src::compiler::object::Object rawResult = this->code->run();
HXLINE( 257)		if (hx::IsNull( rawResult )) {
HXLINE( 259)			this->finished = true;
HXLINE( 260)			return true;
            		}
            		else {
HXLINE( 263)			 ::src::compiler::signals::YieldSignal result = hx::TCast<  ::src::compiler::object::builtin::coroutine::YieldObject >::cast(rawResult)->yield;
HXLINE( 264)			if (result->isTimeLocked) {
HXLINE( 265)				Float _hx_tmp6 = ::Sys_obj::cpuTime();
HXDLIN( 265)				this->timeLock = (_hx_tmp6 + result->timeLock);
HXLINE( 266)				this->locked = true;
            			}
HXLINE( 269)			this->wildcardName = result->wildcard;
HXLINE( 270)			if (result->isRead) {
HXLINE( 271)				this->reading = true;
HXLINE( 272)				this->readingFrom = result->coro;
HXLINE( 273)				this->vars = result->vars;
            			}
            			else {
HXLINE( 275)				this->writing = true;
HXLINE( 276)				this->writingTo = result->coro;
HXLINE( 277)				this->values = result->values;
            			}
HXLINE( 279)			return false;
            		}
HXLINE( 257)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineObject_obj,check,return )

 ::src::compiler::object::ObjectType CoroutineObject_obj::emptyPacketType;


hx::ObjectPtr< CoroutineObject_obj > CoroutineObject_obj::__new( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members, ::src::compiler::object::builtin::coroutine::CoroutineLoop loop, ::src::compiler::commands::coroutine::CoroutineCodeCommand code, ::src::compiler::Scope codeScope,::Array< ::Dynamic> args) {
	hx::ObjectPtr< CoroutineObject_obj > __this = new CoroutineObject_obj();
	__this->__construct(scope,type,members,loop,code,codeScope,args);
	return __this;
}

hx::ObjectPtr< CoroutineObject_obj > CoroutineObject_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members, ::src::compiler::object::builtin::coroutine::CoroutineLoop loop, ::src::compiler::commands::coroutine::CoroutineCodeCommand code, ::src::compiler::Scope codeScope,::Array< ::Dynamic> args) {
	CoroutineObject_obj *__this = (CoroutineObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CoroutineObject_obj), true, "src.compiler.object.builtin.coroutine.CoroutineObject"));
	*(void **)__this = CoroutineObject_obj::_hx_vtable;
	__this->__construct(scope,type,members,loop,code,codeScope,args);
	return __this;
}

CoroutineObject_obj::CoroutineObject_obj()
{
}

void CoroutineObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CoroutineObject);
	HX_MARK_MEMBER_NAME(inputStack,"inputStack");
	HX_MARK_MEMBER_NAME(outputStack,"outputStack");
	HX_MARK_MEMBER_NAME(readingFrom,"readingFrom");
	HX_MARK_MEMBER_NAME(reading,"reading");
	HX_MARK_MEMBER_NAME(vars,"vars");
	HX_MARK_MEMBER_NAME(writingTo,"writingTo");
	HX_MARK_MEMBER_NAME(writing,"writing");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(waitForRead,"waitForRead");
	HX_MARK_MEMBER_NAME(wildcardName,"wildcardName");
	HX_MARK_MEMBER_NAME(timeLock,"timeLock");
	HX_MARK_MEMBER_NAME(locked,"locked");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(queued,"queued");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(code,"code");
	 ::src::compiler::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CoroutineObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(inputStack,"inputStack");
	HX_VISIT_MEMBER_NAME(outputStack,"outputStack");
	HX_VISIT_MEMBER_NAME(readingFrom,"readingFrom");
	HX_VISIT_MEMBER_NAME(reading,"reading");
	HX_VISIT_MEMBER_NAME(vars,"vars");
	HX_VISIT_MEMBER_NAME(writingTo,"writingTo");
	HX_VISIT_MEMBER_NAME(writing,"writing");
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(waitForRead,"waitForRead");
	HX_VISIT_MEMBER_NAME(wildcardName,"wildcardName");
	HX_VISIT_MEMBER_NAME(timeLock,"timeLock");
	HX_VISIT_MEMBER_NAME(locked,"locked");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(queued,"queued");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(code,"code");
	 ::src::compiler::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CoroutineObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { return hx::Val( vars ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { return hx::Val( queue_dyn() ); }
		if (HX_FIELD_EQ(inName,"check") ) { return hx::Val( check_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		if (HX_FIELD_EQ(inName,"locked") ) { return hx::Val( locked ); }
		if (HX_FIELD_EQ(inName,"queued") ) { return hx::Val( queued ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"reading") ) { return hx::Val( reading ); }
		if (HX_FIELD_EQ(inName,"writing") ) { return hx::Val( writing ); }
		if (HX_FIELD_EQ(inName,"addVars") ) { return hx::Val( addVars_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLoop") ) { return hx::Val( getLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLoop") ) { return hx::Val( setLoop_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeLock") ) { return hx::Val( timeLock ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished ); }
		if (HX_FIELD_EQ(inName,"setScope") ) { return hx::Val( setScope_dyn() ); }
		if (HX_FIELD_EQ(inName,"isQueued") ) { return hx::Val( isQueued_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"writingTo") ) { return hx::Val( writingTo ); }
		if (HX_FIELD_EQ(inName,"startRead") ) { return hx::Val( startRead_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"inputStack") ) { return hx::Val( inputStack ); }
		if (HX_FIELD_EQ(inName,"isFinished") ) { return hx::Val( isFinished_dyn() ); }
		if (HX_FIELD_EQ(inName,"readObject") ) { return hx::Val( readObject_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"outputStack") ) { return hx::Val( outputStack ); }
		if (HX_FIELD_EQ(inName,"readingFrom") ) { return hx::Val( readingFrom ); }
		if (HX_FIELD_EQ(inName,"waitForRead") ) { return hx::Val( waitForRead ); }
		if (HX_FIELD_EQ(inName,"writeObject") ) { return hx::Val( writeObject_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wildcardName") ) { return hx::Val( wildcardName ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startTimeLock") ) { return hx::Val( startTimeLock_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"writeObjectToCoro") ) { return hx::Val( writeObjectToCoro_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"readObjectFromCoro") ) { return hx::Val( readObjectFromCoro_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CoroutineObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"emptyPacketType") ) { outValue = ( emptyPacketType ); return true; }
	}
	return false;
}

hx::Val CoroutineObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vars") ) { vars=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast<  ::src::compiler::object::builtin::coroutine::CoroutineLoop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast<  ::src::compiler::commands::coroutine::CoroutineCodeCommand >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"locked") ) { locked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"queued") ) { queued=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"reading") ) { reading=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"writing") ) { writing=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeLock") ) { timeLock=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"writingTo") ) { writingTo=inValue.Cast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"inputStack") ) { inputStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"outputStack") ) { outputStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"readingFrom") ) { readingFrom=inValue.Cast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waitForRead") ) { waitForRead=inValue.Cast<  ::src::compiler::object::builtin::coroutine::CoroutinePacket >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wildcardName") ) { wildcardName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CoroutineObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"emptyPacketType") ) { emptyPacketType=ioValue.Cast<  ::src::compiler::object::ObjectType >(); return true; }
	}
	return false;
}

void CoroutineObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("inputStack","\xde","\x2e","\x46","\x02"));
	outFields->push(HX_HCSTRING("outputStack","\x87","\xc4","\xdc","\xd7"));
	outFields->push(HX_HCSTRING("readingFrom","\xd6","\x62","\x0b","\x0c"));
	outFields->push(HX_HCSTRING("reading","\x4c","\xfb","\xe1","\x02"));
	outFields->push(HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"));
	outFields->push(HX_HCSTRING("writingTo","\x77","\x04","\x79","\xb4"));
	outFields->push(HX_HCSTRING("writing","\xdc","\x0b","\x39","\xab"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("waitForRead","\x0a","\x2d","\x25","\xce"));
	outFields->push(HX_HCSTRING("wildcardName","\x45","\x6d","\xab","\x2d"));
	outFields->push(HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8"));
	outFields->push(HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"));
	outFields->push(HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"));
	outFields->push(HX_HCSTRING("queued","\xb3","\x51","\x51","\xcf"));
	outFields->push(HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"));
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CoroutineObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CoroutineObject_obj,inputStack),HX_HCSTRING("inputStack","\xde","\x2e","\x46","\x02")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CoroutineObject_obj,outputStack),HX_HCSTRING("outputStack","\x87","\xc4","\xdc","\xd7")},
	{hx::fsObject /*::src::compiler::object::builtin::coroutine::CoroutineObject*/ ,(int)offsetof(CoroutineObject_obj,readingFrom),HX_HCSTRING("readingFrom","\xd6","\x62","\x0b","\x0c")},
	{hx::fsBool,(int)offsetof(CoroutineObject_obj,reading),HX_HCSTRING("reading","\x4c","\xfb","\xe1","\x02")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(CoroutineObject_obj,vars),HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e")},
	{hx::fsObject /*::src::compiler::object::builtin::coroutine::CoroutineObject*/ ,(int)offsetof(CoroutineObject_obj,writingTo),HX_HCSTRING("writingTo","\x77","\x04","\x79","\xb4")},
	{hx::fsBool,(int)offsetof(CoroutineObject_obj,writing),HX_HCSTRING("writing","\xdc","\x0b","\x39","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CoroutineObject_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{hx::fsObject /*::src::compiler::object::builtin::coroutine::CoroutinePacket*/ ,(int)offsetof(CoroutineObject_obj,waitForRead),HX_HCSTRING("waitForRead","\x0a","\x2d","\x25","\xce")},
	{hx::fsString,(int)offsetof(CoroutineObject_obj,wildcardName),HX_HCSTRING("wildcardName","\x45","\x6d","\xab","\x2d")},
	{hx::fsFloat,(int)offsetof(CoroutineObject_obj,timeLock),HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8")},
	{hx::fsBool,(int)offsetof(CoroutineObject_obj,locked),HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59")},
	{hx::fsBool,(int)offsetof(CoroutineObject_obj,finished),HX_HCSTRING("finished","\x72","\x93","\x0e","\x95")},
	{hx::fsBool,(int)offsetof(CoroutineObject_obj,queued),HX_HCSTRING("queued","\xb3","\x51","\x51","\xcf")},
	{hx::fsObject /*::src::compiler::object::builtin::coroutine::CoroutineLoop*/ ,(int)offsetof(CoroutineObject_obj,loop),HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47")},
	{hx::fsObject /*::src::compiler::commands::coroutine::CoroutineCodeCommand*/ ,(int)offsetof(CoroutineObject_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo CoroutineObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::src::compiler::object::ObjectType*/ ,(void *) &CoroutineObject_obj::emptyPacketType,HX_HCSTRING("emptyPacketType","\x4f","\xab","\x49","\xcc")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CoroutineObject_obj_sMemberFields[] = {
	HX_HCSTRING("inputStack","\xde","\x2e","\x46","\x02"),
	HX_HCSTRING("outputStack","\x87","\xc4","\xdc","\xd7"),
	HX_HCSTRING("readingFrom","\xd6","\x62","\x0b","\x0c"),
	HX_HCSTRING("reading","\x4c","\xfb","\xe1","\x02"),
	HX_HCSTRING("vars","\xac","\x2b","\x49","\x4e"),
	HX_HCSTRING("writingTo","\x77","\x04","\x79","\xb4"),
	HX_HCSTRING("writing","\xdc","\x0b","\x39","\xab"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("waitForRead","\x0a","\x2d","\x25","\xce"),
	HX_HCSTRING("wildcardName","\x45","\x6d","\xab","\x2d"),
	HX_HCSTRING("timeLock","\x98","\x1e","\x19","\xe8"),
	HX_HCSTRING("locked","\x0a","\x05","\xc7","\x59"),
	HX_HCSTRING("finished","\x72","\x93","\x0e","\x95"),
	HX_HCSTRING("queued","\xb3","\x51","\x51","\xcf"),
	HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"),
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("addVars","\x6d","\x6e","\x86","\x8a"),
	HX_HCSTRING("setScope","\x92","\xda","\x0d","\x87"),
	HX_HCSTRING("getLoop","\x1a","\x56","\x3a","\x1a"),
	HX_HCSTRING("setLoop","\x26","\xe7","\x3b","\x0d"),
	HX_HCSTRING("isFinished","\x7c","\xa5","\xbd","\x0f"),
	HX_HCSTRING("startTimeLock","\x1a","\x81","\xd4","\xec"),
	HX_HCSTRING("isQueued","\x3d","\xed","\xba","\x27"),
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("startRead","\xd8","\xc4","\x9a","\x04"),
	HX_HCSTRING("writeObject","\xfe","\xd0","\x38","\xaa"),
	HX_HCSTRING("writeObjectToCoro","\x22","\x40","\x13","\x83"),
	HX_HCSTRING("readObject","\xb5","\x62","\xbb","\x0e"),
	HX_HCSTRING("readObjectFromCoro","\xc8","\xe7","\xde","\xc9"),
	HX_HCSTRING("check","\xc8","\x98","\xb6","\x45"),
	::String(null()) };

static void CoroutineObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CoroutineObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CoroutineObject_obj::emptyPacketType,"emptyPacketType");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CoroutineObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CoroutineObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CoroutineObject_obj::emptyPacketType,"emptyPacketType");
};

#endif

hx::Class CoroutineObject_obj::__mClass;

static ::String CoroutineObject_obj_sStaticFields[] = {
	HX_HCSTRING("emptyPacketType","\x4f","\xab","\x49","\xcc"),
	::String(null())
};

void CoroutineObject_obj::__register()
{
	hx::Object *dummy = new CoroutineObject_obj;
	CoroutineObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.object.builtin.coroutine.CoroutineObject","\xac","\xcf","\x11","\x99");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CoroutineObject_obj::__GetStatic;
	__mClass->mSetStaticField = &CoroutineObject_obj::__SetStatic;
	__mClass->mMarkFunc = CoroutineObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CoroutineObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CoroutineObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CoroutineObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CoroutineObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CoroutineObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CoroutineObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CoroutineObject_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_9bafa1a33974ef1c_16_boot)
HXDLIN(  16)		emptyPacketType =  ::src::compiler::object::ObjectType_obj::__alloc( HX_CTX ,null(),HX_("EmptyPacketType",2f,b3,d5,2c),null(),null(),null());
            	}
}

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
} // end namespace coroutine
