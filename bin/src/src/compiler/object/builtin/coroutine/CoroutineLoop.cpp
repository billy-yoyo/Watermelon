// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineLoop
#include <src/compiler/object/builtin/coroutine/CoroutineLoop.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_coroutine_CoroutineObject
#include <src/compiler/object/builtin/coroutine/CoroutineObject.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ValueErrorSignal
#include <src/compiler/signals/ValueErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6c6cd38b27c6240f_9_new,"src.compiler.object.builtin.coroutine.CoroutineLoop","new",0x000a6f83,"src.compiler.object.builtin.coroutine.CoroutineLoop.new","src/compiler/object/builtin/coroutine/CoroutineLoop.hx",9,0x5cdf32f0)
HX_LOCAL_STACK_FRAME(_hx_pos_6c6cd38b27c6240f_15_init,"src.compiler.object.builtin.coroutine.CoroutineLoop","init",0x05cfda8d,"src.compiler.object.builtin.coroutine.CoroutineLoop.init","src/compiler/object/builtin/coroutine/CoroutineLoop.hx",15,0x5cdf32f0)
HX_LOCAL_STACK_FRAME(_hx_pos_6c6cd38b27c6240f_22_startTask,"src.compiler.object.builtin.coroutine.CoroutineLoop","startTask",0x3651542a,"src.compiler.object.builtin.coroutine.CoroutineLoop.startTask","src/compiler/object/builtin/coroutine/CoroutineLoop.hx",22,0x5cdf32f0)
HX_LOCAL_STACK_FRAME(_hx_pos_6c6cd38b27c6240f_30_start,"src.compiler.object.builtin.coroutine.CoroutineLoop","start",0xd6026245,"src.compiler.object.builtin.coroutine.CoroutineLoop.start","src/compiler/object/builtin/coroutine/CoroutineLoop.hx",30,0x5cdf32f0)
HX_LOCAL_STACK_FRAME(_hx_pos_6c6cd38b27c6240f_45_startWithGlobalLock,"src.compiler.object.builtin.coroutine.CoroutineLoop","startWithGlobalLock",0x2f7be9b9,"src.compiler.object.builtin.coroutine.CoroutineLoop.startWithGlobalLock","src/compiler/object/builtin/coroutine/CoroutineLoop.hx",45,0x5cdf32f0)
namespace src{
namespace compiler{
namespace object{
namespace builtin{
namespace coroutine{

void CoroutineLoop_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members,::Array< ::Dynamic> args){
            	HX_STACKFRAME(&_hx_pos_6c6cd38b27c6240f_9_new)
HXLINE(  12)		this->queue = ::Array_obj< ::Dynamic>::__new();
HXLINE(   9)		super::__construct(scope,type,members,args);
            	}

Dynamic CoroutineLoop_obj::__CreateEmpty() { return new CoroutineLoop_obj; }

void *CoroutineLoop_obj::_hx_vtable = 0;

Dynamic CoroutineLoop_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CoroutineLoop_obj > _hx_result = new CoroutineLoop_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CoroutineLoop_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0beeffe9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0beeffe9;
	} else {
		return inClassId==(int)0x15de4261;
	}
}

void CoroutineLoop_obj::init(::Array< ::Dynamic> args){
            	HX_GC_STACKFRAME(&_hx_pos_6c6cd38b27c6240f_15_init)
HXDLIN(  15)		int _g = (int)0;
HXDLIN(  15)		while((_g < args->length)){
HXDLIN(  15)			 ::src::compiler::object::Object obj = args->__get(_g).StaticCast<  ::src::compiler::object::Object >();
HXDLIN(  15)			_g = (_g + (int)1);
HXLINE(  16)			if (!(obj->isInstance(HX_("CoroutineType",92,ec,d1,42)))) {
HXLINE(  16)				HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Loop can only be started with coroutines",c1,e3,6c,12)));
            			}
HXLINE(  17)			this->startTask(hx::TCast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >::cast(obj));
            		}
            	}


void CoroutineLoop_obj::startTask( ::src::compiler::object::builtin::coroutine::CoroutineObject coro){
            	HX_GC_STACKFRAME(&_hx_pos_6c6cd38b27c6240f_22_startTask)
HXLINE(  23)		this->queue->push(coro);
HXLINE(  24)		bool _hx_tmp;
HXDLIN(  24)		if (hx::IsNotNull( coro->getLoop() )) {
HXLINE(  24)			_hx_tmp = hx::IsNotEq( coro->getLoop(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(  24)			_hx_tmp = false;
            		}
HXDLIN(  24)		if (_hx_tmp) {
HXLINE(  24)			HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Coroutine already belongs to another loop",6a,0a,63,fc)));
            		}
            		else {
HXLINE(  25)			if (hx::IsNull( coro->getLoop() )) {
HXLINE(  25)				coro->setLoop(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineLoop_obj,startTask,(void))

void CoroutineLoop_obj::start(){
            	HX_STACKFRAME(&_hx_pos_6c6cd38b27c6240f_30_start)
HXLINE(  32)		int i;
HXDLIN(  32)		 ::src::compiler::object::builtin::coroutine::CoroutineObject coro;
HXLINE(  33)		while((this->queue->length > (int)0)){
HXLINE(  34)			i = (int)0;
HXLINE(  35)			while((i < this->queue->length)){
HXLINE(  36)				coro = this->queue->__get(i).StaticCast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >();
HXLINE(  37)				if (coro->check()) {
HXLINE(  38)					this->queue->remove(coro);
            				}
            				else {
HXLINE(  39)					i = (i + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CoroutineLoop_obj,start,(void))

void CoroutineLoop_obj::startWithGlobalLock(Float lock){
            	HX_STACKFRAME(&_hx_pos_6c6cd38b27c6240f_45_startWithGlobalLock)
HXLINE(  46)		int i;
HXDLIN(  46)		 ::src::compiler::object::builtin::coroutine::CoroutineObject coro;
HXLINE(  47)		while((this->queue->length > (int)0)){
HXLINE(  48)			i = (int)0;
HXLINE(  49)			while((i < this->queue->length)){
HXLINE(  50)				coro = this->queue->__get(i).StaticCast<  ::src::compiler::object::builtin::coroutine::CoroutineObject >();
HXLINE(  51)				if (coro->check()) {
HXLINE(  52)					this->queue->remove(coro);
            				}
            				else {
HXLINE(  53)					i = (i + (int)1);
            				}
            			}
HXLINE(  55)			::Sys_obj::sleep(lock);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CoroutineLoop_obj,startWithGlobalLock,(void))


hx::ObjectPtr< CoroutineLoop_obj > CoroutineLoop_obj::__new( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members,::Array< ::Dynamic> args) {
	hx::ObjectPtr< CoroutineLoop_obj > __this = new CoroutineLoop_obj();
	__this->__construct(scope,type,members,args);
	return __this;
}

hx::ObjectPtr< CoroutineLoop_obj > CoroutineLoop_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type, ::haxe::ds::StringMap members,::Array< ::Dynamic> args) {
	CoroutineLoop_obj *__this = (CoroutineLoop_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CoroutineLoop_obj), true, "src.compiler.object.builtin.coroutine.CoroutineLoop"));
	*(void **)__this = CoroutineLoop_obj::_hx_vtable;
	__this->__construct(scope,type,members,args);
	return __this;
}

CoroutineLoop_obj::CoroutineLoop_obj()
{
}

void CoroutineLoop_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CoroutineLoop);
	HX_MARK_MEMBER_NAME(queue,"queue");
	 ::src::compiler::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CoroutineLoop_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(queue,"queue");
	 ::src::compiler::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CoroutineLoop_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { return hx::Val( queue ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTask") ) { return hx::Val( startTask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"startWithGlobalLock") ) { return hx::Val( startWithGlobalLock_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CoroutineLoop_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { queue=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CoroutineLoop_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CoroutineLoop_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CoroutineLoop_obj,queue),HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CoroutineLoop_obj_sStaticStorageInfo = 0;
#endif

static ::String CoroutineLoop_obj_sMemberFields[] = {
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("startTask","\xc7","\x38","\xea","\x05"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("startWithGlobalLock","\x96","\x94","\x01","\x8d"),
	::String(null()) };

static void CoroutineLoop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CoroutineLoop_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CoroutineLoop_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CoroutineLoop_obj::__mClass,"__mClass");
};

#endif

hx::Class CoroutineLoop_obj::__mClass;

void CoroutineLoop_obj::__register()
{
	hx::Object *dummy = new CoroutineLoop_obj;
	CoroutineLoop_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.object.builtin.coroutine.CoroutineLoop","\x11","\xf2","\x9d","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CoroutineLoop_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CoroutineLoop_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CoroutineLoop_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CoroutineLoop_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CoroutineLoop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CoroutineLoop_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
} // end namespace coroutine
