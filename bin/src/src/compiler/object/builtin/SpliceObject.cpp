// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_compiler_Scope
#include <src/compiler/Scope.h>
#endif
#ifndef INCLUDED_src_compiler_object_Object
#include <src/compiler/object/Object.h>
#endif
#ifndef INCLUDED_src_compiler_object_ObjectType
#include <src/compiler/object/ObjectType.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_SpliceObject
#include <src/compiler/object/builtin/SpliceObject.h>
#endif
#ifndef INCLUDED_src_compiler_object_builtin_SpliceValue
#include <src/compiler/object/builtin/SpliceValue.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ExitSignal
#include <src/compiler/signals/ExitSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_IndexOutOfBoundsSignal
#include <src/compiler/signals/IndexOutOfBoundsSignal.h>
#endif
#ifndef INCLUDED_src_compiler_signals_ValueErrorSignal
#include <src/compiler/signals/ValueErrorSignal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_42eba51608c9dc08_18_new,"src.compiler.object.builtin.SpliceObject","new",0xe2d4b9a2,"src.compiler.object.builtin.SpliceObject.new","src/compiler/object/builtin/SpliceObject.hx",18,0x4971192c)
HX_LOCAL_STACK_FRAME(_hx_pos_42eba51608c9dc08_29_getValue,"src.compiler.object.builtin.SpliceObject","getValue",0x29afd679,"src.compiler.object.builtin.SpliceObject.getValue","src/compiler/object/builtin/SpliceObject.hx",29,0x4971192c)
namespace src{
namespace compiler{
namespace object{
namespace builtin{

void SpliceObject_obj::__construct( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type,int start,int end,int step,bool startDefined,bool endDefined,bool stepDefined){
            	HX_STACKFRAME(&_hx_pos_42eba51608c9dc08_18_new)
HXLINE(  19)		super::__construct(scope,type,null(),null());
HXLINE(  20)		this->start = start;
HXLINE(  21)		this->end = end;
HXLINE(  22)		this->step = step;
HXLINE(  23)		this->startDefined = startDefined;
HXLINE(  24)		this->endDefined = endDefined;
HXLINE(  25)		this->stepDefined = stepDefined;
            	}

Dynamic SpliceObject_obj::__CreateEmpty() { return new SpliceObject_obj; }

void *SpliceObject_obj::_hx_vtable = 0;

Dynamic SpliceObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpliceObject_obj > _hx_result = new SpliceObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool SpliceObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13d608dc) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13d608dc;
	} else {
		return inClassId==(int)0x15de4261;
	}
}

 ::src::compiler::object::builtin::SpliceValue SpliceObject_obj::getValue(int length){
            	HX_GC_STACKFRAME(&_hx_pos_42eba51608c9dc08_29_getValue)
HXLINE(  30)		int start = this->start;
HXDLIN(  30)		int end = this->end;
HXDLIN(  30)		int step = this->step;
HXLINE(  31)		if (!(this->startDefined)) {
HXLINE(  32)			if ((step > (int)0)) {
HXLINE(  32)				start = (int)0;
            			}
            			else {
HXLINE(  33)				start = -(length);
            			}
            		}
HXLINE(  35)		if ((start < (int)0)) {
HXLINE(  35)			start = (start + length);
            		}
HXLINE(  36)		bool _hx_tmp;
HXDLIN(  36)		if ((start >= (int)0)) {
HXLINE(  36)			_hx_tmp = (start >= length);
            		}
            		else {
HXLINE(  36)			_hx_tmp = true;
            		}
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  36)			HX_STACK_DO_THROW( ::src::compiler::signals::IndexOutOfBoundsSignal_obj::__alloc( HX_CTX ,(((HX_("Index ",ee,88,87,c8) + start) + HX_(" out of bounds, should be between 0 and ",e1,62,b8,e8)) + length)));
            		}
HXLINE(  38)		if (!(this->endDefined)) {
HXLINE(  39)			if ((step > (int)0)) {
HXLINE(  39)				end = length;
            			}
            			else {
HXLINE(  40)				end = (int)0;
            			}
            		}
HXLINE(  42)		if ((end < (int)0)) {
HXLINE(  42)			end = (end + length);
            		}
HXLINE(  43)		bool _hx_tmp1;
HXDLIN(  43)		if ((end >= (int)0)) {
HXLINE(  43)			_hx_tmp1 = (end > length);
            		}
            		else {
HXLINE(  43)			_hx_tmp1 = true;
            		}
HXDLIN(  43)		if (_hx_tmp1) {
HXLINE(  43)			HX_STACK_DO_THROW( ::src::compiler::signals::IndexOutOfBoundsSignal_obj::__alloc( HX_CTX ,(((HX_("Index ",ee,88,87,c8) + end) + HX_(" out of bounds, should be between 0 and ",e1,62,b8,e8)) + (length + (int)1))));
            		}
HXLINE(  45)		if (!(this->stepDefined)) {
HXLINE(  46)			if ((end > start)) {
HXLINE(  46)				step = (int)1;
            			}
            			else {
HXLINE(  47)				step = (int)-1;
            			}
            		}
HXLINE(  50)		bool _hx_tmp2;
HXDLIN(  50)		if ((start < end)) {
HXLINE(  50)			_hx_tmp2 = (step < (int)1);
            		}
            		else {
HXLINE(  50)			_hx_tmp2 = false;
            		}
HXDLIN(  50)		if (_hx_tmp2) {
HXLINE(  50)			HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid splice, start is less than end and the step is negative",8b,b2,6a,80)));
            		}
HXLINE(  51)		bool _hx_tmp3;
HXDLIN(  51)		if ((start > end)) {
HXLINE(  51)			_hx_tmp3 = (step > (int)1);
            		}
            		else {
HXLINE(  51)			_hx_tmp3 = false;
            		}
HXDLIN(  51)		if (_hx_tmp3) {
HXLINE(  51)			HX_STACK_DO_THROW( ::src::compiler::signals::ValueErrorSignal_obj::__alloc( HX_CTX ,HX_("Invalid splice, start is greater than end and step is positive",83,d5,af,16)));
            		}
HXLINE(  52)		return  ::src::compiler::object::builtin::SpliceValue_obj::__alloc( HX_CTX ,start,end,step);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpliceObject_obj,getValue,return )


hx::ObjectPtr< SpliceObject_obj > SpliceObject_obj::__new( ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type,int start,int end,int step,bool startDefined,bool endDefined,bool stepDefined) {
	hx::ObjectPtr< SpliceObject_obj > __this = new SpliceObject_obj();
	__this->__construct(scope,type,start,end,step,startDefined,endDefined,stepDefined);
	return __this;
}

hx::ObjectPtr< SpliceObject_obj > SpliceObject_obj::__alloc(hx::Ctx *_hx_ctx, ::src::compiler::Scope scope, ::src::compiler::object::ObjectType type,int start,int end,int step,bool startDefined,bool endDefined,bool stepDefined) {
	SpliceObject_obj *__this = (SpliceObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpliceObject_obj), true, "src.compiler.object.builtin.SpliceObject"));
	*(void **)__this = SpliceObject_obj::_hx_vtable;
	__this->__construct(scope,type,start,end,step,startDefined,endDefined,stepDefined);
	return __this;
}

SpliceObject_obj::SpliceObject_obj()
{
}

hx::Val SpliceObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getValue") ) { return hx::Val( getValue_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endDefined") ) { return hx::Val( endDefined ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stepDefined") ) { return hx::Val( stepDefined ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startDefined") ) { return hx::Val( startDefined ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SpliceObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { step=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endDefined") ) { endDefined=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stepDefined") ) { stepDefined=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startDefined") ) { startDefined=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpliceObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"));
	outFields->push(HX_HCSTRING("startDefined","\x87","\x1b","\xb4","\x12"));
	outFields->push(HX_HCSTRING("endDefined","\x2e","\x5d","\x2a","\x47"));
	outFields->push(HX_HCSTRING("stepDefined","\xdd","\x39","\x52","\xb3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SpliceObject_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SpliceObject_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(SpliceObject_obj,end),HX_HCSTRING("end","\xdb","\x03","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(SpliceObject_obj,step),HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c")},
	{hx::fsBool,(int)offsetof(SpliceObject_obj,startDefined),HX_HCSTRING("startDefined","\x87","\x1b","\xb4","\x12")},
	{hx::fsBool,(int)offsetof(SpliceObject_obj,endDefined),HX_HCSTRING("endDefined","\x2e","\x5d","\x2a","\x47")},
	{hx::fsBool,(int)offsetof(SpliceObject_obj,stepDefined),HX_HCSTRING("stepDefined","\xdd","\x39","\x52","\xb3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpliceObject_obj_sStaticStorageInfo = 0;
#endif

static ::String SpliceObject_obj_sMemberFields[] = {
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("startDefined","\x87","\x1b","\xb4","\x12"),
	HX_HCSTRING("endDefined","\x2e","\x5d","\x2a","\x47"),
	HX_HCSTRING("stepDefined","\xdd","\x39","\x52","\xb3"),
	HX_HCSTRING("getValue","\xfb","\x8e","\x8f","\x91"),
	::String(null()) };

static void SpliceObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpliceObject_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpliceObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpliceObject_obj::__mClass,"__mClass");
};

#endif

hx::Class SpliceObject_obj::__mClass;

void SpliceObject_obj::__register()
{
	hx::Object *dummy = new SpliceObject_obj;
	SpliceObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.object.builtin.SpliceObject","\xb0","\x00","\x13","\x68");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpliceObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpliceObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpliceObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpliceObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpliceObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpliceObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
} // end namespace object
} // end namespace builtin
