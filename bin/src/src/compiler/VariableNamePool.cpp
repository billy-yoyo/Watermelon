// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_compiler_VariableNamePool
#include <src/compiler/VariableNamePool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ebde77559217e258_8_new,"src.compiler.VariableNamePool","new",0x6bddb7da,"src.compiler.VariableNamePool.new","src/compiler/VariableNamePool.hx",8,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_48_nextName,"src.compiler.VariableNamePool","nextName",0x5086d724,"src.compiler.VariableNamePool.nextName","src/compiler/VariableNamePool.hx",48,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_53_getName,"src.compiler.VariableNamePool","getName",0x4e6e4e7b,"src.compiler.VariableNamePool.getName","src/compiler/VariableNamePool.hx",53,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_68_newName,"src.compiler.VariableNamePool","newName",0x2bb84b45,"src.compiler.VariableNamePool.newName","src/compiler/VariableNamePool.hx",68,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_77_add,"src.compiler.VariableNamePool","add",0x6bd3d99b,"src.compiler.VariableNamePool.add","src/compiler/VariableNamePool.hx",77,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_83_getVariable,"src.compiler.VariableNamePool","getVariable",0x8855c66c,"src.compiler.VariableNamePool.getVariable","src/compiler/VariableNamePool.hx",83,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_21_nameFromID,"src.compiler.VariableNamePool","nameFromID",0x08e12036,"src.compiler.VariableNamePool.nameFromID","src/compiler/VariableNamePool.hx",21,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_36_idFromName,"src.compiler.VariableNamePool","idFromName",0x93f08796,"src.compiler.VariableNamePool.idFromName","src/compiler/VariableNamePool.hx",36,0xeb4374f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ebde77559217e258_10_boot,"src.compiler.VariableNamePool","boot",0xee3c2778,"src.compiler.VariableNamePool.boot","src/compiler/VariableNamePool.hx",10,0xeb4374f6)
namespace src{
namespace compiler{

void VariableNamePool_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ebde77559217e258_8_new)
HXLINE(  13)		this->last = (int)0;
HXLINE(  12)		this->pool =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  16)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
            	}

Dynamic VariableNamePool_obj::__CreateEmpty() { return new VariableNamePool_obj; }

void *VariableNamePool_obj::_hx_vtable = 0;

Dynamic VariableNamePool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VariableNamePool_obj > _hx_result = new VariableNamePool_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VariableNamePool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4d26a506;
}

::String VariableNamePool_obj::nextName(){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_48_nextName)
HXDLIN(  48)		return ::src::compiler::VariableNamePool_obj::nameFromID(this->last++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VariableNamePool_obj,nextName,return )

::String VariableNamePool_obj::getName(::String variable){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_53_getName)
HXDLIN(  53)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
HXDLIN(  53)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VariableNamePool_obj,getName,return )

::String VariableNamePool_obj::newName(::String variable){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_68_newName)
HXDLIN(  68)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
HXDLIN(  68)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VariableNamePool_obj,newName,return )

void VariableNamePool_obj::add(::String variable,::String name){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_77_add)
HXDLIN(  77)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
            	}


HX_DEFINE_DYNAMIC_FUNC2(VariableNamePool_obj,add,(void))

::String VariableNamePool_obj::getVariable(::String name){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_83_getVariable)
HXDLIN(  83)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
HXDLIN(  83)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VariableNamePool_obj,getVariable,return )

::String VariableNamePool_obj::alphabet;

::String VariableNamePool_obj::nameFromID(int id){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_21_nameFromID)
HXDLIN(  21)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
HXDLIN(  21)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VariableNamePool_obj,nameFromID,return )

int VariableNamePool_obj::idFromName(::String name){
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_36_idFromName)
HXDLIN(  36)		HX_STACK_DO_THROW(HX_("Not in use",19,4e,f4,91));
HXDLIN(  36)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VariableNamePool_obj,idFromName,return )


hx::ObjectPtr< VariableNamePool_obj > VariableNamePool_obj::__new() {
	hx::ObjectPtr< VariableNamePool_obj > __this = new VariableNamePool_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VariableNamePool_obj > VariableNamePool_obj::__alloc(hx::Ctx *_hx_ctx) {
	VariableNamePool_obj *__this = (VariableNamePool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VariableNamePool_obj), true, "src.compiler.VariableNamePool"));
	*(void **)__this = VariableNamePool_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VariableNamePool_obj::VariableNamePool_obj()
{
}

void VariableNamePool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VariableNamePool);
	HX_MARK_MEMBER_NAME(pool,"pool");
	HX_MARK_MEMBER_NAME(last,"last");
	HX_MARK_END_CLASS();
}

void VariableNamePool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pool,"pool");
	HX_VISIT_MEMBER_NAME(last,"last");
}

hx::Val VariableNamePool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { return hx::Val( pool ); }
		if (HX_FIELD_EQ(inName,"last") ) { return hx::Val( last ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		if (HX_FIELD_EQ(inName,"newName") ) { return hx::Val( newName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextName") ) { return hx::Val( nextName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getVariable") ) { return hx::Val( getVariable_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VariableNamePool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"alphabet") ) { outValue = ( alphabet ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nameFromID") ) { outValue = nameFromID_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"idFromName") ) { outValue = idFromName_dyn(); return true; }
	}
	return false;
}

hx::Val VariableNamePool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { pool=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"last") ) { last=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool VariableNamePool_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"alphabet") ) { alphabet=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void VariableNamePool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("last","\x56","\x0a","\xad","\x47"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VariableNamePool_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(VariableNamePool_obj,pool),HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a")},
	{hx::fsInt,(int)offsetof(VariableNamePool_obj,last),HX_HCSTRING("last","\x56","\x0a","\xad","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo VariableNamePool_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &VariableNamePool_obj::alphabet,HX_HCSTRING("alphabet","\xb3","\x7c","\x38","\x21")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String VariableNamePool_obj_sMemberFields[] = {
	HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("nextName","\xde","\x18","\xcc","\xf4"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("newName","\xcb","\x1e","\xcc","\xf8"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("getVariable","\xf2","\xd4","\x00","\x8f"),
	::String(null()) };

static void VariableNamePool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VariableNamePool_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(VariableNamePool_obj::alphabet,"alphabet");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VariableNamePool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VariableNamePool_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(VariableNamePool_obj::alphabet,"alphabet");
};

#endif

hx::Class VariableNamePool_obj::__mClass;

static ::String VariableNamePool_obj_sStaticFields[] = {
	HX_HCSTRING("alphabet","\xb3","\x7c","\x38","\x21"),
	HX_HCSTRING("nameFromID","\x70","\xc4","\x45","\x3a"),
	HX_HCSTRING("idFromName","\xd0","\x2b","\x55","\xc5"),
	::String(null())
};

void VariableNamePool_obj::__register()
{
	hx::Object *dummy = new VariableNamePool_obj;
	VariableNamePool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("src.compiler.VariableNamePool","\xe8","\x82","\xc2","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VariableNamePool_obj::__GetStatic;
	__mClass->mSetStaticField = &VariableNamePool_obj::__SetStatic;
	__mClass->mMarkFunc = VariableNamePool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VariableNamePool_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VariableNamePool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VariableNamePool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VariableNamePool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VariableNamePool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VariableNamePool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VariableNamePool_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ebde77559217e258_10_boot)
HXDLIN(  10)		alphabet = HX_("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",05,20,77,a1);
            	}
}

} // end namespace src
} // end namespace compiler
